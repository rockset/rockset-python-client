"""
    REST API

    Rockset's REST API allows for creating and managing all resources in Rockset. Each supported endpoint is documented below.  All requests must be authorized with a Rockset API key, which can be created in the [Rockset console](https://console.rockset.com). The API key must be provided as `ApiKey <api_key>` in the `Authorization` request header. For example: ``` Authorization: ApiKey aB35kDjg93J5nsf4GjwMeErAVd832F7ad4vhsW1S02kfZiab42sTsfW5Sxt25asT ```  All endpoints are only accessible via https.  Build something awesome!  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


from unittest import mock

from rockset.models import *
from test.conftest import EarlyExit, validate_call


def test_create(get_client, mock_request, request_validator):
    with mock_request:
        rs = get_client
        try:
            rs.Views.create(
    description="view of awesome collection",
    name="myAwesomeView",
    query="SELECT * FROM foo",
)
        except EarlyExit as e:
            validate_call(e, request_validator)


def test_delete(get_client, mock_request, request_validator):
    with mock_request:
        rs = get_client
        try:
            rs.Views.delete(
    view="view_example",
)
        except EarlyExit as e:
            validate_call(e, request_validator)


def test_get(get_client, mock_request, request_validator):
    with mock_request:
        rs = get_client
        try:
            rs.Views.get(
    view="view_example",
)
        except EarlyExit as e:
            validate_call(e, request_validator)


def test_list(get_client, mock_request, request_validator):
    with mock_request:
        rs = get_client
        try:
            rs.Views.list(
)
        except EarlyExit as e:
            validate_call(e, request_validator)


def test_update(get_client, mock_request, request_validator):
    with mock_request:
        rs = get_client
        try:
            rs.Views.update(
    view="view_example",
    description="view of awesome collection",
    query="SELECT * FROM foo",
)
        except EarlyExit as e:
            validate_call(e, request_validator)


def test_workspace_views(get_client, mock_request, request_validator):
    with mock_request:
        rs = get_client
        try:
            rs.Views.workspace_views(
)
        except EarlyExit as e:
            validate_call(e, request_validator)

