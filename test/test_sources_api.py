"""
    REST API

    Rockset's REST API allows for creating and managing all resources in Rockset. Each supported endpoint is documented below.  All requests must be authorized with a Rockset API key, which can be created in the [Rockset console](https://console.rockset.com). The API key must be provided as `ApiKey <api_key>` in the `Authorization` request header. For example: ``` Authorization: ApiKey aB35kDjg93J5nsf4GjwMeErAVd832F7ad4vhsW1S02kfZiab42sTsfW5Sxt25asT ```  All endpoints are only accessible via https.  Build something awesome!  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


from unittest import mock

from rockset.models import *
from test.conftest import EarlyExit, validate_call


def test_create_source(get_client, mock_request, request_validator):
    with mock_request:
        rs = get_client
        try:
            rs.Sources.create_source(
                collection="collection_example",
                format_params=FormatParams(
                    csv=CsvParams(
                        column_names=["c1", "c2", "c3"],
                        column_types=["BOOLEAN", "INTEGER", "FLOAT", "STRING"],
                        encoding="UTF-8",
                        escape_char="\\",
                        first_line_as_column_names=True,
                        quote_char='"',
                        separator=",",
                    ),
                    json=True,
                    mssql_dms=True,
                    mysql_dms=True,
                    oracle_dms=True,
                    postgres_dms=True,
                    xml=XmlParams(
                        attribute_prefix="_attr",
                        doc_tag="row",
                        encoding="UTF-8",
                        root_tag="root",
                        value_tag="value",
                    ),
                ),
                integration_name="aws-integration",
            )
        except EarlyExit as e:
            validate_call(e, request_validator)


def test_delete(get_client, mock_request, request_validator):
    with mock_request:
        rs = get_client
        try:
            rs.Sources.delete(
                collection="collection_example",
                source="source_example",
            )
        except EarlyExit as e:
            validate_call(e, request_validator)


def test_get(get_client, mock_request, request_validator):
    with mock_request:
        rs = get_client
        try:
            rs.Sources.get(
                collection="collection_example",
                source="source_example",
            )
        except EarlyExit as e:
            validate_call(e, request_validator)


def test_list_collection_sources(get_client, mock_request, request_validator):
    with mock_request:
        rs = get_client
        try:
            rs.Sources.list_collection_sources(
                collection="collection_example",
            )
        except EarlyExit as e:
            validate_call(e, request_validator)
