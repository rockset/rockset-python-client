"""
    REST API

    Rockset's REST API allows for creating and managing all resources in Rockset. Each supported endpoint is documented below.  All requests must be authorized with a Rockset API key, which can be created in the [Rockset console](https://console.rockset.com). The API key must be provided as `ApiKey <api_key>` in the `Authorization` request header. For example: ``` Authorization: ApiKey aB35kDjg93J5nsf4GjwMeErAVd832F7ad4vhsW1S02kfZiab42sTsfW5Sxt25asT ```  All endpoints are only accessible via https.  Build something awesome!  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


from unittest import mock

from rockset.models import *
from test.conftest import EarlyExit, validate_call


def test_cancel_query(get_client, mock_request, request_validator):
    with mock_request:
        rs = get_client
        try:
            rs.Queries.cancel_query(
                query_id="queryId_example",
            )
        except EarlyExit as e:
            validate_call(e, request_validator)


def test_get_query(get_client, mock_request, request_validator):
    with mock_request:
        rs = get_client
        try:
            rs.Queries.get_query(
                query_id="queryId_example",
            )
        except EarlyExit as e:
            validate_call(e, request_validator)


def test_get_query_results(get_client, mock_request, request_validator):
    with mock_request:
        rs = get_client
        try:
            rs.Queries.get_query_results(
                query_id="queryId_example",
            )
        except EarlyExit as e:
            validate_call(e, request_validator)


def test_list_active_queries(get_client, mock_request, request_validator):
    with mock_request:
        rs = get_client
        try:
            rs.Queries.list_active_queries()
        except EarlyExit as e:
            validate_call(e, request_validator)


def test_query(get_client, mock_request, request_validator):
    with mock_request:
        rs = get_client
        try:
            rs.Queries.query(
                _async=True,
                async_options=AsyncQueryOptions(
                    client_timeout_ms=1,
                    max_initial_results=1,
                    timeout_ms=1,
                ),
                debug_threshold_ms=1,
                max_initial_results=1,
                sql=QueryRequestSql(
                    default_row_limit=1,
                    generate_warnings=False,
                    initial_paginate_response_doc_count=1,
                    parameters=[
                        QueryParameter(
                            name="_id",
                            type="string",
                            value="85beb391",
                        ),
                    ],
                    query="SELECT * FROM foo where _id = :_id",
                ),
                timeout_ms=1,
            )
        except EarlyExit as e:
            validate_call(e, request_validator)


def test_validate(get_client, mock_request, request_validator):
    with mock_request:
        rs = get_client
        try:
            rs.Queries.validate(
                _async=True,
                async_options=AsyncQueryOptions(
                    client_timeout_ms=1,
                    max_initial_results=1,
                    timeout_ms=1,
                ),
                debug_threshold_ms=1,
                max_initial_results=1,
                sql=QueryRequestSql(
                    default_row_limit=1,
                    generate_warnings=False,
                    initial_paginate_response_doc_count=1,
                    parameters=[
                        QueryParameter(
                            name="_id",
                            type="string",
                            value="85beb391",
                        ),
                    ],
                    query="SELECT * FROM foo where _id = :_id",
                ),
                timeout_ms=1,
            )
        except EarlyExit as e:
            validate_call(e, request_validator)
