"""
    REST API

    Rockset's REST API allows for creating and managing all resources in Rockset. Each supported endpoint is documented below.  All requests must be authorized with a Rockset API key, which can be created in the [Rockset console](https://console.rockset.com). The API key must be provided as `ApiKey <api_key>` in the `Authorization` request header. For example: ``` Authorization: ApiKey aB35kDjg93J5nsf4GjwMeErAVd832F7ad4vhsW1S02kfZiab42sTsfW5Sxt25asT ```  All endpoints are only accessible via https.  Build something awesome!  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


from unittest import mock

from rockset.models import *
from test.conftest import EarlyExit, validate_call


def test_create_azure_blob_storage_integration(get_client, mock_request, request_validator):
    with mock_request:
        rs = get_client
        try:
            rs.Integrations.create_azure_blob_storage_integration(
    name="event-logs",
)
        except EarlyExit as e:
            validate_call(e, request_validator)


def test_create_azure_event_hubs_integration(get_client, mock_request, request_validator):
    with mock_request:
        rs = get_client
        try:
            rs.Integrations.create_azure_event_hubs_integration(
    name="event-logs",
)
        except EarlyExit as e:
            validate_call(e, request_validator)


def test_create_dynamodb_integration(get_client, mock_request, request_validator):
    with mock_request:
        rs = get_client
        try:
            rs.Integrations.create_dynamodb_integration(
    name="event-logs",
)
        except EarlyExit as e:
            validate_call(e, request_validator)


def test_create_gcs_integration(get_client, mock_request, request_validator):
    with mock_request:
        rs = get_client
        try:
            rs.Integrations.create_gcs_integration(
    name="event-logs",
)
        except EarlyExit as e:
            validate_call(e, request_validator)


def test_create_kafka_integration(get_client, mock_request, request_validator):
    with mock_request:
        rs = get_client
        try:
            rs.Integrations.create_kafka_integration(
    name="event-logs",
)
        except EarlyExit as e:
            validate_call(e, request_validator)


def test_create_kinesis_integration(get_client, mock_request, request_validator):
    with mock_request:
        rs = get_client
        try:
            rs.Integrations.create_kinesis_integration(
    name="event-logs",
)
        except EarlyExit as e:
            validate_call(e, request_validator)


def test_create_mongodb_integration(get_client, mock_request, request_validator):
    with mock_request:
        rs = get_client
        try:
            rs.Integrations.create_mongodb_integration(
    name="event-logs",
)
        except EarlyExit as e:
            validate_call(e, request_validator)


def test_create_s3_integration(get_client, mock_request, request_validator):
    with mock_request:
        rs = get_client
        try:
            rs.Integrations.create_s3_integration(
    name="event-logs",
)
        except EarlyExit as e:
            validate_call(e, request_validator)


def test_create_segment_integration(get_client, mock_request, request_validator):
    with mock_request:
        rs = get_client
        try:
            rs.Integrations.create_segment_integration(
    name="event-logs",
)
        except EarlyExit as e:
            validate_call(e, request_validator)


def test_delete_integration(get_client, mock_request, request_validator):
    with mock_request:
        rs = get_client
        try:
            rs.Integrations.delete_integration(
    integration="integration_example",
)
        except EarlyExit as e:
            validate_call(e, request_validator)


def test_get_integration(get_client, mock_request, request_validator):
    with mock_request:
        rs = get_client
        try:
            rs.Integrations.get_integration(
    integration="integration_example",
)
        except EarlyExit as e:
            validate_call(e, request_validator)


def test_list_integrations(get_client, mock_request, request_validator):
    with mock_request:
        rs = get_client
        try:
            rs.Integrations.list_integrations(
)
        except EarlyExit as e:
            validate_call(e, request_validator)


def test_update_integration(get_client, mock_request, request_validator):
    with mock_request:
        rs = get_client
        try:
            rs.Integrations.update_integration(
    integration="integration_example",
)
        except EarlyExit as e:
            validate_call(e, request_validator)

