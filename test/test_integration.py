"""
    REST API

    Rockset's REST API allows for creating and managing all resources in Rockset. Each supported endpoint is documented below.  All requests must be authorized with a Rockset API key, which can be created in the [Rockset console](https://console.rockset.com). The API key must be provided as `ApiKey <api_key>` in the `Authorization` request header. For example: ``` Authorization: ApiKey aB35kDjg93J5nsf4GjwMeErAVd832F7ad4vhsW1S02kfZiab42sTsfW5Sxt25asT ```  All endpoints are only accessible via https.  Build something awesome!  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


import sys
import unittest

import rockset
from rockset.model.az_event_hub_integration import AzEventHubIntegration
from rockset.model.az_service_bus_integration import AzServiceBusIntegration
from rockset.model.azure_blob_storage_integration import AzureBlobStorageIntegration
from rockset.model.collection import Collection
from rockset.model.dynamodb_integration import DynamodbIntegration
from rockset.model.gcs_integration import GcsIntegration
from rockset.model.kafka_integration import KafkaIntegration
from rockset.model.kinesis_integration import KinesisIntegration
from rockset.model.mongo_db_integration import MongoDbIntegration
from rockset.model.s3_integration import S3Integration
from rockset.model.segment_integration import SegmentIntegration

globals()["AzEventHubIntegration"] = AzEventHubIntegration
globals()["AzServiceBusIntegration"] = AzServiceBusIntegration
globals()["AzureBlobStorageIntegration"] = AzureBlobStorageIntegration
globals()["Collection"] = Collection
globals()["DynamodbIntegration"] = DynamodbIntegration
globals()["GcsIntegration"] = GcsIntegration
globals()["KafkaIntegration"] = KafkaIntegration
globals()["KinesisIntegration"] = KinesisIntegration
globals()["MongoDbIntegration"] = MongoDbIntegration
globals()["S3Integration"] = S3Integration
globals()["SegmentIntegration"] = SegmentIntegration
from rockset.model.integration import Integration


class TestIntegration(unittest.TestCase):
    """Integration unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def testIntegration(self):
        """Test Integration"""
        # FIXME: construct object with mandatory attributes with example values
        # model = Integration()  # noqa: E501
        pass


if __name__ == "__main__":
    unittest.main()
