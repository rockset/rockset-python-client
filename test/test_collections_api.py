"""
    REST API

    Rockset's REST API allows for creating and managing all resources in Rockset. Each supported endpoint is documented below.  All requests must be authorized with a Rockset API key, which can be created in the [Rockset console](https://console.rockset.com). The API key must be provided as `ApiKey <api_key>` in the `Authorization` request header. For example: ``` Authorization: ApiKey aB35kDjg93J5nsf4GjwMeErAVd832F7ad4vhsW1S02kfZiab42sTsfW5Sxt25asT ```  All endpoints are only accessible via https.  Build something awesome!  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


from unittest import mock

from rockset.models import *
from test.conftest import EarlyExit, validate_call


def test_create_azure_blob_storage_collection(get_client, mock_request, request_validator):
    with mock_request:
        rs = get_client
        try:
            rs.Collections.create_azure_blob_storage_collection(
    name="global-transactions",
)
        except EarlyExit as e:
            validate_call(e, request_validator)


def test_create_azure_event_hubs_collection(get_client, mock_request, request_validator):
    with mock_request:
        rs = get_client
        try:
            rs.Collections.create_azure_event_hubs_collection(
    name="global-transactions",
)
        except EarlyExit as e:
            validate_call(e, request_validator)


def test_create_azure_service_bus_collection(get_client, mock_request, request_validator):
    with mock_request:
        rs = get_client
        try:
            rs.Collections.create_azure_service_bus_collection(
    name="global-transactions",
)
        except EarlyExit as e:
            validate_call(e, request_validator)


def test_create_dynamodb_collection(get_client, mock_request, request_validator):
    with mock_request:
        rs = get_client
        try:
            rs.Collections.create_dynamodb_collection(
    name="global-transactions",
)
        except EarlyExit as e:
            validate_call(e, request_validator)


def test_create_file_upload_collection(get_client, mock_request, request_validator):
    with mock_request:
        rs = get_client
        try:
            rs.Collections.create_file_upload_collection(
    name="global-transactions",
)
        except EarlyExit as e:
            validate_call(e, request_validator)


def test_create_gcs_collection(get_client, mock_request, request_validator):
    with mock_request:
        rs = get_client
        try:
            rs.Collections.create_gcs_collection(
    name="global-transactions",
)
        except EarlyExit as e:
            validate_call(e, request_validator)


def test_create_kafka_collection(get_client, mock_request, request_validator):
    with mock_request:
        rs = get_client
        try:
            rs.Collections.create_kafka_collection(
    name="global-transactions",
)
        except EarlyExit as e:
            validate_call(e, request_validator)


def test_create_kinesis_collection(get_client, mock_request, request_validator):
    with mock_request:
        rs = get_client
        try:
            rs.Collections.create_kinesis_collection(
    name="global-transactions",
)
        except EarlyExit as e:
            validate_call(e, request_validator)


def test_create_mongodb_collection(get_client, mock_request, request_validator):
    with mock_request:
        rs = get_client
        try:
            rs.Collections.create_mongodb_collection(
    name="global-transactions",
)
        except EarlyExit as e:
            validate_call(e, request_validator)


def test_create_s3_collection(get_client, mock_request, request_validator):
    with mock_request:
        rs = get_client
        try:
            rs.Collections.create_s3_collection(
    name="global-transactions",
)
        except EarlyExit as e:
            validate_call(e, request_validator)


def test_delete_collection(get_client, mock_request, request_validator):
    with mock_request:
        rs = get_client
        try:
            rs.Collections.delete_collection(
    collection="collection_example",
)
        except EarlyExit as e:
            validate_call(e, request_validator)


def test_get_collection(get_client, mock_request, request_validator):
    with mock_request:
        rs = get_client
        try:
            rs.Collections.get_collection(
    collection="collection_example",
)
        except EarlyExit as e:
            validate_call(e, request_validator)


def test_list_collections(get_client, mock_request, request_validator):
    with mock_request:
        rs = get_client
        try:
            rs.Collections.list_collections(
)
        except EarlyExit as e:
            validate_call(e, request_validator)


def test_workspace_collections(get_client, mock_request, request_validator):
    with mock_request:
        rs = get_client
        try:
            rs.Collections.workspace_collections(
)
        except EarlyExit as e:
            validate_call(e, request_validator)

