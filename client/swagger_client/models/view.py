# coding: utf-8

"""
    REST API

    Rockset's REST API allows for creating and managing all resources in Rockset. Each supported endpoint is documented below.  All requests must be authorized with a Rockset API key, which can be created in the [Rockset console](https://console.rockset.com). The API key must be provided as `ApiKey <api_key>` in the `Authorization` request header. For example: ``` Authorization: ApiKey aB35kDjg93J5nsf4GjwMeErAVd832F7ad4vhsW1S02kfZiab42sTsfW5Sxt25asT ```  All endpoints are only accessible via https.  Build something awesome!  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class View(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'path': 'str',
        'name': 'str',
        'description': 'str',
        'workspace': 'str',
        'creator_email': 'str',
        'owner_email': 'str',
        'query_sql': 'str',
        'entities': 'list[str]',
        'state': 'str',
        'created_at': 'str',
        'modified_at': 'str'
    }

    attribute_map = {
        'path': 'path',
        'name': 'name',
        'description': 'description',
        'workspace': 'workspace',
        'creator_email': 'creator_email',
        'owner_email': 'owner_email',
        'query_sql': 'query_sql',
        'entities': 'entities',
        'state': 'state',
        'created_at': 'created_at',
        'modified_at': 'modified_at'
    }

    def __init__(self, path=None, name=None, description=None, workspace=None, creator_email=None, owner_email=None, query_sql=None, entities=None, state=None, created_at=None, modified_at=None, _configuration=None):  # noqa: E501
        """View - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._path = None
        self._name = None
        self._description = None
        self._workspace = None
        self._creator_email = None
        self._owner_email = None
        self._query_sql = None
        self._entities = None
        self._state = None
        self._created_at = None
        self._modified_at = None
        self.discriminator = None

        if path is not None:
            self.path = path
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if workspace is not None:
            self.workspace = workspace
        if creator_email is not None:
            self.creator_email = creator_email
        if owner_email is not None:
            self.owner_email = owner_email
        if query_sql is not None:
            self.query_sql = query_sql
        if entities is not None:
            self.entities = entities
        if state is not None:
            self.state = state
        if created_at is not None:
            self.created_at = created_at
        if modified_at is not None:
            self.modified_at = modified_at

    @property
    def path(self):
        """Gets the path of this View.  # noqa: E501


        :return: The path of this View.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this View.


        :param path: The path of this View.  # noqa: E501
        :type: str
        """

        self._path = path

    @property
    def name(self):
        """Gets the name of this View.  # noqa: E501

        name of the view  # noqa: E501

        :return: The name of this View.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this View.

        name of the view  # noqa: E501

        :param name: The name of this View.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this View.  # noqa: E501

        view description  # noqa: E501

        :return: The description of this View.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this View.

        view description  # noqa: E501

        :param description: The description of this View.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def workspace(self):
        """Gets the workspace of this View.  # noqa: E501

        name of the workspace  # noqa: E501

        :return: The workspace of this View.  # noqa: E501
        :rtype: str
        """
        return self._workspace

    @workspace.setter
    def workspace(self, workspace):
        """Sets the workspace of this View.

        name of the workspace  # noqa: E501

        :param workspace: The workspace of this View.  # noqa: E501
        :type: str
        """

        self._workspace = workspace

    @property
    def creator_email(self):
        """Gets the creator_email of this View.  # noqa: E501

        email of the creator  # noqa: E501

        :return: The creator_email of this View.  # noqa: E501
        :rtype: str
        """
        return self._creator_email

    @creator_email.setter
    def creator_email(self, creator_email):
        """Sets the creator_email of this View.

        email of the creator  # noqa: E501

        :param creator_email: The creator_email of this View.  # noqa: E501
        :type: str
        """

        self._creator_email = creator_email

    @property
    def owner_email(self):
        """Gets the owner_email of this View.  # noqa: E501

        email of the owner  # noqa: E501

        :return: The owner_email of this View.  # noqa: E501
        :rtype: str
        """
        return self._owner_email

    @owner_email.setter
    def owner_email(self, owner_email):
        """Sets the owner_email of this View.

        email of the owner  # noqa: E501

        :param owner_email: The owner_email of this View.  # noqa: E501
        :type: str
        """

        self._owner_email = owner_email

    @property
    def query_sql(self):
        """Gets the query_sql of this View.  # noqa: E501

        SQL query of the view  # noqa: E501

        :return: The query_sql of this View.  # noqa: E501
        :rtype: str
        """
        return self._query_sql

    @query_sql.setter
    def query_sql(self, query_sql):
        """Sets the query_sql of this View.

        SQL query of the view  # noqa: E501

        :param query_sql: The query_sql of this View.  # noqa: E501
        :type: str
        """

        self._query_sql = query_sql

    @property
    def entities(self):
        """Gets the entities of this View.  # noqa: E501

        list of entities referenced by view. An entity can be a view, alias or collection  # noqa: E501

        :return: The entities of this View.  # noqa: E501
        :rtype: list[str]
        """
        return self._entities

    @entities.setter
    def entities(self, entities):
        """Sets the entities of this View.

        list of entities referenced by view. An entity can be a view, alias or collection  # noqa: E501

        :param entities: The entities of this View.  # noqa: E501
        :type: list[str]
        """

        self._entities = entities

    @property
    def state(self):
        """Gets the state of this View.  # noqa: E501

        state of the view  # noqa: E501

        :return: The state of this View.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this View.

        state of the view  # noqa: E501

        :param state: The state of this View.  # noqa: E501
        :type: str
        """
        allowed_values = ["CREATED", "SYNCING", "DELETED"]  # noqa: E501
        if (self._configuration.client_side_validation and
                state not in allowed_values):
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"  # noqa: E501
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def created_at(self):
        """Gets the created_at of this View.  # noqa: E501

        ISO-8601 date  # noqa: E501

        :return: The created_at of this View.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this View.

        ISO-8601 date  # noqa: E501

        :param created_at: The created_at of this View.  # noqa: E501
        :type: str
        """

        self._created_at = created_at

    @property
    def modified_at(self):
        """Gets the modified_at of this View.  # noqa: E501

        ISO-8601 date  # noqa: E501

        :return: The modified_at of this View.  # noqa: E501
        :rtype: str
        """
        return self._modified_at

    @modified_at.setter
    def modified_at(self, modified_at):
        """Sets the modified_at of this View.

        ISO-8601 date  # noqa: E501

        :param modified_at: The modified_at of this View.  # noqa: E501
        :type: str
        """

        self._modified_at = modified_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(View, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, View):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, View):
            return True

        return self.to_dict() != other.to_dict()
