# coding: utf-8

"""
    REST API

    Rockset's REST API allows for creating and managing all resources in Rockset. Each supported endpoint is documented below.  All requests must be authorized with a Rockset API key, which can be created in the [Rockset console](https://console.rockset.com). The API key must be provided as `ApiKey <api_key>` in the `Authorization` request header. For example: ``` Authorization: ApiKey aB35kDjg93J5nsf4GjwMeErAVd832F7ad4vhsW1S02kfZiab42sTsfW5Sxt25asT ```  All endpoints are only accessible via https.  Build something awesome!  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class QueryLambdasApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_query_lambda(self, workspace, body, **kwargs):  # noqa: E501
        """Create Query Lambda  # noqa: E501

        Create a Query Lambda in given workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_query_lambda(workspace, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: name of the workspace (required)
        :param CreateQueryLambdaRequest body: JSON object (required)
        :return: QueryLambdaVersionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_query_lambda_with_http_info(workspace, body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_query_lambda_with_http_info(workspace, body, **kwargs)  # noqa: E501
            return data

    def create_query_lambda_with_http_info(self, workspace, body, **kwargs):  # noqa: E501
        """Create Query Lambda  # noqa: E501

        Create a Query Lambda in given workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_query_lambda_with_http_info(workspace, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: name of the workspace (required)
        :param CreateQueryLambdaRequest body: JSON object (required)
        :return: QueryLambdaVersionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_query_lambda" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace' is set
        if self.api_client.client_side_validation and ('workspace' not in params or
                                                       params['workspace'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `workspace` when calling `create_query_lambda`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `create_query_lambda`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace' in params:
            path_params['workspace'] = params['workspace']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/orgs/self/ws/{workspace}/lambdas', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='QueryLambdaVersionResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_query_lambda_tag(self, workspace, query_lambda, body, **kwargs):  # noqa: E501
        """Create Query Lambda Tag  # noqa: E501

        Create a tag for a specific Query Lambda version, or update that tag if it already exists.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_query_lambda_tag(workspace, query_lambda, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: name of the workspace (required)
        :param str query_lambda: name of the Query Lambda (required)
        :param CreateQueryLambdaTagRequest body: JSON object (required)
        :return: QueryLambdaTagResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_query_lambda_tag_with_http_info(workspace, query_lambda, body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_query_lambda_tag_with_http_info(workspace, query_lambda, body, **kwargs)  # noqa: E501
            return data

    def create_query_lambda_tag_with_http_info(self, workspace, query_lambda, body, **kwargs):  # noqa: E501
        """Create Query Lambda Tag  # noqa: E501

        Create a tag for a specific Query Lambda version, or update that tag if it already exists.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_query_lambda_tag_with_http_info(workspace, query_lambda, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: name of the workspace (required)
        :param str query_lambda: name of the Query Lambda (required)
        :param CreateQueryLambdaTagRequest body: JSON object (required)
        :return: QueryLambdaTagResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace', 'query_lambda', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_query_lambda_tag" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace' is set
        if self.api_client.client_side_validation and ('workspace' not in params or
                                                       params['workspace'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `workspace` when calling `create_query_lambda_tag`")  # noqa: E501
        # verify the required parameter 'query_lambda' is set
        if self.api_client.client_side_validation and ('query_lambda' not in params or
                                                       params['query_lambda'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `query_lambda` when calling `create_query_lambda_tag`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `create_query_lambda_tag`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace' in params:
            path_params['workspace'] = params['workspace']  # noqa: E501
        if 'query_lambda' in params:
            path_params['queryLambda'] = params['query_lambda']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/orgs/self/ws/{workspace}/lambdas/{queryLambda}/tags', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='QueryLambdaTagResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_query_lambda(self, workspace, query_lambda, **kwargs):  # noqa: E501
        """Delete Query Lambda  # noqa: E501

        Delete a Query Lambda.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_query_lambda(workspace, query_lambda, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: name of the workspace (required)
        :param str query_lambda: name of the Query Lambda (required)
        :return: DeleteQueryLambdaResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_query_lambda_with_http_info(workspace, query_lambda, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_query_lambda_with_http_info(workspace, query_lambda, **kwargs)  # noqa: E501
            return data

    def delete_query_lambda_with_http_info(self, workspace, query_lambda, **kwargs):  # noqa: E501
        """Delete Query Lambda  # noqa: E501

        Delete a Query Lambda.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_query_lambda_with_http_info(workspace, query_lambda, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: name of the workspace (required)
        :param str query_lambda: name of the Query Lambda (required)
        :return: DeleteQueryLambdaResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace', 'query_lambda']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_query_lambda" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace' is set
        if self.api_client.client_side_validation and ('workspace' not in params or
                                                       params['workspace'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `workspace` when calling `delete_query_lambda`")  # noqa: E501
        # verify the required parameter 'query_lambda' is set
        if self.api_client.client_side_validation and ('query_lambda' not in params or
                                                       params['query_lambda'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `query_lambda` when calling `delete_query_lambda`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace' in params:
            path_params['workspace'] = params['workspace']  # noqa: E501
        if 'query_lambda' in params:
            path_params['queryLambda'] = params['query_lambda']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/orgs/self/ws/{workspace}/lambdas/{queryLambda}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeleteQueryLambdaResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_query_lambda_tag(self, workspace, query_lambda, tag, **kwargs):  # noqa: E501
        """Delete Query Lambda Tag Version  # noqa: E501

        Delete a tag for a specific Query Lambda  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_query_lambda_tag(workspace, query_lambda, tag, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: name of the workspace (required)
        :param str query_lambda: name of the Query Lambda (required)
        :param str tag: name of the tag (required)
        :return: QueryLambdaTagResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_query_lambda_tag_with_http_info(workspace, query_lambda, tag, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_query_lambda_tag_with_http_info(workspace, query_lambda, tag, **kwargs)  # noqa: E501
            return data

    def delete_query_lambda_tag_with_http_info(self, workspace, query_lambda, tag, **kwargs):  # noqa: E501
        """Delete Query Lambda Tag Version  # noqa: E501

        Delete a tag for a specific Query Lambda  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_query_lambda_tag_with_http_info(workspace, query_lambda, tag, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: name of the workspace (required)
        :param str query_lambda: name of the Query Lambda (required)
        :param str tag: name of the tag (required)
        :return: QueryLambdaTagResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace', 'query_lambda', 'tag']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_query_lambda_tag" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace' is set
        if self.api_client.client_side_validation and ('workspace' not in params or
                                                       params['workspace'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `workspace` when calling `delete_query_lambda_tag`")  # noqa: E501
        # verify the required parameter 'query_lambda' is set
        if self.api_client.client_side_validation and ('query_lambda' not in params or
                                                       params['query_lambda'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `query_lambda` when calling `delete_query_lambda_tag`")  # noqa: E501
        # verify the required parameter 'tag' is set
        if self.api_client.client_side_validation and ('tag' not in params or
                                                       params['tag'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `tag` when calling `delete_query_lambda_tag`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace' in params:
            path_params['workspace'] = params['workspace']  # noqa: E501
        if 'query_lambda' in params:
            path_params['queryLambda'] = params['query_lambda']  # noqa: E501
        if 'tag' in params:
            path_params['tag'] = params['tag']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/orgs/self/ws/{workspace}/lambdas/{queryLambda}/tags/{tag}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='QueryLambdaTagResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_query_lambda_version(self, workspace, query_lambda, version, **kwargs):  # noqa: E501
        """Delete Query Lambda Version  # noqa: E501

        Delete a Query Lambda version.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_query_lambda_version(workspace, query_lambda, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: name of the workspace (required)
        :param str query_lambda: name of the Query Lambda (required)
        :param str version: version (required)
        :return: QueryLambdaVersionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_query_lambda_version_with_http_info(workspace, query_lambda, version, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_query_lambda_version_with_http_info(workspace, query_lambda, version, **kwargs)  # noqa: E501
            return data

    def delete_query_lambda_version_with_http_info(self, workspace, query_lambda, version, **kwargs):  # noqa: E501
        """Delete Query Lambda Version  # noqa: E501

        Delete a Query Lambda version.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_query_lambda_version_with_http_info(workspace, query_lambda, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: name of the workspace (required)
        :param str query_lambda: name of the Query Lambda (required)
        :param str version: version (required)
        :return: QueryLambdaVersionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace', 'query_lambda', 'version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_query_lambda_version" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace' is set
        if self.api_client.client_side_validation and ('workspace' not in params or
                                                       params['workspace'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `workspace` when calling `delete_query_lambda_version`")  # noqa: E501
        # verify the required parameter 'query_lambda' is set
        if self.api_client.client_side_validation and ('query_lambda' not in params or
                                                       params['query_lambda'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `query_lambda` when calling `delete_query_lambda_version`")  # noqa: E501
        # verify the required parameter 'version' is set
        if self.api_client.client_side_validation and ('version' not in params or
                                                       params['version'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `version` when calling `delete_query_lambda_version`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace' in params:
            path_params['workspace'] = params['workspace']  # noqa: E501
        if 'query_lambda' in params:
            path_params['queryLambda'] = params['query_lambda']  # noqa: E501
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/orgs/self/ws/{workspace}/lambdas/{queryLambda}/version/{version}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='QueryLambdaVersionResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def execute_query_lambda(self, workspace, query_lambda, version, **kwargs):  # noqa: E501
        """Execute Query Lambda By Version  # noqa: E501

        Execute a particular version of a Query Lambda.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.execute_query_lambda(workspace, query_lambda, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: name of the workspace (required)
        :param str query_lambda: name of the Query Lambda (required)
        :param str version: version (required)
        :param ExecuteQueryLambdaRequest body: JSON object
        :return: QueryResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.execute_query_lambda_with_http_info(workspace, query_lambda, version, **kwargs)  # noqa: E501
        else:
            (data) = self.execute_query_lambda_with_http_info(workspace, query_lambda, version, **kwargs)  # noqa: E501
            return data

    def execute_query_lambda_with_http_info(self, workspace, query_lambda, version, **kwargs):  # noqa: E501
        """Execute Query Lambda By Version  # noqa: E501

        Execute a particular version of a Query Lambda.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.execute_query_lambda_with_http_info(workspace, query_lambda, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: name of the workspace (required)
        :param str query_lambda: name of the Query Lambda (required)
        :param str version: version (required)
        :param ExecuteQueryLambdaRequest body: JSON object
        :return: QueryResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace', 'query_lambda', 'version', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method execute_query_lambda" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace' is set
        if self.api_client.client_side_validation and ('workspace' not in params or
                                                       params['workspace'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `workspace` when calling `execute_query_lambda`")  # noqa: E501
        # verify the required parameter 'query_lambda' is set
        if self.api_client.client_side_validation and ('query_lambda' not in params or
                                                       params['query_lambda'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `query_lambda` when calling `execute_query_lambda`")  # noqa: E501
        # verify the required parameter 'version' is set
        if self.api_client.client_side_validation and ('version' not in params or
                                                       params['version'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `version` when calling `execute_query_lambda`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace' in params:
            path_params['workspace'] = params['workspace']  # noqa: E501
        if 'query_lambda' in params:
            path_params['queryLambda'] = params['query_lambda']  # noqa: E501
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/orgs/self/ws/{workspace}/lambdas/{queryLambda}/versions/{version}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='QueryResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def execute_query_lambda_by_tag(self, workspace, query_lambda, tag, **kwargs):  # noqa: E501
        """Execute Query Lambda By Tag  # noqa: E501

        Execute the Query Lambda version associated with a given tag.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.execute_query_lambda_by_tag(workspace, query_lambda, tag, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: name of the workspace (required)
        :param str query_lambda: name of the Query Lambda (required)
        :param str tag: tag (required)
        :param ExecuteQueryLambdaRequest body: JSON object
        :return: QueryResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.execute_query_lambda_by_tag_with_http_info(workspace, query_lambda, tag, **kwargs)  # noqa: E501
        else:
            (data) = self.execute_query_lambda_by_tag_with_http_info(workspace, query_lambda, tag, **kwargs)  # noqa: E501
            return data

    def execute_query_lambda_by_tag_with_http_info(self, workspace, query_lambda, tag, **kwargs):  # noqa: E501
        """Execute Query Lambda By Tag  # noqa: E501

        Execute the Query Lambda version associated with a given tag.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.execute_query_lambda_by_tag_with_http_info(workspace, query_lambda, tag, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: name of the workspace (required)
        :param str query_lambda: name of the Query Lambda (required)
        :param str tag: tag (required)
        :param ExecuteQueryLambdaRequest body: JSON object
        :return: QueryResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace', 'query_lambda', 'tag', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method execute_query_lambda_by_tag" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace' is set
        if self.api_client.client_side_validation and ('workspace' not in params or
                                                       params['workspace'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `workspace` when calling `execute_query_lambda_by_tag`")  # noqa: E501
        # verify the required parameter 'query_lambda' is set
        if self.api_client.client_side_validation and ('query_lambda' not in params or
                                                       params['query_lambda'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `query_lambda` when calling `execute_query_lambda_by_tag`")  # noqa: E501
        # verify the required parameter 'tag' is set
        if self.api_client.client_side_validation and ('tag' not in params or
                                                       params['tag'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `tag` when calling `execute_query_lambda_by_tag`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace' in params:
            path_params['workspace'] = params['workspace']  # noqa: E501
        if 'query_lambda' in params:
            path_params['queryLambda'] = params['query_lambda']  # noqa: E501
        if 'tag' in params:
            path_params['tag'] = params['tag']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/orgs/self/ws/{workspace}/lambdas/{queryLambda}/tags/{tag}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='QueryResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_query_lambda_tag_version(self, workspace, query_lambda, tag, **kwargs):  # noqa: E501
        """Retrieve Query Lambda Tag  # noqa: E501

        Retrieve the Query Lambda version associated with a given tag.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_query_lambda_tag_version(workspace, query_lambda, tag, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: name of the workspace (required)
        :param str query_lambda: name of the Query Lambda (required)
        :param str tag: name of the tag (required)
        :return: QueryLambdaTagResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_query_lambda_tag_version_with_http_info(workspace, query_lambda, tag, **kwargs)  # noqa: E501
        else:
            (data) = self.get_query_lambda_tag_version_with_http_info(workspace, query_lambda, tag, **kwargs)  # noqa: E501
            return data

    def get_query_lambda_tag_version_with_http_info(self, workspace, query_lambda, tag, **kwargs):  # noqa: E501
        """Retrieve Query Lambda Tag  # noqa: E501

        Retrieve the Query Lambda version associated with a given tag.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_query_lambda_tag_version_with_http_info(workspace, query_lambda, tag, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: name of the workspace (required)
        :param str query_lambda: name of the Query Lambda (required)
        :param str tag: name of the tag (required)
        :return: QueryLambdaTagResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace', 'query_lambda', 'tag']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_query_lambda_tag_version" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace' is set
        if self.api_client.client_side_validation and ('workspace' not in params or
                                                       params['workspace'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `workspace` when calling `get_query_lambda_tag_version`")  # noqa: E501
        # verify the required parameter 'query_lambda' is set
        if self.api_client.client_side_validation and ('query_lambda' not in params or
                                                       params['query_lambda'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `query_lambda` when calling `get_query_lambda_tag_version`")  # noqa: E501
        # verify the required parameter 'tag' is set
        if self.api_client.client_side_validation and ('tag' not in params or
                                                       params['tag'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `tag` when calling `get_query_lambda_tag_version`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace' in params:
            path_params['workspace'] = params['workspace']  # noqa: E501
        if 'query_lambda' in params:
            path_params['queryLambda'] = params['query_lambda']  # noqa: E501
        if 'tag' in params:
            path_params['tag'] = params['tag']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/orgs/self/ws/{workspace}/lambdas/{queryLambda}/tags/{tag}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='QueryLambdaTagResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_query_lambda_version(self, workspace, query_lambda, version, **kwargs):  # noqa: E501
        """Retrieve Query Lambda Version  # noqa: E501

        Retrieve details for a specified version of a Query Lambda.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_query_lambda_version(workspace, query_lambda, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: name of the workspace (required)
        :param str query_lambda: name of the Query Lambda (required)
        :param str version: version (required)
        :return: QueryLambdaVersionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_query_lambda_version_with_http_info(workspace, query_lambda, version, **kwargs)  # noqa: E501
        else:
            (data) = self.get_query_lambda_version_with_http_info(workspace, query_lambda, version, **kwargs)  # noqa: E501
            return data

    def get_query_lambda_version_with_http_info(self, workspace, query_lambda, version, **kwargs):  # noqa: E501
        """Retrieve Query Lambda Version  # noqa: E501

        Retrieve details for a specified version of a Query Lambda.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_query_lambda_version_with_http_info(workspace, query_lambda, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: name of the workspace (required)
        :param str query_lambda: name of the Query Lambda (required)
        :param str version: version (required)
        :return: QueryLambdaVersionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace', 'query_lambda', 'version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_query_lambda_version" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace' is set
        if self.api_client.client_side_validation and ('workspace' not in params or
                                                       params['workspace'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `workspace` when calling `get_query_lambda_version`")  # noqa: E501
        # verify the required parameter 'query_lambda' is set
        if self.api_client.client_side_validation and ('query_lambda' not in params or
                                                       params['query_lambda'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `query_lambda` when calling `get_query_lambda_version`")  # noqa: E501
        # verify the required parameter 'version' is set
        if self.api_client.client_side_validation and ('version' not in params or
                                                       params['version'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `version` when calling `get_query_lambda_version`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace' in params:
            path_params['workspace'] = params['workspace']  # noqa: E501
        if 'query_lambda' in params:
            path_params['queryLambda'] = params['query_lambda']  # noqa: E501
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/orgs/self/ws/{workspace}/lambdas/{queryLambda}/versions/{version}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='QueryLambdaVersionResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_all_query_lambdas(self, **kwargs):  # noqa: E501
        """List Query Lambdas  # noqa: E501

        List all Query Lambdas in an organization.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_all_query_lambdas(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: ListQueryLambdasResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_all_query_lambdas_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_all_query_lambdas_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_all_query_lambdas_with_http_info(self, **kwargs):  # noqa: E501
        """List Query Lambdas  # noqa: E501

        List all Query Lambdas in an organization.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_all_query_lambdas_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: ListQueryLambdasResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_all_query_lambdas" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/orgs/self/lambdas', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ListQueryLambdasResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_query_lambda_tags(self, workspace, query_lambda, **kwargs):  # noqa: E501
        """List Query Lambda Tags  # noqa: E501

        List all tags associated with a Query Lambda  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_query_lambda_tags(workspace, query_lambda, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: name of the workspace (required)
        :param str query_lambda: name of the Query Lambda (required)
        :return: ListQueryLambdaTagsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_query_lambda_tags_with_http_info(workspace, query_lambda, **kwargs)  # noqa: E501
        else:
            (data) = self.list_query_lambda_tags_with_http_info(workspace, query_lambda, **kwargs)  # noqa: E501
            return data

    def list_query_lambda_tags_with_http_info(self, workspace, query_lambda, **kwargs):  # noqa: E501
        """List Query Lambda Tags  # noqa: E501

        List all tags associated with a Query Lambda  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_query_lambda_tags_with_http_info(workspace, query_lambda, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: name of the workspace (required)
        :param str query_lambda: name of the Query Lambda (required)
        :return: ListQueryLambdaTagsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace', 'query_lambda']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_query_lambda_tags" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace' is set
        if self.api_client.client_side_validation and ('workspace' not in params or
                                                       params['workspace'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `workspace` when calling `list_query_lambda_tags`")  # noqa: E501
        # verify the required parameter 'query_lambda' is set
        if self.api_client.client_side_validation and ('query_lambda' not in params or
                                                       params['query_lambda'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `query_lambda` when calling `list_query_lambda_tags`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace' in params:
            path_params['workspace'] = params['workspace']  # noqa: E501
        if 'query_lambda' in params:
            path_params['queryLambda'] = params['query_lambda']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/orgs/self/ws/{workspace}/lambdas/{queryLambda}/tags', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ListQueryLambdaTagsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_query_lambda_versions(self, workspace, query_lambda, **kwargs):  # noqa: E501
        """List Query Lambda Versions  # noqa: E501

        List all versions of a Query Lambda.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_query_lambda_versions(workspace, query_lambda, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: name of the workspace (required)
        :param str query_lambda: name of the Query Lambda (required)
        :return: ListQueryLambdaVersionsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_query_lambda_versions_with_http_info(workspace, query_lambda, **kwargs)  # noqa: E501
        else:
            (data) = self.list_query_lambda_versions_with_http_info(workspace, query_lambda, **kwargs)  # noqa: E501
            return data

    def list_query_lambda_versions_with_http_info(self, workspace, query_lambda, **kwargs):  # noqa: E501
        """List Query Lambda Versions  # noqa: E501

        List all versions of a Query Lambda.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_query_lambda_versions_with_http_info(workspace, query_lambda, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: name of the workspace (required)
        :param str query_lambda: name of the Query Lambda (required)
        :return: ListQueryLambdaVersionsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace', 'query_lambda']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_query_lambda_versions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace' is set
        if self.api_client.client_side_validation and ('workspace' not in params or
                                                       params['workspace'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `workspace` when calling `list_query_lambda_versions`")  # noqa: E501
        # verify the required parameter 'query_lambda' is set
        if self.api_client.client_side_validation and ('query_lambda' not in params or
                                                       params['query_lambda'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `query_lambda` when calling `list_query_lambda_versions`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace' in params:
            path_params['workspace'] = params['workspace']  # noqa: E501
        if 'query_lambda' in params:
            path_params['queryLambda'] = params['query_lambda']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/orgs/self/ws/{workspace}/lambdas/{queryLambda}/versions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ListQueryLambdaVersionsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_query_lambdas_in_workspace(self, workspace, **kwargs):  # noqa: E501
        """List Query Lambdas in Workspace  # noqa: E501

        List all Query Lambdas under given workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_query_lambdas_in_workspace(workspace, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: name of the workspace (required)
        :return: ListQueryLambdasResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_query_lambdas_in_workspace_with_http_info(workspace, **kwargs)  # noqa: E501
        else:
            (data) = self.list_query_lambdas_in_workspace_with_http_info(workspace, **kwargs)  # noqa: E501
            return data

    def list_query_lambdas_in_workspace_with_http_info(self, workspace, **kwargs):  # noqa: E501
        """List Query Lambdas in Workspace  # noqa: E501

        List all Query Lambdas under given workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_query_lambdas_in_workspace_with_http_info(workspace, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: name of the workspace (required)
        :return: ListQueryLambdasResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_query_lambdas_in_workspace" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace' is set
        if self.api_client.client_side_validation and ('workspace' not in params or
                                                       params['workspace'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `workspace` when calling `list_query_lambdas_in_workspace`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace' in params:
            path_params['workspace'] = params['workspace']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/orgs/self/ws/{workspace}/lambdas', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ListQueryLambdasResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_query_lambda(self, workspace, query_lambda, body, **kwargs):  # noqa: E501
        """Update Query Lambda  # noqa: E501

        Create a new version of a Query Lambda in given workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_query_lambda(workspace, query_lambda, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: name of the workspace (required)
        :param str query_lambda: name of the Query Lambda (required)
        :param UpdateQueryLambdaRequest body: JSON object (required)
        :param bool create:
        :return: QueryLambdaVersionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_query_lambda_with_http_info(workspace, query_lambda, body, **kwargs)  # noqa: E501
        else:
            (data) = self.update_query_lambda_with_http_info(workspace, query_lambda, body, **kwargs)  # noqa: E501
            return data

    def update_query_lambda_with_http_info(self, workspace, query_lambda, body, **kwargs):  # noqa: E501
        """Update Query Lambda  # noqa: E501

        Create a new version of a Query Lambda in given workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_query_lambda_with_http_info(workspace, query_lambda, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: name of the workspace (required)
        :param str query_lambda: name of the Query Lambda (required)
        :param UpdateQueryLambdaRequest body: JSON object (required)
        :param bool create:
        :return: QueryLambdaVersionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace', 'query_lambda', 'body', 'create']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_query_lambda" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace' is set
        if self.api_client.client_side_validation and ('workspace' not in params or
                                                       params['workspace'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `workspace` when calling `update_query_lambda`")  # noqa: E501
        # verify the required parameter 'query_lambda' is set
        if self.api_client.client_side_validation and ('query_lambda' not in params or
                                                       params['query_lambda'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `query_lambda` when calling `update_query_lambda`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `update_query_lambda`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace' in params:
            path_params['workspace'] = params['workspace']  # noqa: E501
        if 'query_lambda' in params:
            path_params['queryLambda'] = params['query_lambda']  # noqa: E501

        query_params = []
        if 'create' in params:
            query_params.append(('create', params['create']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/orgs/self/ws/{workspace}/lambdas/{queryLambda}/versions', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='QueryLambdaVersionResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
