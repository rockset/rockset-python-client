# coding: utf-8

"""
    REST API

    Rockset's REST API allows for creating and managing all resources in Rockset. Each supported endpoint is documented below.  All requests must be authorized with a Rockset API key, which can be created in the [Rockset console](https://console.rockset.com). The API key must be provided as `ApiKey <api_key>` in the `Authorization` request header. For example: ``` Authorization: ApiKey aB35kDjg93J5nsf4GjwMeErAVd832F7ad4vhsW1S02kfZiab42sTsfW5Sxt25asT ```  All endpoints are only accessible via https.  Build something awesome!  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class CollectionsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_collection(self, workspace, body, **kwargs):  # noqa: E501
        """Create Collection  # noqa: E501

        Create new collection in a workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_collection(workspace, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: name of the workspace (required)
        :param CreateCollectionRequest body: JSON object (required)
        :return: CreateCollectionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_collection_with_http_info(workspace, body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_collection_with_http_info(workspace, body, **kwargs)  # noqa: E501
            return data

    def create_collection_with_http_info(self, workspace, body, **kwargs):  # noqa: E501
        """Create Collection  # noqa: E501

        Create new collection in a workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_collection_with_http_info(workspace, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: name of the workspace (required)
        :param CreateCollectionRequest body: JSON object (required)
        :return: CreateCollectionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_collection" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace' is set
        if self.api_client.client_side_validation and ('workspace' not in params or
                                                       params['workspace'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `workspace` when calling `create_collection`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `create_collection`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace' in params:
            path_params['workspace'] = params['workspace']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/orgs/self/ws/{workspace}/collections', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CreateCollectionResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_collection(self, workspace, collection, **kwargs):  # noqa: E501
        """Delete Collection  # noqa: E501

        Delete a collection and all its documents from Rockset.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_collection(workspace, collection, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: name of the workspace (required)
        :param str collection: name of the collection (required)
        :return: DeleteCollectionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_collection_with_http_info(workspace, collection, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_collection_with_http_info(workspace, collection, **kwargs)  # noqa: E501
            return data

    def delete_collection_with_http_info(self, workspace, collection, **kwargs):  # noqa: E501
        """Delete Collection  # noqa: E501

        Delete a collection and all its documents from Rockset.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_collection_with_http_info(workspace, collection, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: name of the workspace (required)
        :param str collection: name of the collection (required)
        :return: DeleteCollectionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace', 'collection']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_collection" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace' is set
        if self.api_client.client_side_validation and ('workspace' not in params or
                                                       params['workspace'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `workspace` when calling `delete_collection`")  # noqa: E501
        # verify the required parameter 'collection' is set
        if self.api_client.client_side_validation and ('collection' not in params or
                                                       params['collection'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `collection` when calling `delete_collection`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace' in params:
            path_params['workspace'] = params['workspace']  # noqa: E501
        if 'collection' in params:
            path_params['collection'] = params['collection']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/orgs/self/ws/{workspace}/collections/{collection}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeleteCollectionResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_collection(self, workspace, collection, **kwargs):  # noqa: E501
        """Retrieve Collection  # noqa: E501

        Get details about a collection.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_collection(workspace, collection, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: name of the workspace (required)
        :param str collection: name of the collection (required)
        :return: GetCollectionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_collection_with_http_info(workspace, collection, **kwargs)  # noqa: E501
        else:
            (data) = self.get_collection_with_http_info(workspace, collection, **kwargs)  # noqa: E501
            return data

    def get_collection_with_http_info(self, workspace, collection, **kwargs):  # noqa: E501
        """Retrieve Collection  # noqa: E501

        Get details about a collection.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_collection_with_http_info(workspace, collection, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: name of the workspace (required)
        :param str collection: name of the collection (required)
        :return: GetCollectionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace', 'collection']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_collection" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace' is set
        if self.api_client.client_side_validation and ('workspace' not in params or
                                                       params['workspace'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `workspace` when calling `get_collection`")  # noqa: E501
        # verify the required parameter 'collection' is set
        if self.api_client.client_side_validation and ('collection' not in params or
                                                       params['collection'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `collection` when calling `get_collection`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace' in params:
            path_params['workspace'] = params['workspace']  # noqa: E501
        if 'collection' in params:
            path_params['collection'] = params['collection']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/orgs/self/ws/{workspace}/collections/{collection}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetCollectionResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_collections(self, **kwargs):  # noqa: E501
        """List Collections  # noqa: E501

        Retrieve all collections in an organization.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_collections(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: ListCollectionsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_collections_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_collections_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_collections_with_http_info(self, **kwargs):  # noqa: E501
        """List Collections  # noqa: E501

        Retrieve all collections in an organization.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_collections_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: ListCollectionsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_collections" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/orgs/self/collections', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ListCollectionsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def workspace_collections(self, workspace, **kwargs):  # noqa: E501
        """List Collections in Workspace  # noqa: E501

        Retrieve all collections in a workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workspace_collections(workspace, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: name of the workspace (required)
        :return: ListCollectionsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.workspace_collections_with_http_info(workspace, **kwargs)  # noqa: E501
        else:
            (data) = self.workspace_collections_with_http_info(workspace, **kwargs)  # noqa: E501
            return data

    def workspace_collections_with_http_info(self, workspace, **kwargs):  # noqa: E501
        """List Collections in Workspace  # noqa: E501

        Retrieve all collections in a workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workspace_collections_with_http_info(workspace, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: name of the workspace (required)
        :return: ListCollectionsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method workspace_collections" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace' is set
        if self.api_client.client_side_validation and ('workspace' not in params or
                                                       params['workspace'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `workspace` when calling `workspace_collections`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace' in params:
            path_params['workspace'] = params['workspace']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/orgs/self/ws/{workspace}/collections', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ListCollectionsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
