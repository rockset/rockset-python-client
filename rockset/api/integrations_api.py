"""
    REST API

    Rockset's REST API allows for creating and managing all resources in Rockset. Each supported endpoint is documented below.  All requests must be authorized with a Rockset API key, which can be created in the [Rockset console](https://console.rockset.com). The API key must be provided as `ApiKey <api_key>` in the `Authorization` request header. For example: ``` Authorization: ApiKey aB35kDjg93J5nsf4GjwMeErAVd832F7ad4vhsW1S02kfZiab42sTsfW5Sxt25asT ```  All endpoints are only accessible via https.  Build something awesome!  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401
import typing  # noqa: F401

import asyncio

from rockset.api_client import ApiClient, Endpoint as _Endpoint
from rockset.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from rockset.model.azure_blob_storage_integration_creation_request import AzureBlobStorageIntegrationCreationRequest
from rockset.model.azure_event_hubs_integration_creation_request import AzureEventHubsIntegrationCreationRequest
from rockset.model.create_integration_response import CreateIntegrationResponse
from rockset.model.delete_integration_response import DeleteIntegrationResponse
from rockset.model.dynamodb_integration_creation_request import DynamodbIntegrationCreationRequest
from rockset.model.error_model import ErrorModel
from rockset.model.gcs_integration_creation_request import GcsIntegrationCreationRequest
from rockset.model.get_integration_response import GetIntegrationResponse
from rockset.model.kafka_integration_creation_request import KafkaIntegrationCreationRequest
from rockset.model.kinesis_integration_creation_request import KinesisIntegrationCreationRequest
from rockset.model.list_integrations_response import ListIntegrationsResponse
from rockset.model.mongodb_integration_creation_request import MongodbIntegrationCreationRequest
from rockset.model.s3_integration_creation_request import S3IntegrationCreationRequest
from rockset.model.snowflake_integration_creation_request import SnowflakeIntegrationCreationRequest
from rockset.models import *


class Integrations(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.create_azure_blob_storage_integration_endpoint = _Endpoint(
            settings={
                'response_type': (CreateIntegrationResponse,),
                'auth': [
                    'apikey'
                ],
                'endpoint_path': '/v1/orgs/self/integrations',
                'operation_id': 'create_azure_blob_storage_integration',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'azure_blob_storage_integration_creation_request',
                ],
                'required': [
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'azure_blob_storage_integration_creation_request':
                        (AzureBlobStorageIntegrationCreationRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'azure_blob_storage_integration_creation_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.create_azure_event_hubs_integration_endpoint = _Endpoint(
            settings={
                'response_type': (CreateIntegrationResponse,),
                'auth': [
                    'apikey'
                ],
                'endpoint_path': '/v1/orgs/self/integrations',
                'operation_id': 'create_azure_event_hubs_integration',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'azure_event_hubs_integration_creation_request',
                ],
                'required': [
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'azure_event_hubs_integration_creation_request':
                        (AzureEventHubsIntegrationCreationRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'azure_event_hubs_integration_creation_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.create_dynamodb_integration_endpoint = _Endpoint(
            settings={
                'response_type': (CreateIntegrationResponse,),
                'auth': [
                    'apikey'
                ],
                'endpoint_path': '/v1/orgs/self/integrations',
                'operation_id': 'create_dynamodb_integration',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'dynamodb_integration_creation_request',
                ],
                'required': [
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'dynamodb_integration_creation_request':
                        (DynamodbIntegrationCreationRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'dynamodb_integration_creation_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.create_gcs_integration_endpoint = _Endpoint(
            settings={
                'response_type': (CreateIntegrationResponse,),
                'auth': [
                    'apikey'
                ],
                'endpoint_path': '/v1/orgs/self/integrations',
                'operation_id': 'create_gcs_integration',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'gcs_integration_creation_request',
                ],
                'required': [
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'gcs_integration_creation_request':
                        (GcsIntegrationCreationRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'gcs_integration_creation_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.create_kafka_integration_endpoint = _Endpoint(
            settings={
                'response_type': (CreateIntegrationResponse,),
                'auth': [
                    'apikey'
                ],
                'endpoint_path': '/v1/orgs/self/integrations',
                'operation_id': 'create_kafka_integration',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'kafka_integration_creation_request',
                ],
                'required': [
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'kafka_integration_creation_request':
                        (KafkaIntegrationCreationRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'kafka_integration_creation_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.create_kinesis_integration_endpoint = _Endpoint(
            settings={
                'response_type': (CreateIntegrationResponse,),
                'auth': [
                    'apikey'
                ],
                'endpoint_path': '/v1/orgs/self/integrations',
                'operation_id': 'create_kinesis_integration',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'kinesis_integration_creation_request',
                ],
                'required': [
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'kinesis_integration_creation_request':
                        (KinesisIntegrationCreationRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'kinesis_integration_creation_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.create_mongodb_integration_endpoint = _Endpoint(
            settings={
                'response_type': (CreateIntegrationResponse,),
                'auth': [
                    'apikey'
                ],
                'endpoint_path': '/v1/orgs/self/integrations',
                'operation_id': 'create_mongodb_integration',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'mongodb_integration_creation_request',
                ],
                'required': [
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'mongodb_integration_creation_request':
                        (MongodbIntegrationCreationRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'mongodb_integration_creation_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.create_s3_integration_endpoint = _Endpoint(
            settings={
                'response_type': (CreateIntegrationResponse,),
                'auth': [
                    'apikey'
                ],
                'endpoint_path': '/v1/orgs/self/integrations',
                'operation_id': 'create_s3_integration',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    's3_integration_creation_request',
                ],
                'required': [
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    's3_integration_creation_request':
                        (S3IntegrationCreationRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    's3_integration_creation_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.create_snowflake_integration_endpoint = _Endpoint(
            settings={
                'response_type': (CreateIntegrationResponse,),
                'auth': [
                    'apikey'
                ],
                'endpoint_path': '/v1/orgs/self/integrations',
                'operation_id': 'create_snowflake_integration',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'snowflake_integration_creation_request',
                ],
                'required': [
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'snowflake_integration_creation_request':
                        (SnowflakeIntegrationCreationRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'snowflake_integration_creation_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.delete_endpoint = _Endpoint(
            settings={
                'response_type': (DeleteIntegrationResponse,),
                'auth': [
                    'apikey'
                ],
                'endpoint_path': '/v1/orgs/self/integrations/{integration}',
                'operation_id': 'delete',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'integration',
                ],
                'required': [
                    'integration',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'integration':
                        (str,),
                },
                'attribute_map': {
                    'integration': 'integration',
                },
                'location_map': {
                    'integration': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_endpoint = _Endpoint(
            settings={
                'response_type': (GetIntegrationResponse,),
                'auth': [
                    'apikey'
                ],
                'endpoint_path': '/v1/orgs/self/integrations/{integration}',
                'operation_id': 'get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'integration',
                ],
                'required': [
                    'integration',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'integration':
                        (str,),
                },
                'attribute_map': {
                    'integration': 'integration',
                },
                'location_map': {
                    'integration': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.list_endpoint = _Endpoint(
            settings={
                'response_type': (ListIntegrationsResponse,),
                'auth': [
                    'apikey'
                ],
                'endpoint_path': '/v1/orgs/self/integrations',
                'operation_id': 'list',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                },
                'attribute_map': {
                },
                'location_map': {
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )

    def create_azure_blob_storage_integration(
        self,
        *,
        name: str,
        azure_blob_storage: AzureBlobStorageIntegration = None,
        description: str = None,
        **kwargs
    ) -> typing.Union[CreateIntegrationResponse, asyncio.Future]:
        """Create azure blob storage integration  # noqa: E501

        Create a new integration.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        ```python
        rs = RocksetClient(api_key=APIKEY)
        future = rs.Integrations.create_azure_blob_storage_integration(
            azure_blob_storage=AzureBlobStorageIntegration(
                connection_string='''BlobEndpoint=https://<NamespaceName>.blob.core.windows.net;
        SharedAccessSignature=<KeyValue>''',
            ),
            description="AWS account with event data for the data science team.",
            name="event-logs",
            async_req=True,
        )
        result = await future
        ```

        Keyword Args:
            azure_blob_storage (AzureBlobStorageIntegration): [optional]
            description (str): Longer explanation for the integration.. [optional]
            name (str): Descriptive label.. [required]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done on the data received from the server.
                If False, the client will also not convert nested inner objects
                into the respective model types (the outermost object
                is still converted to the model).
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            CreateIntegrationResponse
                If the method is called asynchronously, returns an asyncio.Future which resolves to the response.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['azure_blob_storage_integration_creation_request'] = \
            kwargs['azure_blob_storage_integration_creation_request']
        return self.create_azure_blob_storage_integration_endpoint.call_with_http_info(**kwargs)

    def create_azure_event_hubs_integration(
        self,
        *,
        name: str,
        azure_event_hubs: AzureEventHubsIntegration = None,
        description: str = None,
        **kwargs
    ) -> typing.Union[CreateIntegrationResponse, asyncio.Future]:
        """Create azure event hubs integration  # noqa: E501

        Create a new integration.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        ```python
        rs = RocksetClient(api_key=APIKEY)
        future = rs.Integrations.create_azure_event_hubs_integration(
            azure_event_hubs=AzureEventHubsIntegration(
                connection_string="Endpoint=sb://<NamespaceName>.servicebus.windows.net/;SharedAccessKeyName=<KeyName>;SharedAccessKey=<KeyValue>",
            ),
            description="AWS account with event data for the data science team.",
            name="event-logs",
            async_req=True,
        )
        result = await future
        ```

        Keyword Args:
            azure_event_hubs (AzureEventHubsIntegration): [optional]
            description (str): Longer explanation for the integration.. [optional]
            name (str): Descriptive label.. [required]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done on the data received from the server.
                If False, the client will also not convert nested inner objects
                into the respective model types (the outermost object
                is still converted to the model).
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            CreateIntegrationResponse
                If the method is called asynchronously, returns an asyncio.Future which resolves to the response.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['azure_event_hubs_integration_creation_request'] = \
            kwargs['azure_event_hubs_integration_creation_request']
        return self.create_azure_event_hubs_integration_endpoint.call_with_http_info(**kwargs)

    def create_dynamodb_integration(
        self,
        *,
        name: str,
        description: str = None,
        dynamodb: DynamodbIntegration = None,
        **kwargs
    ) -> typing.Union[CreateIntegrationResponse, asyncio.Future]:
        """Create dynamodb integration  # noqa: E501

        Create a new integration.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        ```python
        rs = RocksetClient(api_key=APIKEY)
        future = rs.Integrations.create_dynamodb_integration(
            description="AWS account with event data for the data science team.",
            dynamodb=DynamodbIntegration(
                aws_access_key=AwsAccessKey(
                    aws_access_key_id="AKIAIOSFODNN7EXAMPLE",
                    aws_secret_access_key="wJal....",
                ),
                aws_role=AwsRole(
                    aws_external_id="external id of aws",
                    aws_role_arn="arn:aws:iam::2378964092:role/rockset-role",
                ),
                s3_export_bucket_name="s3_export_bucket_name_example",
            ),
            name="event-logs",
            async_req=True,
        )
        result = await future
        ```

        Keyword Args:
            description (str): Longer explanation for the integration.. [optional]
            dynamodb (DynamodbIntegration): [optional]
            name (str): Descriptive label.. [required]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done on the data received from the server.
                If False, the client will also not convert nested inner objects
                into the respective model types (the outermost object
                is still converted to the model).
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            CreateIntegrationResponse
                If the method is called asynchronously, returns an asyncio.Future which resolves to the response.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['dynamodb_integration_creation_request'] = \
            kwargs['dynamodb_integration_creation_request']
        return self.create_dynamodb_integration_endpoint.call_with_http_info(**kwargs)

    def create_gcs_integration(
        self,
        *,
        name: str,
        description: str = None,
        gcs: GcsIntegration = None,
        **kwargs
    ) -> typing.Union[CreateIntegrationResponse, asyncio.Future]:
        """Create gcs integration  # noqa: E501

        Create a new integration.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        ```python
        rs = RocksetClient(api_key=APIKEY)
        future = rs.Integrations.create_gcs_integration(
            description="AWS account with event data for the data science team.",
            gcs=GcsIntegration(
                gcp_service_account=GcpServiceAccount(
                    service_account_key_file_json="service_account_key_file_json_example",
                ),
            ),
            name="event-logs",
            async_req=True,
        )
        result = await future
        ```

        Keyword Args:
            description (str): Longer explanation for the integration.. [optional]
            gcs (GcsIntegration): [optional]
            name (str): Descriptive label.. [required]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done on the data received from the server.
                If False, the client will also not convert nested inner objects
                into the respective model types (the outermost object
                is still converted to the model).
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            CreateIntegrationResponse
                If the method is called asynchronously, returns an asyncio.Future which resolves to the response.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['gcs_integration_creation_request'] = \
            kwargs['gcs_integration_creation_request']
        return self.create_gcs_integration_endpoint.call_with_http_info(**kwargs)

    def create_kafka_integration(
        self,
        *,
        name: str,
        description: str = None,
        kafka: KafkaIntegration = None,
        **kwargs
    ) -> typing.Union[CreateIntegrationResponse, asyncio.Future]:
        """Create kafka integration  # noqa: E501

        Create a new integration.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        ```python
        rs = RocksetClient(api_key=APIKEY)
        future = rs.Integrations.create_kafka_integration(
            description="AWS account with event data for the data science team.",
            kafka=KafkaIntegration(
                aws_role=AwsRole(
                    aws_external_id="external id of aws",
                    aws_role_arn="arn:aws:iam::2378964092:role/rockset-role",
                ),
                bootstrap_servers="localhost:9092",
                connection_string="connection_string_example",
                kafka_data_format="JSON",
                kafka_topic_names=[
                    "kafka_topic_names_example",
                ],
                schema_registry_config=SchemaRegistryConfig(
                    key="key_example",
                    secret="secret_example",
                    url="url_example",
                ),
                security_config=KafkaV3SecurityConfig(
                    api_key="api_key_example",
                    secret="secret_example",
                ),
                use_v3=True,
            ),
            name="event-logs",
            async_req=True,
        )
        result = await future
        ```

        Keyword Args:
            description (str): Longer explanation for the integration.. [optional]
            kafka (KafkaIntegration): [optional]
            name (str): Descriptive label.. [required]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done on the data received from the server.
                If False, the client will also not convert nested inner objects
                into the respective model types (the outermost object
                is still converted to the model).
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            CreateIntegrationResponse
                If the method is called asynchronously, returns an asyncio.Future which resolves to the response.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['kafka_integration_creation_request'] = \
            kwargs['kafka_integration_creation_request']
        return self.create_kafka_integration_endpoint.call_with_http_info(**kwargs)

    def create_kinesis_integration(
        self,
        *,
        name: str,
        description: str = None,
        kinesis: KinesisIntegration = None,
        **kwargs
    ) -> typing.Union[CreateIntegrationResponse, asyncio.Future]:
        """Create kinesis integration  # noqa: E501

        Create a new integration.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        ```python
        rs = RocksetClient(api_key=APIKEY)
        future = rs.Integrations.create_kinesis_integration(
            description="AWS account with event data for the data science team.",
            kinesis=KinesisIntegration(
                aws_access_key=AwsAccessKey(
                    aws_access_key_id="AKIAIOSFODNN7EXAMPLE",
                    aws_secret_access_key="wJal....",
                ),
                aws_role=AwsRole(
                    aws_external_id="external id of aws",
                    aws_role_arn="arn:aws:iam::2378964092:role/rockset-role",
                ),
            ),
            name="event-logs",
            async_req=True,
        )
        result = await future
        ```

        Keyword Args:
            description (str): Longer explanation for the integration.. [optional]
            kinesis (KinesisIntegration): [optional]
            name (str): Descriptive label.. [required]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done on the data received from the server.
                If False, the client will also not convert nested inner objects
                into the respective model types (the outermost object
                is still converted to the model).
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            CreateIntegrationResponse
                If the method is called asynchronously, returns an asyncio.Future which resolves to the response.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['kinesis_integration_creation_request'] = \
            kwargs['kinesis_integration_creation_request']
        return self.create_kinesis_integration_endpoint.call_with_http_info(**kwargs)

    def create_mongodb_integration(
        self,
        *,
        name: str,
        description: str = None,
        mongodb: MongoDbIntegration = None,
        **kwargs
    ) -> typing.Union[CreateIntegrationResponse, asyncio.Future]:
        """Create mongodb integration  # noqa: E501

        Create a new integration.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        ```python
        rs = RocksetClient(api_key=APIKEY)
        future = rs.Integrations.create_mongodb_integration(
            description="AWS account with event data for the data science team.",
            mongodb=MongoDbIntegration(
                connection_uri="mongodb+srv://<username>:<password>@server.example.com/",
            ),
            name="event-logs",
            async_req=True,
        )
        result = await future
        ```

        Keyword Args:
            description (str): Longer explanation for the integration.. [optional]
            mongodb (MongoDbIntegration): [optional]
            name (str): Descriptive label.. [required]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done on the data received from the server.
                If False, the client will also not convert nested inner objects
                into the respective model types (the outermost object
                is still converted to the model).
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            CreateIntegrationResponse
                If the method is called asynchronously, returns an asyncio.Future which resolves to the response.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['mongodb_integration_creation_request'] = \
            kwargs['mongodb_integration_creation_request']
        return self.create_mongodb_integration_endpoint.call_with_http_info(**kwargs)

    def create_s3_integration(
        self,
        *,
        name: str,
        description: str = None,
        s3: S3Integration = None,
        **kwargs
    ) -> typing.Union[CreateIntegrationResponse, asyncio.Future]:
        """Create s3 integration  # noqa: E501

        Create a new integration.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        ```python
        rs = RocksetClient(api_key=APIKEY)
        future = rs.Integrations.create_s3_integration(
            description="AWS account with event data for the data science team.",
            name="event-logs",
            s3=S3Integration(
                aws_access_key=AwsAccessKey(
                    aws_access_key_id="AKIAIOSFODNN7EXAMPLE",
                    aws_secret_access_key="wJal....",
                ),
                aws_role=AwsRole(
                    aws_external_id="external id of aws",
                    aws_role_arn="arn:aws:iam::2378964092:role/rockset-role",
                ),
            ),
            async_req=True,
        )
        result = await future
        ```

        Keyword Args:
            description (str): Longer explanation for the integration.. [optional]
            name (str): Descriptive label.. [required]
            s3 (S3Integration): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done on the data received from the server.
                If False, the client will also not convert nested inner objects
                into the respective model types (the outermost object
                is still converted to the model).
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            CreateIntegrationResponse
                If the method is called asynchronously, returns an asyncio.Future which resolves to the response.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['s3_integration_creation_request'] = \
            kwargs['s3_integration_creation_request']
        return self.create_s3_integration_endpoint.call_with_http_info(**kwargs)

    def create_snowflake_integration(
        self,
        *,
        name: str,
        description: str = None,
        snowflake: SnowflakeIntegration = None,
        **kwargs
    ) -> typing.Union[CreateIntegrationResponse, asyncio.Future]:
        """Create snowflake integration  # noqa: E501

        Create a new integration.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        ```python
        rs = RocksetClient(api_key=APIKEY)
        future = rs.Integrations.create_snowflake_integration(
            description="AWS account with event data for the data science team.",
            name="event-logs",
            snowflake=SnowflakeIntegration(
                aws_access_key=AwsAccessKey(
                    aws_access_key_id="AKIAIOSFODNN7EXAMPLE",
                    aws_secret_access_key="wJal....",
                ),
                aws_role=AwsRole(
                    aws_external_id="external id of aws",
                    aws_role_arn="arn:aws:iam::2378964092:role/rockset-role",
                ),
                default_warehouse="default_warehouse_example",
                password="password_example",
                s3_export_path="s3://bucket/prefix",
                snowflake_url="acme-marketing-test-account.snowflakecomputing.com",
                user_role="user_role_example",
                username="username_example",
            ),
            async_req=True,
        )
        result = await future
        ```

        Keyword Args:
            description (str): Longer explanation for the integration.. [optional]
            name (str): Descriptive label.. [required]
            snowflake (SnowflakeIntegration): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done on the data received from the server.
                If False, the client will also not convert nested inner objects
                into the respective model types (the outermost object
                is still converted to the model).
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            CreateIntegrationResponse
                If the method is called asynchronously, returns an asyncio.Future which resolves to the response.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['snowflake_integration_creation_request'] = \
            kwargs['snowflake_integration_creation_request']
        return self.create_snowflake_integration_endpoint.call_with_http_info(**kwargs)

    def delete(
        self,
        *,
        integration: str,
        **kwargs
    ) -> typing.Union[DeleteIntegrationResponse, asyncio.Future]:
        """Delete Integration  # noqa: E501

        Remove an integration.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        ```python
        rs = RocksetClient(api_key=APIKEY)
        future = rs.Integrations.delete(
            integration="integration_example",
            async_req=True,
        )
        result = await future
        ```

        Keyword Args:
            integration (str): name of the integration. [required]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done on the data received from the server.
                If False, the client will also not convert nested inner objects
                into the respective model types (the outermost object
                is still converted to the model).
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            DeleteIntegrationResponse
                If the method is called asynchronously, returns an asyncio.Future which resolves to the response.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['integration'] = \
            integration
        return self.delete_endpoint.call_with_http_info(**kwargs)

    def get(
        self,
        *,
        integration: str,
        **kwargs
    ) -> typing.Union[GetIntegrationResponse, asyncio.Future]:
        """Retrieve Integration  # noqa: E501

        Retrieve information about a single integration.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        ```python
        rs = RocksetClient(api_key=APIKEY)
        future = rs.Integrations.get(
            integration="integration_example",
            async_req=True,
        )
        result = await future
        ```

        Keyword Args:
            integration (str): name of the integration. [required]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done on the data received from the server.
                If False, the client will also not convert nested inner objects
                into the respective model types (the outermost object
                is still converted to the model).
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            GetIntegrationResponse
                If the method is called asynchronously, returns an asyncio.Future which resolves to the response.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['integration'] = \
            integration
        return self.get_endpoint.call_with_http_info(**kwargs)

    def list(
        self,
        **kwargs
    ) -> typing.Union[ListIntegrationsResponse, asyncio.Future]:
        """List Integrations  # noqa: E501

        List all integrations in an organization.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        ```python
        rs = RocksetClient(api_key=APIKEY)
        future = rs.Integrations.list(
            async_req=True,
        )
        result = await future
        ```

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done on the data received from the server.
                If False, the client will also not convert nested inner objects
                into the respective model types (the outermost object
                is still converted to the model).
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            ListIntegrationsResponse
                If the method is called asynchronously, returns an asyncio.Future which resolves to the response.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        return self.list_endpoint.call_with_http_info(**kwargs)


    body_params_dict = dict()
    return_types_dict = dict()
    body_params_dict['create_azure_blob_storage_integration'] = 'azure_blob_storage_integration_creation_request'
    return_types_dict['create_azure_blob_storage_integration'] = AzureBlobStorageIntegrationCreationRequest
    body_params_dict['create_azure_event_hubs_integration'] = 'azure_event_hubs_integration_creation_request'
    return_types_dict['create_azure_event_hubs_integration'] = AzureEventHubsIntegrationCreationRequest
    body_params_dict['create_dynamodb_integration'] = 'dynamodb_integration_creation_request'
    return_types_dict['create_dynamodb_integration'] = DynamodbIntegrationCreationRequest
    body_params_dict['create_gcs_integration'] = 'gcs_integration_creation_request'
    return_types_dict['create_gcs_integration'] = GcsIntegrationCreationRequest
    body_params_dict['create_kafka_integration'] = 'kafka_integration_creation_request'
    return_types_dict['create_kafka_integration'] = KafkaIntegrationCreationRequest
    body_params_dict['create_kinesis_integration'] = 'kinesis_integration_creation_request'
    return_types_dict['create_kinesis_integration'] = KinesisIntegrationCreationRequest
    body_params_dict['create_mongodb_integration'] = 'mongodb_integration_creation_request'
    return_types_dict['create_mongodb_integration'] = MongodbIntegrationCreationRequest
    body_params_dict['create_s3_integration'] = 's3_integration_creation_request'
    return_types_dict['create_s3_integration'] = S3IntegrationCreationRequest
    body_params_dict['create_snowflake_integration'] = 'snowflake_integration_creation_request'
    return_types_dict['create_snowflake_integration'] = SnowflakeIntegrationCreationRequest
