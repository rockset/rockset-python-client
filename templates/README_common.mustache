```python
import {{{packageName}}}
{{#apiInfo}}
{{#apis}}
{{#-first}}
{{#operations}}
{{#operation}}
{{#-first}}

# Defining the host is optional and defaults to *{{basePath}}*
rs = {{{packageName}}}.RocksetClient(host=rockset.Regions.use1a1, api_key="APIKEY")
try:
    rs.APIKeys.create(name="api-key-name", role="member")
except {{{packageName}}}.ApiException as e:
    print("Exception when calling ApiKey->create_api_key: %s\n" % e)
{{/-first}}
{{/operation}}
{{/operations}}
{{/-first}}
{{/apis}}
{{/apiInfo}}
```

## Optional Models

When making requests, certain parameters will oftentimes be instances of classes (eg. rockset.models.QueryRequestSql). Since importing and instantiating these objects can be verbose, you always have the option of passing in a dictionary instead of a model.

## Queries

Queries can be made be either calling the regular client [**query method**](docs/Queries.md#query) or by using the convenience method (rs.sql). The convenience method currently does not support all the options of the regular call. If you need these more advanced features, you should use the regular call.

```python
import {{{packageName}}}

rs = {{{packageName}}}.RocksetClient(host={{{packageName}}}.Regions.use1a1, api_key="APIKEY")
try:
    res = rs.sql(query="SELECT * FROM _events WHERE kind=:event_type LIMIT 100", params={"event_type", "INGEST"})
except rockset.ApiException as e:
    print("Exception when calling ApiKey->create_api_key: %s\n" % e)
```

### Pagination

Query pagination can be achieved by using the normal API call (rs.Queries.get_query_results()) or by using the QueryPaginator class as an iterator. The QueryPaginator should be initialized by passing in a client object and a QueryResponse object. The QueryResponse object could be the result of any call that returns this object ([query](docs/Queries.md#query), [get_query](docs/Queries.md#get_query), [execute_query_lambda](docs/QueryLambdas.md#execute_query_lambda), [execute_query_lambda_by_tag](docs/QueryLambdas.md#execute_query_lambda_by_tag)). You will then be able to use the QueryPaginator object like you would any other iterator.

```python
import {{{packageName}}}

rs = {{{packageName}}}.RocksetClient(host={{{packageName}}}.Regions.use1a1, api_key="APIKEY")
for page in {{{packageName}}}.QueryPaginator(
    rs,
    rs.Queries.query(
        sql={{{packageName}}}.models.QueryRequestSql(
            query="SELECT * FROM _events LIMIT 500",
            paginate=True,
            initial_paginate_response_doc_count=100,
        )
    ),
):
    print(page)
```

## Optional Models

When making requests, certain parameters will oftentimes be instances of classes (eg. {{{packageName}}}.models.QueryRequestSql). Since importing and instantiating these objects can be verbose, you always have the option of passing in a dictionary instead of a model.

## Migration Guide

Migration to the new client should generally be a simple process. The most important thing to note is that the query builder has been deprecated and is not included in this client.

Most of the other differences between this client and the older version are small:
- The main client class is called 'RocksetClient' rather than 'Client'
- The parameter which is used to specify the apiserver location is 'host' rather than 'api_server'
- Some of the endpoints and their parameters have been renamed (see documentation for each endpoint)


## Documentation for API Endpoints

Class | Method | HTTP request | Description
------------ | ------------- | ------------- | -------------
{{#apiInfo}}{{#apis}}{{#operations}}{{#operation}}*{{classname}}* | [**{{operationId}}**]({{apiDocPath}}{{classname}}Api.md#{{operationIdLowerCase}}) | **{{httpMethod}}** {{path}} | {{summary}}
{{/operation}}{{/operations}}{{/apis}}{{/apiInfo}}

## Documentation For Models

{{#models}}{{#model}} - [{{{classname}}}]({{modelDocPath}}{{{classname}}}.md)
{{/model}}{{/models}}

## Documentation For Authorization

The RocksetClient object must be instantiated with an apikey. You can create your first apikey in the [Rockset console](https://console.rockset.com/apikeys). The provided apikey will be used for all requests that are made using the instance of the client.

## Author

Rockset
