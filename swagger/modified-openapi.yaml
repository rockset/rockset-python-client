components:
  requestBodies:
    ExecuteQueryLambdaRequest:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ExecuteQueryLambdaRequest"
      description: JSON object
    QueryRequest:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/QueryRequest"
      description: JSON object
      required: true
  schemas:
    AddDocumentsRequest:
      additionalProperties: false
      properties:
        data:
          description: Array of documents to be added to the collection.
          example:
            - field: value
          items:
            type: object
          type: array
      required:
        - data
      type: object
    AddDocumentsResponse:
      additionalProperties: false
      properties:
        data:
          description: information about the added documents
          items:
            $ref: "#/components/schemas/DocumentStatus"
          type: array
      type: object
    Alias:
      additionalProperties: false
      properties:
        collections:
          description: list of fully qualified collection names referenced by alias
          example:
            - commons.foo
            - prod.demo
          items:
            type: string
          type: array
        created_at:
          description: ISO-8601 date
          example: "2001-08-28T00:23:41Z"
          type: string
        creator_email:
          description: email of the creator
          example: xyz@rockset.com
          type: string
        description:
          description: alias description
          example: alias referencing collection in workspace
          type: string
        modified_at:
          description: ISO-8601 date
          example: "2001-08-28T00:23:42Z"
          type: string
        name:
          description: name of the alias
          example: demo
          type: string
        state:
          description: state of the alias
          enum:
            - CREATED
            - DELETED
          example: CREATED
          type: string
        workspace:
          description: name of the workspace
          example: commons
          type: string
      type: object
    ApiKey:
      additionalProperties: false
      description:
        API keys are used to authenticate requests to Rockset's API. An
        API key is tied to the user who creates it.
      properties:
        created_at:
          description: Date that API key was created (ISO-8601 format).
          example: "2001-08-28T00:23:41Z"
          type: string
        created_by:
          description: Email of API key owner.
          example: test@example.com
          type: string
        key:
          description: API key string of 64 alphanumeric characters.
          example: aB35kDjg*******************************
          type: string
        last_access_time:
          description: Date that API key was most recently used (ISO-8601 format).
          example: "2001-08-28T00:23:41Z"
          type: string
        name:
          description: Name of the API key.
          example: my-key
          type: string
        role:
          description:
            Role specifying access control. If not specified, API key will
            have access to all of the associated user's roles.
          example: read-only
          type: string
        state:
          description: current state of this key
          enum:
            - ACTIVE
            - SUSPENDED
          example: ACTIVE
          type: string
      required:
        - key
        - name
      type: object
    AsyncQueryOptions:
      additionalProperties: false
      properties:
        client_timeout_ms:
          description:
            The maximum amount of time that the client is willing to wait
            for the query to complete. If the query is not complete by this timeout,
            a response will be returned with a `query_id` that can be used to check
            the status of the query and retrieve results once the query has completed.
          format: int64
          type: integer
        max_initial_results:
          description:
            The maximum number of results you will receive as a client.
            If the query exceeds this limit, the remaining results can be requested
            using a returned pagination cursor. In addition, there is a maximum response
            size of 100MiB so fewer than `max_results` may be returned.
          format: int64
          type: integer
        timeout_ms:
          description:
            The maximum amount of time that the system will attempt to
            complete query execution before aborting the query and returning an error.
          format: int64
          type: integer
      type: object
    AwsAccessKey:
      additionalProperties: false
      properties:
        aws_access_key_id:
          description: AWS access key ID
          example: AKIAIOSFODNN7EXAMPLE
          type: string
        aws_secret_access_key:
          description: AWS secret access key
          example: wJal....
          type: string
      required:
        - aws_access_key_id
        - aws_secret_access_key
      type: object
    AwsRole:
      additionalProperties: false
      properties:
        aws_role_arn:
          description: ARN of rockset-role created in your account
          example: arn:aws:iam::2378964092:role/rockset-role
          type: string
      required:
        - aws_role_arn
      type: object
    AzureBlobStorageCollectionCreationRequest:
      additionalProperties: false
      properties:
        clustering_key:
          description: list of clustering fields
          items:
            $ref: "#/components/schemas/FieldPartition"
          type: array
        description:
          description: text describing the collection
          example: transactions from stores worldwide
          type: string
        event_time_info:
          $ref: "#/components/schemas/EventTimeInfo"
          description: configuration for event data
        field_mapping_query:
          $ref: "#/components/schemas/FieldMappingQuery"
          description: Mapping of fields for a collection
        field_mappings:
          description: list of mappings
          items:
            $ref: "#/components/schemas/FieldMappingV2"
          type: array
        insert_only:
          description:
            If true disallows updates and deletes, but makes indexing more
            efficient
          type: boolean
        name:
          description:
            unique identifier for collection, can contain alphanumeric
            or dash characters
          example: global-transactions
          type: string
        retention_secs:
          description:
            number of seconds after which data is purged, based on event
            time
          example: 1000000
          format: int64
          type: integer
        sources:
          description: List of sources from which to ingest data
          items:
            $ref: "#/components/schemas/AzureBlobStorageSourceWrapper"
          type: array
      required:
        - name
      type: object
    AzureBlobStorageIntegration:
      additionalProperties: false
      properties:
        connection_string:
          description: credentials for Azure Blob Storage
          type: string
      required:
        - connection_string
      type: object
    AzureBlobStorageIntegrationCreationRequest:
      additionalProperties: false
      properties:
        azure_blob_storage:
          $ref: "#/components/schemas/AzureBlobStorageIntegration"
          description: Azure Blob Storage details
        description:
          description: longer explanation for the integration
          example: AWS account with event data for the data science team.
          type: string
        name:
          description: descriptive label
          example: event-logs
          type: string
      required:
        - name
      type: object
    AzureBlobStorageSourceWrapper:
      additionalProperties: false
      description: Details about the data source for the given collection.
      properties:
        azure_blob_storage:
          $ref: "#/components/schemas/SourceAzureBlobStorage"
        format_params:
          $ref: "#/components/schemas/FormatParams"
          description: format parameters for data from this source
        integration_name:
          description: name of integration to use
          example: aws-integration
          type: string
        status:
          allOf:
            - $ref: "#/components/schemas/Status"
              description: the ingest status of this source
          readOnly: true
      type: object
      x-inner-field: azure_blob_storage
    AzureEventHubsCollectionCreationRequest:
      additionalProperties: false
      properties:
        clustering_key:
          description: list of clustering fields
          items:
            $ref: "#/components/schemas/FieldPartition"
          type: array
        description:
          description: text describing the collection
          example: transactions from stores worldwide
          type: string
        event_time_info:
          $ref: "#/components/schemas/EventTimeInfo"
          description: configuration for event data
        field_mapping_query:
          $ref: "#/components/schemas/FieldMappingQuery"
          description: Mapping of fields for a collection
        field_mappings:
          description: list of mappings
          items:
            $ref: "#/components/schemas/FieldMappingV2"
          type: array
        insert_only:
          description:
            If true disallows updates and deletes, but makes indexing more
            efficient
          type: boolean
        name:
          description:
            unique identifier for collection, can contain alphanumeric
            or dash characters
          example: global-transactions
          type: string
        retention_secs:
          description:
            number of seconds after which data is purged, based on event
            time
          example: 1000000
          format: int64
          type: integer
        sources:
          description: List of sources from which to ingest data
          items:
            $ref: "#/components/schemas/AzureEventHubsSourceWrapper"
          type: array
      required:
        - name
      type: object
    AzureEventHubsIntegration:
      additionalProperties: false
      properties:
        connection_string:
          description: azure event hubs connection string
          readOnly: true
          type: string
      type: object
    AzureEventHubsIntegrationCreationRequest:
      additionalProperties: false
      properties:
        azure_event_hubs:
          $ref: "#/components/schemas/AzureEventHubsIntegration"
        description:
          description: longer explanation for the integration
          example: AWS account with event data for the data science team.
          type: string
        name:
          description: descriptive label
          example: event-logs
          type: string
      required:
        - name
      type: object
    AzureEventHubsSourceWrapper:
      additionalProperties: false
      description: Details about the data source for the given collection.
      properties:
        azure_event_hubs:
          $ref: "#/components/schemas/SourceAzureEventHubs"
        format_params:
          $ref: "#/components/schemas/FormatParams"
          description: format parameters for data from this source
        integration_name:
          description: name of integration to use
          example: aws-integration
          type: string
        status:
          allOf:
            - $ref: "#/components/schemas/Status"
              description: the ingest status of this source
          readOnly: true
      type: object
      x-inner-field: azure_event_hubs
    AzureServiceBusCollectionCreationRequest:
      additionalProperties: false
      properties:
        clustering_key:
          description: list of clustering fields
          items:
            $ref: "#/components/schemas/FieldPartition"
          type: array
        description:
          description: text describing the collection
          example: transactions from stores worldwide
          type: string
        event_time_info:
          $ref: "#/components/schemas/EventTimeInfo"
          description: configuration for event data
        field_mapping_query:
          $ref: "#/components/schemas/FieldMappingQuery"
          description: Mapping of fields for a collection
        field_mappings:
          description: list of mappings
          items:
            $ref: "#/components/schemas/FieldMappingV2"
          type: array
        insert_only:
          description:
            If true disallows updates and deletes, but makes indexing more
            efficient
          type: boolean
        name:
          description:
            unique identifier for collection, can contain alphanumeric
            or dash characters
          example: global-transactions
          type: string
        retention_secs:
          description:
            number of seconds after which data is purged, based on event
            time
          example: 1000000
          format: int64
          type: integer
        sources:
          description: List of sources from which to ingest data
          items:
            $ref: "#/components/schemas/AzureServiceBusSourceWrapper"
          type: array
      required:
        - name
      type: object
    AzureServiceBusIntegration:
      additionalProperties: false
      properties:
        connection_string:
          description: credentials for the Azure Service Bus
          type: string
      required:
        - connection_string
      type: object
    AzureServiceBusSourceWrapper:
      additionalProperties: false
      description: Details about the data source for the given collection.
      properties:
        azure_service_bus:
          $ref: "#/components/schemas/SourceAzureServiceBus"
        format_params:
          $ref: "#/components/schemas/FormatParams"
          description: format parameters for data from this source
        integration_name:
          description: name of integration to use
          example: aws-integration
          type: string
        status:
          allOf:
            - $ref: "#/components/schemas/Status"
              description: the ingest status of this source
          readOnly: true
      type: object
      x-inner-field: azure_service_bus
    CancelQueryResponse:
      additionalProperties: false
      properties:
        data:
          $ref: "#/components/schemas/QueryInfo"
      type: object
    Cluster:
      additionalProperties: false
      properties:
        apiserver_url:
          description: api server url for cluster
          example: api.rockset.us-west-2.rockset.com
          type: string
        aws_region:
          description: aws region
          example: us-west-2
          type: string
        cluster_type:
          description: cluster type
          enum:
            - PUBLIC
            - PRIVATE
          example: PRIVATE
          type: string
        domain:
          description: domain of org using cluster
          example: rockset
          type: string
        id:
          description: unique identifier for the cluster
          example: asdf98-as9df8adf-adsf9asfd
          type: string
        top_level_domain:
          description: top level domain of org using cluster
          example: .com
          type: string
      type: object
    Collection:
      additionalProperties: false
      properties:
        aliases:
          description: list of aliases for a collection
          items:
            $ref: "#/components/schemas/Alias"
          type: array
        clustering_key:
          description: list of clustering fields for a collection
          items:
            $ref: "#/components/schemas/FieldPartition"
          type: array
        created_at:
          description: ISO-8601 date
          example: "2001-08-28T00:23:41Z"
          type: string
        created_by:
          description: email of user who created the collection
          example: hello@rockset.com
          type: string
        description:
          description: text describing the collection
          example: transactions from stores worldwide
          type: string
        field_mapping_query:
          $ref: "#/components/schemas/FieldMappingQuery"
          description: Field mapping for a collection
        field_mappings:
          description: list of mappings applied on all documents in a collection
          items:
            $ref: "#/components/schemas/FieldMappingV2"
          type: array
        insert_only:
          description: Whether the collection is insert only or not
          type: boolean
        name:
          description:
            unique identifer for collection, can contain alphanumeric or
            dash characters
          example: global-transactions
          pattern: ^[A-Za-z0-9_\-.]+$
          type: string
        read_only:
          description: Whether the collection is read-only or not
          type: boolean
        retention_secs:
          description:
            number of seconds after which data is purged based on event
            time
          example: 2592000
          format: int64
          type: integer
        sources:
          description: list of sources from which collection ingests
          items:
            $ref: "#/components/schemas/Source"
          type: array
        stats:
          $ref: "#/components/schemas/CollectionStats"
          description: metrics about the collection
        status:
          description: "current status of collection, one of: CREATED, READY, DELETED"
          enum:
            - INITIALIZED
            - CREATED
            - READY
            - PAUSED
            - DELETED
            - PAUSING
            - RESUMING
            - PREPARING_BULK
            - BULK_INGEST_MODE
            - EXITING_BULK_INGEST_MODE
            - UNKNOWN
          example: READY
          type: string
        workspace:
          description: name of the workspace that the collection is in
          example: commons
          type: string
      type: object
    CollectionStats:
      additionalProperties: false
      properties:
        bulk_bytes_inserted:
          description: total number of bytes inserted into the collection during bulk
          format: int64
          type: integer
        bulk_bytes_overwritten:
          description:
            total number of bytes overwritten in writing into the collection
            during bulk
          format: int64
          type: integer
        bytes_inserted:
          description: total number of bytes inserted into the collection
          example: 123456
          format: int64
          type: integer
        bytes_overwritten:
          description: total number of bytes overwritten in writing into the collection
          example: 123456
          format: int64
          type: integer
        column_index_size:
          description: total collection column index size in bytes
          example: 123456
          format: int64
          type: integer
        doc_count:
          description: number of documents in the collection
          example: 2145
          format: int64
          type: integer
        fill_progress:
          description:
            number between 0 and 1 that indicates progress of collection
            creation
          example: 0.6
          format: double
          type: number
        inverted_index_size:
          description: total collection inverted index size in bytes
          example: 123456
          format: int64
          type: integer
        last_queried_ms:
          description: milliseconds since Unix epoch Jan 1, 1970
          example: 1535101119334
          format: int64
          type: integer
        last_updated_ms:
          description: milliseconds since Unix epoch Jan 1, 1970
          example: 1535101094433
          format: int64
          type: integer
        purged_doc_count:
          description: number of documents purged from the collection
          example: 2145
          format: int64
          type: integer
        purged_doc_size:
          description: total size of bytes purged in bytes
          example: 123456
          format: int64
          type: integer
        range_index_size:
          description: total collection range index size in bytes
          example: 123456
          format: int64
          type: integer
        row_index_size:
          description: total collection row index size in bytes
          example: 123456
          format: int64
          type: integer
        total_index_size:
          description: total collection index size in bytes
          example: 123456
          format: int64
          type: integer
        total_size:
          description: total collection size in bytes
          example: 123456
          format: int64
          type: integer
      type: object
    CreateAliasRequest:
      additionalProperties: false
      properties:
        collections:
          description: list of fully qualified collection names referenced by alias
          example:
            - commons.foo
            - prod.demo
          items:
            type: string
          type: array
        description:
          description: optional description
          example: version alias
          type: string
        name:
          description: Alias name
          example: aliasName
          type: string
      required:
        - collections
        - name
      type: object
    CreateAliasResponse:
      additionalProperties: false
      properties:
        data:
          $ref: "#/components/schemas/Alias"
          description: alias that was created
      type: object
    CreateApiKeyRequest:
      additionalProperties: false
      properties:
        name:
          description: Name for this API key.
          example: my-app
          type: string
        role:
          type: string
      required:
        - name
      type: object
    CreateApiKeyResponse:
      additionalProperties: false
      properties:
        data:
          $ref: "#/components/schemas/ApiKey"
          description: The API key that was created.
      type: object
    CreateCollectionRequest:
      additionalProperties: false
      properties:
        clustering_key:
          description: list of clustering fields
          items:
            $ref: "#/components/schemas/FieldPartition"
          type: array
        description:
          description: text describing the collection
          example: transactions from stores worldwide
          type: string
        event_time_info:
          $ref: "#/components/schemas/EventTimeInfo"
          description: configuration for event data
        field_mapping_query:
          $ref: "#/components/schemas/FieldMappingQuery"
          description: Mapping of fields for a collection
        field_mappings:
          description: list of mappings
          items:
            $ref: "#/components/schemas/FieldMappingV2"
          type: array
        insert_only:
          description:
            If true disallows updates and deletes, but makes indexing more
            efficient
          type: boolean
        name:
          description:
            unique identifier for collection, can contain alphanumeric
            or dash characters
          example: global-transactions
          type: string
        retention_secs:
          description:
            number of seconds after which data is purged, based on event
            time
          example: 1000000
          format: int64
          type: integer
      required:
        - name
      type: object
    CreateCollectionResponse:
      additionalProperties: false
      properties:
        data:
          $ref: "#/components/schemas/Collection"
          description: collection that was created
      type: object
    CreateIntegrationRequest:
      additionalProperties: false
      properties:
        azure_blob_storage:
          $ref: "#/components/schemas/AzureBlobStorageIntegration"
          description: Azure Blob Storage details
        azure_event_hubs:
          $ref: "#/components/schemas/AzureEventHubsIntegration"
        description:
          description: longer explanation for the integration
          example: AWS account with event data for the data science team.
          type: string
        dynamodb:
          $ref: "#/components/schemas/DynamodbIntegration"
          description:
            Amazon DynamoDB details, must have one of aws_access_key or
            aws_role
        gcs:
          $ref: "#/components/schemas/GcsIntegration"
          description: GCS details
        kafka:
          $ref: "#/components/schemas/KafkaIntegration"
        kinesis:
          $ref: "#/components/schemas/KinesisIntegration"
          description:
            Amazon Kinesis details, must have one of aws_access_key or
            aws_role
        mongodb:
          $ref: "#/components/schemas/MongoDbIntegration"
          description: MongoDb details
        name:
          description: descriptive label
          example: event-logs
          type: string
        s3:
          $ref: "#/components/schemas/S3Integration"
          description: Amazon S3 details, must have one of aws_access_key or aws_role
        segment:
          $ref: "#/components/schemas/SegmentIntegration"
        snowflake:
          $ref: "#/components/schemas/SnowflakeIntegration"
      required:
        - name
      type: object
    CreateIntegrationResponse:
      additionalProperties: false
      properties:
        data:
          $ref: "#/components/schemas/Integration"
          description: integration object that was created
      type: object
    CreateQueryLambdaRequest:
      additionalProperties: false
      properties:
        description:
          description: optional description
          example: production version foo
          type: string
        name:
          description: Query Lambda name
          example: myQueryLambda
          type: string
        sql:
          $ref: "#/components/schemas/QueryLambdaSql"
          description: Query Lambda SQL query
      required:
        - name
        - sql
      type: object
    CreateQueryLambdaTagRequest:
      additionalProperties: false
      properties:
        tag_name:
          description: name of Query Lambda tag
          example: production
          type: string
        version:
          description: hash identifying a Query Lambda tag
          example: 123ABC
          type: string
      required:
        - tag_name
        - version
      type: object
    CreateRoleRequest:
      additionalProperties: false
      properties:
        description:
          description: Description for the role.
          example: Role with read and write privileges to all collections.
          type: string
        privileges:
          description: List of privileges that will be associated with the role.
          items:
            $ref: "#/components/schemas/Privilege"
          type: array
        role_name:
          description: Unique identifier for the role.
          example: read_write
          type: string
      type: object
    CreateUserRequest:
      additionalProperties: false
      properties:
        email:
          description: user email, must be unique
          example: hello@rockset.com
          type: string
        roles:
          description: List of roles for a given user
          example:
            - admin
            - member
            - read-only
          items:
            type: string
          type: array
      required:
        - email
        - roles
      type: object
    CreateUserResponse:
      additionalProperties: false
      properties:
        data:
          $ref: "#/components/schemas/User"
          description: user that was created
      type: object
    CreateViewRequest:
      additionalProperties: false
      properties:
        description:
          description: optional description
          example: view of awesome collection
          type: string
        name:
          description: View name
          example: myAwesomeView
          type: string
        query:
          description: SQL for this view
          example: SELECT * FROM foo
          type: string
      required:
        - name
        - query
      type: object
    CreateViewResponse:
      additionalProperties: false
      properties:
        data:
          $ref: "#/components/schemas/View"
          description: view that was updated
      type: object
    CreateWorkspaceRequest:
      additionalProperties: false
      properties:
        description:
          description: longer explanation for the workspace
          example: Datasets of system logs for the ops team.
          type: string
        name:
          description: descriptive label and unique identifier
          example: event_logs
          type: string
      required:
        - name
      type: object
    CreateWorkspaceResponse:
      additionalProperties: false
      properties:
        data:
          $ref: "#/components/schemas/Workspace"
          description: the workspace that was created
      type: object
    CsvParams:
      additionalProperties: false
      properties:
        columnNames:
          description: names of columns
          example:
            - c1
            - c2
            - c3
          items:
            type: string
          type: array
        columnTypes:
          description: names of columns
          example:
            - BOOLEAN
            - INTEGER
            - FLOAT
            - STRING
          items:
            enum:
              - UNKNOWN
              - BOOLEAN
              - BOOL
              - INTEGER
              - INT
              - FLOAT
              - TIME
              - DATE
              - DATETIME
              - TIMESTAMP
              - STRING
            type: string
          type: array
        encoding:
          description: "can be one of: UTF-8, ISO_8859_1, UTF-16"
          example: UTF-8
          type: string
        escapeChar:
          description:
            escape character removes any special meaning from the following
            character,default is '\'
          example: \\
          type: string
        firstLineAsColumnNames:
          description: If the first line in every object specifies the column names
          example: true
          type: boolean
        quoteChar:
          description:
            character within which a cell value is enclosed,null character
            if no such character, default is '"'
          example: \"
          type: string
        separator:
          description: a single character that is the column separator
          example: ","
          type: string
      type: object
    DeleteAliasResponse:
      additionalProperties: false
      properties:
        data:
          $ref: "#/components/schemas/Alias"
          description: alias that was deleted
      type: object
    DeleteApiKeyResponse:
      additionalProperties: false
      properties:
        data:
          $ref: "#/components/schemas/ApiKey"
          description: The API key that was deleted.
      type: object
    DeleteCollectionResponse:
      additionalProperties: false
      properties:
        data:
          $ref: "#/components/schemas/Collection"
          description: collection that was deleted
      type: object
    DeleteDocumentsRequest:
      additionalProperties: false
      properties:
        data:
          description: Array of IDs of documents to be deleted
          items:
            $ref: "#/components/schemas/DeleteDocumentsRequestData"
          type: array
      required:
        - data
      type: object
    DeleteDocumentsRequestData:
      additionalProperties: false
      properties:
        _id:
          description: unique document ID
          example: 2cd61e3b
          type: string
      required:
        - _id
      type: object
    DeleteDocumentsResponse:
      additionalProperties: false
      properties:
        data:
          description: information about deleted documents
          items:
            $ref: "#/components/schemas/DocumentStatus"
          type: array
      type: object
    DeleteIntegrationResponse:
      additionalProperties: false
      properties:
        data:
          $ref: "#/components/schemas/Integration"
          description: integration object that was deleted
      type: object
    DeleteQueryLambdaResponse:
      additionalProperties: false
      properties:
        data:
          $ref: "#/components/schemas/QueryLambda"
          description: Query Lambda details
      type: object
    DeleteUserResponse:
      additionalProperties: false
      properties:
        data:
          $ref: "#/components/schemas/User"
          description: user object that was deleted
      type: object
    DeleteViewResponse:
      additionalProperties: false
      properties:
        data:
          $ref: "#/components/schemas/View"
          description: view that was deleted
      type: object
    DeleteWorkspaceResponse:
      additionalProperties: false
      properties:
        data:
          $ref: "#/components/schemas/Workspace"
          description: the workspace that was deleted
      type: object
    DocumentStatus:
      additionalProperties: false
      properties:
        _collection:
          description: collection name
          example: customers
          type: string
        _id:
          description: unique document ID
          example: 2cd61e3b
          type: string
        error:
          $ref: "#/components/schemas/ErrorModel"
          description: error message, if any
        patch_id:
          description: unique id used to represent each patch request
          example: 486gsg8
          type: string
        status:
          description: status of the document
          enum:
            - ADDED
            - REPLACED
            - DELETED
            - PATCHED
            - ERROR
          example: ADDED
          type: string
      type: object
    DynamodbCollectionCreationRequest:
      additionalProperties: false
      properties:
        clustering_key:
          description: list of clustering fields
          items:
            $ref: "#/components/schemas/FieldPartition"
          type: array
        description:
          description: text describing the collection
          example: transactions from stores worldwide
          type: string
        event_time_info:
          $ref: "#/components/schemas/EventTimeInfo"
          description: configuration for event data
        field_mapping_query:
          $ref: "#/components/schemas/FieldMappingQuery"
          description: Mapping of fields for a collection
        field_mappings:
          description: list of mappings
          items:
            $ref: "#/components/schemas/FieldMappingV2"
          type: array
        insert_only:
          description:
            If true disallows updates and deletes, but makes indexing more
            efficient
          type: boolean
        name:
          description:
            unique identifier for collection, can contain alphanumeric
            or dash characters
          example: global-transactions
          type: string
        retention_secs:
          description:
            number of seconds after which data is purged, based on event
            time
          example: 1000000
          format: int64
          type: integer
        sources:
          description: List of sources from which to ingest data
          items:
            $ref: "#/components/schemas/DynamodbSourceWrapper"
          type: array
      required:
        - name
      type: object
    DynamodbIntegration:
      additionalProperties: false
      properties:
        aws_access_key:
          $ref: "#/components/schemas/AwsAccessKey"
          description: credentials for an AWS access key integration
        aws_role:
          $ref: "#/components/schemas/AwsRole"
          description: role used for external id type authentication
        s3_export_bucket_name:
          type: string
      type: object
    DynamodbIntegrationCreationRequest:
      additionalProperties: false
      properties:
        description:
          description: longer explanation for the integration
          example: AWS account with event data for the data science team.
          type: string
        dynamodb:
          $ref: "#/components/schemas/DynamodbIntegration"
          description:
            Amazon DynamoDB details, must have one of aws_access_key or
            aws_role
        name:
          description: descriptive label
          example: event-logs
          type: string
      required:
        - name
      type: object
    DynamodbSourceWrapper:
      additionalProperties: false
      description: Details about the data source for the given collection.
      properties:
        dynamodb:
          $ref: "#/components/schemas/SourceDynamoDb"
          description: configuration for ingestion from  a dynamodb table
        format_params:
          $ref: "#/components/schemas/FormatParams"
          description: format parameters for data from this source
        integration_name:
          description: name of integration to use
          example: aws-integration
          type: string
        status:
          allOf:
            - $ref: "#/components/schemas/Status"
              description: the ingest status of this source
          readOnly: true
      type: object
      x-inner-field: dynamodb
    ErrorModel:
      additionalProperties: false
      description: Describes details about an error
      properties:
        column:
          description: Column where the error happened (if applicable)
          format: int32
          type: integer
        error_id:
          description: ID of the error
          type: string
        line:
          description: Line where the error happened (if applicable)
          format: int32
          type: integer
        message:
          description: descriptive message about the error
          example: collection not found
          type: string
        query_id:
          description: ID of the query (if applicable)
          type: string
        trace_id:
          description: Internal trace ID to help with debugging
          type: string
        type:
          description: category of the error
          enum:
            - AUTHEXCEPTION
            - VERSIONEXCEPTION
            - INTERNALERROR
            - INVALIDINPUT
            - NOTIMPLEMENTEDYET
            - RESOURCEEXCEEDED
            - ALREADYEXISTS
            - NOTALLOWED
            - NOTACCEPTABLE
            - NOTSUPPORTED
            - NOTFOUND
            - DEPENDENTRESOURCES
            - QUERY_ERROR
            - NOT_READY
            - FORBIDDEN
            - QUERY_TIMEOUT
            - ROLE_NOT_FOUND
            - CONNECTION_ERROR
            - CREATING
            - BADREQUEST
            - SERVICEUNAVAILABLE
            - RATELIMITEXCEEDED
            - QUERY_CANCELLED
            - CLIENT_CONNECTION_ERROR
          example: INVALIDINPUT
          type: string
      type: object
    EventTimeInfo:
      additionalProperties: false
      properties:
        field:
          description: name of the field containing event time
          example: timestamp
          type: string
        format:
          description:
            "format of time field, can be one of: milliseconds_since_epoch,
            seconds_since_epoch"
          example: seconds_since_epoch
          type: string
        time_zone:
          description: default time zone, in standard IANA format
          example: UTC
          type: string
      required:
        - field
      type: object
    ExecuteQueryLambdaRequest:
      additionalProperties: false
      properties:
        async_options:
          $ref: "#/components/schemas/AsyncQueryOptions"
          description: Options for configuring Asynchronous Query Mode (beta).
        default_row_limit:
          description: Row limit to use if no limit specified in the SQL query text
          format: int32
          type: integer
        generate_warnings:
          description: Whether to generate warnings
          type: boolean
        initial_paginate_response_doc_count:
          description:
            Number of documents to return in addition to paginating for
            this query call. Only relevant if `paginate` flag is also set.
          format: int32
          type: integer
        paginate:
          description:
            Flag to paginate and store the results of this query for later
            / sequential retrieval.
          type: boolean
        parameters:
          description: list of named parameters
          items:
            $ref: "#/components/schemas/QueryParameter"
          type: array
      type: object
    FieldMapping:
      additionalProperties: false
      properties: {}
      type: object
    FieldMappingQuery:
      additionalProperties: false
      properties:
        sql:
          description: SELECT * EXCEPT (name), SHA256(name) AS name_anon FROM _input
          example: sql
          type: string
      type: object
    FieldMappingV2:
      additionalProperties: false
      properties:
        input_fields:
          description: A List of InputField for this mapping
          items:
            $ref: "#/components/schemas/InputField"
          type: array
        is_drop_all_fields:
          description:
            A boolean that determines whether to drop all fields in this
            document. If set, input and output fields should not be set
          example: true
          type: boolean
        name:
          description: A user specified string that is a name for this mapping
          example: myTestMapping
          type: string
        output_field:
          $ref: "#/components/schemas/OutputField"
          description: An OutputField for this mapping
      type: object
    FieldPartition:
      additionalProperties: false
      properties:
        field_name:
          description: The name of a field, parsed as a SQL qualified name
          example: address.city.zipcode
          type: string
        keys:
          description:
            The values for partitioning of a field. Unneeded if the partition
            type is AUTO.
          example:
            - value1
            - value2
          items:
            type: string
          type: array
        type:
          description: The type of partitions on a field
          enum:
            - AUTO
          example: AUTO
          type: string
      type: object
    FileUploadCollectionCreationRequest:
      additionalProperties: false
      properties:
        clustering_key:
          description: list of clustering fields
          items:
            $ref: "#/components/schemas/FieldPartition"
          type: array
        description:
          description: text describing the collection
          example: transactions from stores worldwide
          type: string
        event_time_info:
          $ref: "#/components/schemas/EventTimeInfo"
          description: configuration for event data
        field_mapping_query:
          $ref: "#/components/schemas/FieldMappingQuery"
          description: Mapping of fields for a collection
        field_mappings:
          description: list of mappings
          items:
            $ref: "#/components/schemas/FieldMappingV2"
          type: array
        insert_only:
          description:
            If true disallows updates and deletes, but makes indexing more
            efficient
          type: boolean
        name:
          description:
            unique identifier for collection, can contain alphanumeric
            or dash characters
          example: global-transactions
          type: string
        retention_secs:
          description:
            number of seconds after which data is purged, based on event
            time
          example: 1000000
          format: int64
          type: integer
        sources:
          description: List of sources from which to ingest data
          items:
            $ref: "#/components/schemas/FileUploadSourceWrapper"
          type: array
      required:
        - name
      type: object
    FileUploadSourceWrapper:
      additionalProperties: false
      description: Details about the data source for the given collection.
      properties:
        file_upload:
          $ref: "#/components/schemas/SourceFileUpload"
          description: file upload details
        format_params:
          $ref: "#/components/schemas/FormatParams"
          description: format parameters for data from this source
        integration_name:
          description: name of integration to use
          example: aws-integration
          type: string
        status:
          allOf:
            - $ref: "#/components/schemas/Status"
              description: the ingest status of this source
          readOnly: true
      type: object
      x-inner-field: file_upload
    FormatParams:
      additionalProperties: false
      properties:
        csv:
          $ref: "#/components/schemas/CsvParams"
        json:
          description: source data is in json format
          example: true
          type: boolean
        mssql_dms:
          type: boolean
        mysql_dms:
          type: boolean
        oracle_dms:
          type: boolean
        postgres_dms:
          type: boolean
        xml:
          $ref: "#/components/schemas/XmlParams"
      type: object
    GcpServiceAccount:
      additionalProperties: false
      properties:
        service_account_key_file_json:
          description: Contents of JSON Service Account key file
          type: string
      required:
        - service_account_key_file_json
      type: object
    GcsCollectionCreationRequest:
      additionalProperties: false
      properties:
        clustering_key:
          description: list of clustering fields
          items:
            $ref: "#/components/schemas/FieldPartition"
          type: array
        description:
          description: text describing the collection
          example: transactions from stores worldwide
          type: string
        event_time_info:
          $ref: "#/components/schemas/EventTimeInfo"
          description: configuration for event data
        field_mapping_query:
          $ref: "#/components/schemas/FieldMappingQuery"
          description: Mapping of fields for a collection
        field_mappings:
          description: list of mappings
          items:
            $ref: "#/components/schemas/FieldMappingV2"
          type: array
        insert_only:
          description:
            If true disallows updates and deletes, but makes indexing more
            efficient
          type: boolean
        name:
          description:
            unique identifier for collection, can contain alphanumeric
            or dash characters
          example: global-transactions
          type: string
        retention_secs:
          description:
            number of seconds after which data is purged, based on event
            time
          example: 1000000
          format: int64
          type: integer
        sources:
          description: List of sources from which to ingest data
          items:
            $ref: "#/components/schemas/GcsSourceWrapper"
          type: array
      required:
        - name
      type: object
    GcsIntegration:
      additionalProperties: false
      properties:
        gcp_service_account:
          $ref: "#/components/schemas/GcpServiceAccount"
          description: credentials for an AWS key integration
      type: object
    GcsIntegrationCreationRequest:
      additionalProperties: false
      properties:
        description:
          description: longer explanation for the integration
          example: AWS account with event data for the data science team.
          type: string
        gcs:
          $ref: "#/components/schemas/GcsIntegration"
          description: GCS details
        name:
          description: descriptive label
          example: event-logs
          type: string
      required:
        - name
      type: object
    GcsSourceWrapper:
      additionalProperties: false
      description: Details about the data source for the given collection.
      properties:
        format_params:
          $ref: "#/components/schemas/FormatParams"
          description: format parameters for data from this source
        gcs:
          $ref: "#/components/schemas/SourceGcs"
          description: configuration for ingestion from GCS
        integration_name:
          description: name of integration to use
          example: aws-integration
          type: string
        status:
          allOf:
            - $ref: "#/components/schemas/Status"
              description: the ingest status of this source
          readOnly: true
      type: object
      x-inner-field: gcs
    GetAliasResponse:
      additionalProperties: false
      properties:
        data:
          $ref: "#/components/schemas/Alias"
          description: alias that was requested
      type: object
    GetApiKeyResponse:
      additionalProperties: false
      properties:
        data:
          $ref: "#/components/schemas/ApiKey"
          description: The requested API key object.
      type: object
    GetCollectionResponse:
      additionalProperties: false
      properties:
        data:
          $ref: "#/components/schemas/Collection"
          description: collection that was requested
      type: object
    GetIntegrationResponse:
      additionalProperties: false
      properties:
        data:
          $ref: "#/components/schemas/Integration"
          description: integration object
      type: object
    GetQueryResponse:
      additionalProperties: false
      properties:
        data:
          $ref: "#/components/schemas/QueryInfo"
        last_offset:
          description:
            If this was a write query, this is the log offset the query
            was written to
          type: string
      type: object
    GetViewResponse:
      additionalProperties: false
      properties:
        data:
          $ref: "#/components/schemas/View"
          description: view that was requested
      type: object
    GetVirtualInstanceResponse:
      additionalProperties: false
      properties:
        data:
          $ref: "#/components/schemas/VirtualInstance"
          description: virtual instance that was requested
      type: object
    GetWorkspaceResponse:
      additionalProperties: false
      properties:
        data:
          $ref: "#/components/schemas/Workspace"
          description: the workspace that was requested
      type: object
    InputField:
      additionalProperties: false
      properties:
        field_name:
          description: The name of a field, parsed as a SQL qualified name
          example: address.city.zipcode
          type: string
        if_missing:
          description: Define the behaviour if fieldName is missing or is null
          enum:
            - SKIP
            - PASS
          example: SKIP
          type: string
        is_drop:
          description: If true, then drop fieldName from the document
          example: true
          type: boolean
        param:
          description: Sql parameter name
          example: zip
          type: string
      type: object
    Integration:
      additionalProperties: false
      description:
        Integrations that can be associated with data sources to create
        collections. Only one type of integration may be specified.
      properties:
        azure_blob_storage:
          $ref: "#/components/schemas/AzureBlobStorageIntegration"
          description: Azure Blob Storage details
        azure_event_hubs:
          $ref: "#/components/schemas/AzureEventHubsIntegration"
        azure_service_bus:
          $ref: "#/components/schemas/AzureServiceBusIntegration"
        collections:
          description: list of collections that use the integration
          items:
            $ref: "#/components/schemas/Collection"
          type: array
        created_at:
          description: ISO-8601 date
          example: "2001-08-28T00:23:41Z"
          type: string
        created_by:
          description: email of user who created the integration
          example: hello@rockset.com
          type: string
        description:
          description: longer explanation for the integration
          example: AWS account with event data for the data science team.
          type: string
        dynamodb:
          $ref: "#/components/schemas/DynamodbIntegration"
          description:
            Amazon DynamoDB details, must have one of aws_access_key or
            aws_role
        gcs:
          $ref: "#/components/schemas/GcsIntegration"
          description: GCS details
        kafka:
          $ref: "#/components/schemas/KafkaIntegration"
          description: Kafka details
        kinesis:
          $ref: "#/components/schemas/KinesisIntegration"
          description:
            Amazon Kinesis details, must have one of aws_access_key or
            aws_role
        mongodb:
          $ref: "#/components/schemas/MongoDbIntegration"
          description: MongoDb details
        name:
          description: descriptive label and unique identifier
          example: event-logs
          type: string
        s3:
          $ref: "#/components/schemas/S3Integration"
          description: Amazon S3 details, must have one of aws_access_key or aws_role
        segment:
          $ref: "#/components/schemas/SegmentIntegration"
          description: Segment details
        snowflake:
          $ref: "#/components/schemas/SnowflakeIntegration"
          description: Snowflake details
      required:
        - created_by
        - name
      type: object
    KafkaCollectionCreationRequest:
      additionalProperties: false
      properties:
        clustering_key:
          description: list of clustering fields
          items:
            $ref: "#/components/schemas/FieldPartition"
          type: array
        description:
          description: text describing the collection
          example: transactions from stores worldwide
          type: string
        event_time_info:
          $ref: "#/components/schemas/EventTimeInfo"
          description: configuration for event data
        field_mapping_query:
          $ref: "#/components/schemas/FieldMappingQuery"
          description: Mapping of fields for a collection
        field_mappings:
          description: list of mappings
          items:
            $ref: "#/components/schemas/FieldMappingV2"
          type: array
        insert_only:
          description:
            If true disallows updates and deletes, but makes indexing more
            efficient
          type: boolean
        name:
          description:
            unique identifier for collection, can contain alphanumeric
            or dash characters
          example: global-transactions
          type: string
        retention_secs:
          description:
            number of seconds after which data is purged, based on event
            time
          example: 1000000
          format: int64
          type: integer
        sources:
          description: List of sources from which to ingest data
          items:
            $ref: "#/components/schemas/KafkaSourceWrapper"
          type: array
      required:
        - name
      type: object
    KafkaIntegration:
      additionalProperties: false
      properties:
        bootstrap_servers:
          type: string
        connection_string:
          description: kafka connection string
          readOnly: true
          type: string
        kafka_data_format:
          description: The format of the Kafka topics being tailed
          enum:
            - JSON
            - AVRO
          example: JSON
          type: string
        kafka_topic_names:
          description: Kafka topics to tail
          items:
            type: string
          type: array
          uniqueItems: true
        schema_registry_config:
          $ref: "#/components/schemas/SchemaRegistryConfig"
        security_config:
          $ref: "#/components/schemas/KafkaV3SecurityConfig"
          description: Kafka security configurations. Required only for V3 integration.
        source_status_by_topic:
          additionalProperties:
            $ref: "#/components/schemas/StatusKafka"
          description: The status of the Kafka source by topic
          example:
            topic-a: DORMANT
          readOnly: true
          type: object
        use_v3:
          type: boolean
      type: object
    KafkaIntegrationCreationRequest:
      additionalProperties: false
      properties:
        description:
          description: longer explanation for the integration
          example: AWS account with event data for the data science team.
          type: string
        kafka:
          $ref: "#/components/schemas/KafkaIntegration"
        name:
          description: descriptive label
          example: event-logs
          type: string
      required:
        - name
      type: object
    KafkaSourceWrapper:
      additionalProperties: false
      description: Details about the data source for the given collection.
      properties:
        format_params:
          $ref: "#/components/schemas/FormatParams"
          description: format parameters for data from this source
        integration_name:
          description: name of integration to use
          example: aws-integration
          type: string
        kafka:
          $ref: "#/components/schemas/SourceKafka"
          description: kafka collection identifier
        status:
          allOf:
            - $ref: "#/components/schemas/Status"
              description: the ingest status of this source
          readOnly: true
      type: object
      x-inner-field: kafka
    KafkaV3SecurityConfig:
      additionalProperties: false
      properties:
        api_key:
          type: string
        secret:
          type: string
      type: object
    KinesisCollectionCreationRequest:
      additionalProperties: false
      properties:
        clustering_key:
          description: list of clustering fields
          items:
            $ref: "#/components/schemas/FieldPartition"
          type: array
        description:
          description: text describing the collection
          example: transactions from stores worldwide
          type: string
        event_time_info:
          $ref: "#/components/schemas/EventTimeInfo"
          description: configuration for event data
        field_mapping_query:
          $ref: "#/components/schemas/FieldMappingQuery"
          description: Mapping of fields for a collection
        field_mappings:
          description: list of mappings
          items:
            $ref: "#/components/schemas/FieldMappingV2"
          type: array
        insert_only:
          description:
            If true disallows updates and deletes, but makes indexing more
            efficient
          type: boolean
        name:
          description:
            unique identifier for collection, can contain alphanumeric
            or dash characters
          example: global-transactions
          type: string
        retention_secs:
          description:
            number of seconds after which data is purged, based on event
            time
          example: 1000000
          format: int64
          type: integer
        sources:
          description: List of sources from which to ingest data
          items:
            $ref: "#/components/schemas/KinesisSourceWrapper"
          type: array
      required:
        - name
      type: object
    KinesisIntegration:
      additionalProperties: false
      properties:
        aws_access_key:
          $ref: "#/components/schemas/AwsAccessKey"
          description: credentials for an AWS access key integration
        aws_role:
          $ref: "#/components/schemas/AwsRole"
          description: details of an AWS cross-account role integration
      type: object
    KinesisIntegrationCreationRequest:
      additionalProperties: false
      properties:
        description:
          description: longer explanation for the integration
          example: AWS account with event data for the data science team.
          type: string
        kinesis:
          $ref: "#/components/schemas/KinesisIntegration"
          description:
            Amazon Kinesis details, must have one of aws_access_key or
            aws_role
        name:
          description: descriptive label
          example: event-logs
          type: string
      required:
        - name
      type: object
    KinesisSourceWrapper:
      additionalProperties: false
      description: Details about the data source for the given collection.
      properties:
        format_params:
          $ref: "#/components/schemas/FormatParams"
          description: format parameters for data from this source
        integration_name:
          description: name of integration to use
          example: aws-integration
          type: string
        kinesis:
          $ref: "#/components/schemas/SourceKinesis"
          description: configuration for ingestion from kinesis stream
        status:
          allOf:
            - $ref: "#/components/schemas/Status"
              description: the ingest status of this source
          readOnly: true
      type: object
      x-inner-field: kinesis
    ListAliasesResponse:
      additionalProperties: false
      properties:
        data:
          description: list of all aliases
          items:
            $ref: "#/components/schemas/Alias"
          type: array
      type: object
    ListApiKeysResponse:
      additionalProperties: false
      properties:
        data:
          description: List of API key objects.
          items:
            $ref: "#/components/schemas/ApiKey"
          type: array
      type: object
    ListCollectionsResponse:
      additionalProperties: false
      properties:
        data:
          description: list of all collections
          items:
            $ref: "#/components/schemas/Collection"
          type: array
      type: object
    ListIntegrationsResponse:
      additionalProperties: false
      properties:
        data:
          description: list of integration objects
          items:
            $ref: "#/components/schemas/Integration"
          type: array
      type: object
    ListQueriesResponse:
      additionalProperties: false
      properties:
        data:
          items:
            $ref: "#/components/schemas/QueryInfo"
          type: array
      type: object
    ListQueryLambdaTagsResponse:
      additionalProperties: false
      properties:
        data:
          description: list of all tags associated with a Query Lambda
          items:
            $ref: "#/components/schemas/QueryLambdaTag"
          type: array
      type: object
    ListQueryLambdaVersionsResponse:
      additionalProperties: false
      properties:
        data:
          description: list of all versions for a particular Query Lambda
          items:
            $ref: "#/components/schemas/QueryLambdaVersion"
          type: array
      type: object
    ListQueryLambdasResponse:
      additionalProperties: false
      properties:
        data:
          description: list of all Query Lambdas
          items:
            $ref: "#/components/schemas/QueryLambda"
          type: array
      type: object
    ListRolesResponse:
      additionalProperties: false
      properties:
        data:
          description: List of all roles.
          items:
            $ref: "#/components/schemas/Role"
          type: array
      type: object
    ListUnsubscribePreferencesResponse:
      additionalProperties: false
      properties:
        data:
          description: List of notification preferences
          items:
            $ref: "#/components/schemas/UnsubscribePreference"
          type: array
      type: object
    ListUsersResponse:
      additionalProperties: false
      properties:
        data:
          description: list of users
          items:
            $ref: "#/components/schemas/User"
          type: array
      type: object
    ListViewsResponse:
      additionalProperties: false
      properties:
        data:
          description: list of all views
          items:
            $ref: "#/components/schemas/View"
          type: array
      type: object
    ListVirtualInstancesResponse:
      additionalProperties: false
      properties:
        data:
          description: list of all virtual instances
          items:
            $ref: "#/components/schemas/VirtualInstance"
          type: array
      type: object
    ListWorkspacesResponse:
      additionalProperties: false
      properties:
        data:
          description: list of workspaces
          items:
            $ref: "#/components/schemas/Workspace"
          type: array
      type: object
    MongoDbIntegration:
      additionalProperties: false
      properties:
        connection_uri:
          description: MongoDB connection URI string
          example: mongodb+srv://<username>:<password>@server.example.com/
          type: string
      required:
        - connection_uri
      type: object
    MongodbCollectionCreationRequest:
      additionalProperties: false
      properties:
        clustering_key:
          description: list of clustering fields
          items:
            $ref: "#/components/schemas/FieldPartition"
          type: array
        description:
          description: text describing the collection
          example: transactions from stores worldwide
          type: string
        event_time_info:
          $ref: "#/components/schemas/EventTimeInfo"
          description: configuration for event data
        field_mapping_query:
          $ref: "#/components/schemas/FieldMappingQuery"
          description: Mapping of fields for a collection
        field_mappings:
          description: list of mappings
          items:
            $ref: "#/components/schemas/FieldMappingV2"
          type: array
        insert_only:
          description:
            If true disallows updates and deletes, but makes indexing more
            efficient
          type: boolean
        name:
          description:
            unique identifier for collection, can contain alphanumeric
            or dash characters
          example: global-transactions
          type: string
        retention_secs:
          description:
            number of seconds after which data is purged, based on event
            time
          example: 1000000
          format: int64
          type: integer
        sources:
          description: List of sources from which to ingest data
          items:
            $ref: "#/components/schemas/MongodbSourceWrapper"
          type: array
      required:
        - name
      type: object
    MongodbIntegrationCreationRequest:
      additionalProperties: false
      properties:
        description:
          description: longer explanation for the integration
          example: AWS account with event data for the data science team.
          type: string
        mongodb:
          $ref: "#/components/schemas/MongoDbIntegration"
          description: MongoDb details
        name:
          description: descriptive label
          example: event-logs
          type: string
      required:
        - name
      type: object
    MongodbSourceWrapper:
      additionalProperties: false
      description: Details about the data source for the given collection.
      properties:
        format_params:
          $ref: "#/components/schemas/FormatParams"
          description: format parameters for data from this source
        integration_name:
          description: name of integration to use
          example: aws-integration
          type: string
        mongodb:
          $ref: "#/components/schemas/SourceMongoDb"
          description: MongoDB collection details
        status:
          allOf:
            - $ref: "#/components/schemas/Status"
              description: the ingest status of this source
          readOnly: true
      type: object
      x-inner-field: mongodb
    Organization:
      additionalProperties: false
      description: An organization in Rockset is a container for users and collections.
      properties:
        clusters:
          description: list of clusters associated with this org
          items:
            $ref: "#/components/schemas/Cluster"
          type: array
        created_at:
          description: ISO-8601 date
          example: "2001-08-28T00:23:41Z"
          type: string
        deletionScheduledAt:
          type: string
        display_name:
          description: name of the organization
          example: Rockset, Inc
          type: string
        external_id:
          description: organization's unique external ID within Rockset
          example: <hash>
          type: string
        id:
          description: unique identifier for the organization
          example: rockset
          type: string
        rockset_user:
          description: Rockset's global AWS user
          example: <id>
          type: string
      type: object
    OrganizationResponse:
      additionalProperties: false
      properties:
        data:
          $ref: "#/components/schemas/Organization"
          description: Organization object
      type: object
    OutputField:
      additionalProperties: false
      properties:
        field_name:
          description: "The name of a field, parsed as a SQL qualified name "
          example: zip_hash
          type: string
        on_error:
          description: "Error in Mapping execution: 'skip' or 'fail' "
          enum:
            - SKIP
            - FAIL
          example: SKIP
          type: string
        value:
          $ref: "#/components/schemas/SqlExpression"
          description: The name of a sql function
          example: SHA256(:zip)
      type: object
    Pagination:
      additionalProperties: false
      properties:
        start_cursor:
          description:
            Use this cursor to fetch the first page of results for this
            query.
          example: vZNDIBi_E_cIwjo8ZbFl7XcxXxd4VfwjB7Q5CF6tplw0RqNgyG7q4sPuHUTBhYnrg
          type: string
      type: object
    PaginationInfo:
      additionalProperties: false
      properties:
        current_page_doc_count:
          description: Number of documents returned in this result set
          example: 1000
          format: int64
          type: integer
        next_cursor:
          description: Cursor to use to get the list of documents
          example: testnextcursor
          type: string
        next_cursor_offset:
          description: The doc offset that next_cursor starts at.
          example: 2000
          format: int64
          type: integer
        next_page_link:
          description: Direct link to the next page of results.
          example: https://api.rs2.usw2.rockset.com/....
          readOnly: true
          type: string
        start_cursor:
          description: Cursor used to retrieve the first set of documents.
          example: startcursor
          type: string
      type: object
    PatchDocument:
      additionalProperties: false
      properties:
        _id:
          description: Unique ID of the document to be patched.
          example: ca2d6832-1bfd-f88f-0620-d2aa27a5d86c
          type: string
        patch:
          description: List of patch operations.
          items:
            $ref: "#/components/schemas/PatchOperation"
          type: array
      required:
        - _id
        - patch
      type: object
    PatchDocumentsRequest:
      additionalProperties: false
      properties:
        data:
          description: List of patches to be applied.
          items:
            $ref: "#/components/schemas/PatchDocument"
          type: array
      required:
        - data
      type: object
    PatchDocumentsResponse:
      additionalProperties: false
      properties:
        data:
          items:
            $ref: "#/components/schemas/DocumentStatus"
          type: array
      required:
        - data
      type: object
    PatchOperation:
      additionalProperties: false
      properties:
        from:
          description:
            "[JSON Pointer](https://datatracker.ietf.org/doc/html/rfc6901)
            referencing a location in the target document. Required for `COPY` and
            `MOVE` operations."
          type: string
        op:
          description:
            "[JSON Patch operation](https://datatracker.ietf.org/doc/html/rfc6902#page-4)
            to be performed in this patch. Case insensitive."
          enum:
            - ADD
            - REPLACE
            - REMOVE
            - COPY
            - MOVE
            - TEST
            - INCREMENT
          example: ADD
          type: string
        path:
          description:
            "[JSON Pointer](https://datatracker.ietf.org/doc/html/rfc6901)
            referencing a location in the target document where the operation is performed"
          example: /foo/bar
          type: string
        value:
          description:
            Value used in the patch operation. Required for `ADD`, `REPLACE`,
            `TEST`, and `INCREMENT` operations.
          example: baz
          type: object
      required:
        - op
        - path
      type: object
    Privilege:
      additionalProperties: false
      properties:
        action:
          description: The action allowed by this privilege.
          enum:
            - ALL_GLOBAL_ACTIONS
            - GET_ORG_GLOBAL
            - GET_CURRENT_USER_GLOBAL
            - INVITE_USER_GLOBAL
            - DELETE_USER_GLOBAL
            - LIST_USERS_GLOBAL
            - GET_BILLING_GLOBAL
            - UPDATE_BILLING_GLOBAL
            - UPDATE_SETTINGS_GLOBAL
            - GET_METRICS_GLOBAL
            - UPDATE_VI_GLOBAL
            - LIST_VI_GLOBAL
            - CREATE_WS_GLOBAL
            - LIST_WS_GLOBAL
            - CREATE_INTEGRATION_GLOBAL
            - DELETE_INTEGRATION_GLOBAL
            - LIST_INTEGRATIONS_GLOBAL
            - UPDATE_RESOURCE_OWNER_GLOBAL
            - CREATE_API_KEY_GLOBAL
            - CREATE_ROLE_GLOBAL
            - UPDATE_ROLE_GLOBAL
            - DELETE_ROLE_GLOBAL
            - LIST_ROLES_GLOBAL
            - GRANT_REVOKE_ROLE_GLOBAL
            - ALL_INTEGRATION_ACTIONS
            - CREATE_COLLECTION_INTEGRATION
            - ALL_WORKSPACE_ACTIONS
            - DELETE_WS
            - QUERY_DATA_WS
            - WRITE_DATA_WS
            - CREATE_COLLECTION_WS
            - DELETE_COLLECTION_WS
            - CREATE_ALIAS_WS
            - DELETE_ALIAS_WS
            - LIST_RESOURCES_WS
            - CREATE_QUERY_LAMBDA_WS
            - DELETE_QUERY_LAMBDA_WS
            - EXECUTE_QUERY_LAMBDA_WS
            - CREATE_VIEW_WS
            - DELETE_VIEW_WS
          example: CREATE_COLLECTION_WS
          type: string
        cluster:
          description:
            Cluster ID (`rs2` for us-west-2, `use1a1` for us-east-1) for
            which the action is allowed. Defaults to '*All*' if not specified.
          example: "*ALL*"
          type: string
        resource_name:
          description:
            The resources on which the action is allowed. Defaults to '*All*'
            if not specified.
          example: commons
          type: string
      type: object
    QueryError:
      additionalProperties: false
      properties:
        message:
          description:
            A message associated with the error, containing more information
            about it
          example: Too many rows
          type: string
        status_code:
          description:
            The HTTP status code associated with this error, had it been
            sent as the response status code
          example: 429
          format: int32
          type: integer
        type:
          description: The type of error
          example: ResourceExceeded
          type: string
      type: object
    QueryFieldType:
      additionalProperties: false
      properties:
        name:
          description: name of the field
          example: _id
          type: string
        type:
          description: data type of the field
          example: string
          type: string
      required:
        - name
        - type
      type: object
    QueryInfo:
      additionalProperties: false
      properties:
        executed_by:
          description: User ID who executed the query
          example: xyz@rockset.com
          type: string
        expires_at:
          description:
            Time (UTC) that query results expire. Only populated if `status`
            is `COMPLETE`.
          example: "2001-08-28T00:23:41Z"
          type: string
        last_offset:
          description:
            The log offset that query results were written to in the destination
            collection. Only populated for INSERT INTO queries.
          type: string
        pagination:
          $ref: "#/components/schemas/Pagination"
          description:
            Information for fetching query results pages. Only populated
            if `status` is `COMPLETE`.
        query_errors:
          description: Errors encountered while executing the query.
          items:
            $ref: "#/components/schemas/QueryError"
          type: array
        query_id:
          description: Unique Query ID.
          example: 5b596206-c632-4a08-8343-0c560f7ef7f1
          type: string
        stats:
          $ref: "#/components/schemas/Stats"
          description: Various stats about the query's execution.
        status:
          description: Status of the query.
          enum:
            - QUEUED
            - RUNNING
            - COMPLETED
            - ERROR
            - CANCELLED
          example: RUNNING
          type: string
        submitted_at:
          description:
            Time (UTC) the query request was first received and queued
            for execution.
          example: "2001-08-28T00:23:41Z"
          type: string
      type: object
    QueryLambda:
      additionalProperties: false
      properties:
        collections:
          description: collections/aliases queried by underlying SQL query
          items:
            type: string
          type: array
        last_updated:
          description: ISO-8601 date of when Query Lambda was last updated
          example: "2001-08-28T00:23:41Z"
          type: string
        last_updated_by:
          description: user that created this Query Lambda
          example: ..@rockset.com
          type: string
        latest_version:
          $ref: "#/components/schemas/QueryLambdaVersion"
          description: Query Lambda version details for most recently created version
        name:
          description: Query Lambda name
          example: myQuery
          type: string
        version_count:
          description: number of Query Lambda versions
          example: 1
          format: int32
          type: integer
        workspace:
          description: workspace of this Query Lambda
          example: commons
          type: string
      type: object
    QueryLambdaSql:
      additionalProperties: false
      properties:
        default_parameters:
          description: default parameters for this Query Lambda
          items:
            $ref: "#/components/schemas/QueryParameter"
          type: array
        query:
          description: SQL text
          example: SELECT 'Foo'
          type: string
      required:
        - query
      type: object
    QueryLambdaStats:
      additionalProperties: false
      properties:
        last_executed:
          description: ISO-8601 date
          example: "2001-08-28T00:23:41Z"
          type: string
        last_executed_by:
          description: user who last executed Query Lambda
          example: "...@rockset.com"
          type: string
        last_execution_error:
          description: ISO-8601 date of last execution failure
          example: "2001-08-28T00:23:41Z"
          type: string
        last_execution_error_message:
          description: error message associated with last failed execution
          example: "[error message]"
          type: string
      type: object
    QueryLambdaTag:
      additionalProperties: false
      properties:
        tag_name:
          description: name of Query Lambda tag
          example: production
          type: string
        version:
          $ref: "#/components/schemas/QueryLambdaVersion"
          description: query lambda version
          example: b1d7c9a34b50cd
      type: object
    QueryLambdaTagResponse:
      additionalProperties: false
      properties:
        data:
          $ref: "#/components/schemas/QueryLambdaTag"
          description: updated Query Lambda tag
      type: object
    QueryLambdaVersion:
      additionalProperties: false
      properties:
        collections:
          description: collections queried by underlying SQL query
          items:
            type: string
          type: array
        created_at:
          description: ISO-8601 date of when Query Lambda was created
          example: "2001-08-28T00:23:41Z"
          type: string
        created_by:
          description: user that created this Query Lambda
          example: ..@rockset.com
          type: string
        description:
          description: optional description
          example: production version foo
          type: string
        name:
          description: Query Lambda name
          example: myQuery
          type: string
        sql:
          $ref: "#/components/schemas/QueryLambdaSql"
          description: Query Lambda SQL query
        state:
          description: status of this Query Lambda
          enum:
            - ACTIVE
            - INVALID_SQL
          example: ACTIVE
          type: string
        stats:
          $ref: "#/components/schemas/QueryLambdaStats"
          description: stats related to this Query Lambda
        version:
          description: Query Lambda version
          example: acb99feg92bcaf
          type: string
        workspace:
          description: workspace of this Query Lambda
          example: commons
          type: string
      type: object
    QueryLambdaVersionResponse:
      additionalProperties: false
      properties:
        data:
          $ref: "#/components/schemas/QueryLambdaVersion"
          description: Query Lambda version details
      type: object
    QueryPaginationResponse:
      additionalProperties: false
      properties:
        pagination:
          $ref: "#/components/schemas/PaginationInfo"
          description: Pagination metadata
        results:
          description: List of documents returned by the query
          items:
            type: object
          type: array
        results_total_doc_count:
          description: Total documents returned by the query
          format: int64
          type: integer
      type: object
    QueryParameter:
      additionalProperties: false
      properties:
        name:
          description: name of the field
          example: _id
          type: string
        type:
          description: data type of the field
          example: string
          type: string
        value:
          description: literal value of the field
          example: 85beb391
          type: string
      required:
        - name
        - type
        - value
      type: object
    QueryRequest:
      additionalProperties: false
      properties:
        async_options:
          $ref: "#/components/schemas/AsyncQueryOptions"
          description: Options for configuring Asynchronous Query Mode (beta).
        sql:
          $ref: "#/components/schemas/QueryRequestSql"
          description: Main query request body.
      required:
        - sql
      type: object
    QueryRequestSql:
      additionalProperties: false
      properties:
        default_row_limit:
          description:
            Row limit to use. Limits specified in the query text will override
            this default.
          format: int32
          type: integer
        generate_warnings:
          description:
            Flag to enable warnings. Warnings can help debug query issues
            but negatively affect performance.
          type: boolean
        initial_paginate_response_doc_count:
          description:
            Number of documents to return in addition to paginating for
            this query call. Only relevant if `paginate` flag is also set.
          format: int32
          type: integer
        paginate:
          description:
            Flag to paginate and store the results of this query for later
            / sequential retrieval.
          type: boolean
        parameters:
          description: List of named parameters.
          items:
            $ref: "#/components/schemas/QueryParameter"
          type: array
        query:
          description: SQL query string.
          example: SELECT * FROM foo where _id = :_id
          type: string
      required:
        - query
      type: object
    QueryResponse:
      additionalProperties: false
      properties:
        collections:
          description: List of collections referenced in the query.
          items:
            type: string
          type: array
        column_fields:
          description:
            Meta information about each column in the result set. Not populated
            in `SELECT *` queries.
          items:
            $ref: "#/components/schemas/QueryFieldType"
          type: array
        last_offset:
          description:
            If this was a write query, this is the log offset the query
            was written to
          type: string
        pagination:
          $ref: "#/components/schemas/PaginationInfo"
          description:
            Pagination information. Only populated if `paginate` is specified
            in the query request.
        query_errors:
          description: Errors encountered while executing the query.
          items:
            $ref: "#/components/schemas/QueryError"
          type: array
        query_id:
          description: Unique ID for this query.
          type: string
        query_lambda_path:
          description:
            The full path of the executed query lambda. Includes version
            information.
          type: string
        results:
          description: Results from the query.
          items:
            type: object
          type: array
        results_total_doc_count:
          description: Number of results generated by the query
          format: int64
          type: integer
        stats:
          $ref: "#/components/schemas/QueryResponseStats"
          description: Meta information about the query including execution latencies.
        warnings:
          description:
            Warnings generated by the query. Only populated if `generate_warnings`
            is specified in the query request.
          items:
            type: string
          type: array
      type: object
    QueryResponseStats:
      additionalProperties: false
      properties:
        elapsed_time_ms:
          description: query time in milliseconds
          example: 126
          format: int64
          type: integer
        throttled_time_micros:
          description: time query was throttled by admission control
          example: 126
          format: int64
          type: integer
      type: object
    Role:
      additionalProperties: false
      properties:
        created_at:
          description: ISO-8601 date of when the role was created.
          example: "2001-08-28T00:23:41Z"
          type: string
        created_by:
          description: Email of the user who created the role.
          example: hello@rockset.com
          type: string
        description:
          description: Description for the role.
          example: Role with read and write privileges to all collections.
          type: string
        owner_email:
          description: Email of the user who currently owns the role.
          example: hello@rockset.com
          type: string
        privileges:
          description: List of privileges associated with the role.
          items:
            $ref: "#/components/schemas/Privilege"
          type: array
        role_name:
          description: Unique identifier for the role.
          example: read_write
          type: string
      type: object
    RoleResponse:
      additionalProperties: false
      properties:
        data:
          $ref: "#/components/schemas/Role"
      type: object
    S3CollectionCreationRequest:
      additionalProperties: false
      properties:
        clustering_key:
          description: list of clustering fields
          items:
            $ref: "#/components/schemas/FieldPartition"
          type: array
        description:
          description: text describing the collection
          example: transactions from stores worldwide
          type: string
        event_time_info:
          $ref: "#/components/schemas/EventTimeInfo"
          description: configuration for event data
        field_mapping_query:
          $ref: "#/components/schemas/FieldMappingQuery"
          description: Mapping of fields for a collection
        field_mappings:
          description: list of mappings
          items:
            $ref: "#/components/schemas/FieldMappingV2"
          type: array
        insert_only:
          description:
            If true disallows updates and deletes, but makes indexing more
            efficient
          type: boolean
        name:
          description:
            unique identifier for collection, can contain alphanumeric
            or dash characters
          example: global-transactions
          type: string
        retention_secs:
          description:
            number of seconds after which data is purged, based on event
            time
          example: 1000000
          format: int64
          type: integer
        sources:
          description: List of sources from which to ingest data
          items:
            $ref: "#/components/schemas/S3SourceWrapper"
          type: array
      required:
        - name
      type: object
    S3Integration:
      additionalProperties: false
      properties:
        aws_access_key:
          $ref: "#/components/schemas/AwsAccessKey"
          description: credentials for an AWS access key integration
        aws_role:
          $ref: "#/components/schemas/AwsRole"
          description: details of an AWS cross-account role integration
      type: object
    S3IntegrationCreationRequest:
      additionalProperties: false
      properties:
        description:
          description: longer explanation for the integration
          example: AWS account with event data for the data science team.
          type: string
        name:
          description: descriptive label
          example: event-logs
          type: string
        s3:
          $ref: "#/components/schemas/S3Integration"
          description: Amazon S3 details, must have one of aws_access_key or aws_role
      required:
        - name
      type: object
    S3SourceWrapper:
      additionalProperties: false
      description: Details about the data source for the given collection.
      properties:
        format_params:
          $ref: "#/components/schemas/FormatParams"
          description: format parameters for data from this source
        integration_name:
          description: name of integration to use
          example: aws-integration
          type: string
        s3:
          $ref: "#/components/schemas/SourceS3"
          description: configuration for ingestion from S3
        status:
          allOf:
            - $ref: "#/components/schemas/Status"
              description: the ingest status of this source
          readOnly: true
      type: object
      x-inner-field: s3
    SchemaRegistryConfig:
      additionalProperties: false
      properties:
        key:
          description: The secure API key for schema registry
          type: string
        secret:
          description: The secure API password registry
          type: string
        url:
          description: Schema registry URL
          type: string
      type: object
    SegmentIntegration:
      additionalProperties: false
      properties:
        connection_string:
          description: segment connection string
          readOnly: true
          type: string
      type: object
    SegmentIntegrationCreationRequest:
      additionalProperties: false
      properties:
        description:
          description: longer explanation for the integration
          example: AWS account with event data for the data science team.
          type: string
        name:
          description: descriptive label
          example: event-logs
          type: string
        segment:
          $ref: "#/components/schemas/SegmentIntegration"
      required:
        - name
      type: object
    SnowflakeCollectionCreationRequest:
      additionalProperties: false
      properties:
        clustering_key:
          description: list of clustering fields
          items:
            $ref: "#/components/schemas/FieldPartition"
          type: array
        description:
          description: text describing the collection
          example: transactions from stores worldwide
          type: string
        event_time_info:
          $ref: "#/components/schemas/EventTimeInfo"
          description: configuration for event data
        field_mapping_query:
          $ref: "#/components/schemas/FieldMappingQuery"
          description: Mapping of fields for a collection
        field_mappings:
          description: list of mappings
          items:
            $ref: "#/components/schemas/FieldMappingV2"
          type: array
        insert_only:
          description:
            If true disallows updates and deletes, but makes indexing more
            efficient
          type: boolean
        name:
          description:
            unique identifier for collection, can contain alphanumeric
            or dash characters
          example: global-transactions
          type: string
        retention_secs:
          description:
            number of seconds after which data is purged, based on event
            time
          example: 1000000
          format: int64
          type: integer
        sources:
          description: List of sources from which to ingest data
          items:
            $ref: "#/components/schemas/SnowflakeSourceWrapper"
          type: array
      required:
        - name
      type: object
    SnowflakeIntegration:
      additionalProperties: false
      properties:
        aws_access_key:
          $ref: "#/components/schemas/AwsAccessKey"
          description: credentials for an AWS access key integration
        aws_role:
          $ref: "#/components/schemas/AwsRole"
          description: details of an AWS cross-account role integration
        default_warehouse:
          description:
            default snowflake data warehouse name for query execution.
            Warehouse name can be overridden in the collection.
          type: string
        password:
          description: snowflake database password
          type: string
        s3_export_path:
          description: S3 path used for running 'COPY INTO' command on snowflake table
          example: s3://bucket/prefix
          type: string
        snowflake_url:
          description: snowflake browser url
          example: acme-marketing-test-account.snowflakecomputing.com
          type: string
        user_role:
          description:
            snowflake user role. If unspecified, will use the default user
            role.
          type: string
        username:
          description: snowflake database username
          type: string
      required:
        - default_warehouse
        - password
        - s3_export_path
        - snowflake_url
        - username
      type: object
    SnowflakeIntegrationCreationRequest:
      additionalProperties: false
      properties:
        description:
          description: longer explanation for the integration
          example: AWS account with event data for the data science team.
          type: string
        name:
          description: descriptive label
          example: event-logs
          type: string
        snowflake:
          $ref: "#/components/schemas/SnowflakeIntegration"
      required:
        - name
      type: object
    SnowflakeSourceWrapper:
      additionalProperties: false
      description: Details about the data source for the given collection.
      properties:
        format_params:
          $ref: "#/components/schemas/FormatParams"
          description: format parameters for data from this source
        integration_name:
          description: name of integration to use
          example: aws-integration
          type: string
        snowflake:
          $ref: "#/components/schemas/SourceSnowflake"
          description: configuration for ingestion from Snowflake
        status:
          allOf:
            - $ref: "#/components/schemas/Status"
              description: the ingest status of this source
          readOnly: true
      type: object
      x-inner-field: snowflake
    Source:
      additionalProperties: false
      description:
        "Details about the data source for the given collection. Only one
        of the following fields are allowed to be defined. Only collections can act
        as data sources for views. "
      properties:
        format_params:
          $ref: "#/components/schemas/FormatParams"
          description: format parameters for data from this source
        integration_name:
          description: name of integration to use
          example: aws-integration
          type: string
        status:
          allOf:
            - $ref: "#/components/schemas/Status"
              description: the ingest status of this source
          readOnly: true
      type: object
    SourceAzureBlobStorage:
      additionalProperties: false
      properties:
        blob_bytes_total:
          format: int64
          readOnly: true
          type: integer
        blob_count_downloaded:
          format: int64
          readOnly: true
          type: integer
        blob_count_total:
          format: int64
          readOnly: true
          type: integer
        container:
          description: name of Azure blob Storage container you want to ingest from
          example: server-logs
          type: string
        pattern:
          description:
            Glob-style pattern that selects keys to ingest. Only either
            prefix or pattern can be specified.
          example: prefix/to/**/keys/*.format
          type: string
        prefix:
          description: Prefix that selects blobs to ingest.
          example: prefix/to/blobs
          type: string
      type: object
    SourceAzureEventHubs:
      additionalProperties: false
      properties:
        hub_id:
          description: name of the hub which rockset should ingest from
          example: event-hub-1
          type: string
        offset_reset_policy:
          description: The offset reset policy.
          enum:
            - LATEST
            - EARLIEST
          example: EARLIEST
          type: string
        status:
          allOf:
            - $ref: "#/components/schemas/StatusAzureEventHubs"
              description: source status
          readOnly: true
      type: object
    SourceAzureServiceBus:
      additionalProperties: false
      properties:
        status:
          allOf:
            - $ref: "#/components/schemas/StatusAzureServiceBus"
              description: Azure Service bus source status
          readOnly: true
        subscription:
          description: the subscription to read from the topic
          example: rockset-subscription
          type: string
        topic:
          description: name of the topic which rockset should ingest from
          example: rockset-topic
          type: string
      type: object
    SourceDynamoDb:
      additionalProperties: false
      properties:
        aws_region:
          description:
            AWS region name of DynamoDB table, by default us-west-2 is
            used
          example: us-east-2
          type: string
        current_status:
          allOf:
            - $ref: "#/components/schemas/StatusDynamoDbV2"
              description: DynamoDB source status v2
          readOnly: true
        rcu:
          description: Max RCU usage for scan
          example: 1000
          format: int64
          type: integer
        status:
          allOf:
            - $ref: "#/components/schemas/StatusDynamoDb"
              description: DynamoDB source status
          readOnly: true
        table_name:
          description: name of DynamoDB table containing data
          example: dynamodb_table_name
          type: string
        use_scan_api:
          description: Whether to use DynamoDB Scan API for the initial scan
          type: boolean
      required:
        - table_name
      type: object
    SourceFileUpload:
      additionalProperties: false
      properties:
        file_name:
          description: name of the file
          example: file1.json
          type: string
        file_size:
          description: size of the file in bytes
          example: 12345
          format: int64
          type: integer
        file_upload_time:
          description: time of file upload
          example: "2019-01-15T21:48:23Z"
          type: string
      required:
        - file_name
        - file_size
        - file_upload_time
      type: object
    SourceGcs:
      additionalProperties: false
      properties:
        bucket:
          description: name of GCS bucket you want to ingest from
          example: server-logs
          type: string
        object_bytes_total:
          format: int64
          readOnly: true
          type: integer
        object_count_downloaded:
          format: int64
          readOnly: true
          type: integer
        object_count_total:
          format: int64
          readOnly: true
          type: integer
        pattern:
          description:
            Glob-style pattern that selects keys to ingest. Only either
            prefix or pattern can be specified.
          example: prefix/to/**/keys/*.format
          type: string
        prefix:
          description: Prefix that selects keys to ingest.
          example: prefix/to/keys
          type: string
      type: object
    SourceKafka:
      additionalProperties: false
      properties:
        consumer_group_id:
          description: The Kafka consumer group Id being used
          example: org-collection
          type: string
        kafka_topic_name:
          description: The Kafka topic to be tailed
          example: example-topic
          type: string
        offset_reset_policy:
          enum:
            - LATEST
            - EARLIEST
          type: string
        status:
          allOf:
            - $ref: "#/components/schemas/StatusKafka"
              description: Kafka source status
          readOnly: true
        use_v3:
          type: boolean
      required:
        - kafka_topic_name
      type: object
    SourceKinesis:
      additionalProperties: false
      properties:
        aws_region:
          description:
            AWS region name of Kinesis stream, by default us-west-2 is
            used
          example: us-east-2
          type: string
        dms_primary_key:
          description: set of fields that correspond to a DMS primary key
          items:
            type: string
          type: array
        offset_reset_policy:
          description:
            For non-DMS streams, Rockset can tail from the earliest end
            or latest end of kinesis source.
          enum:
            - LATEST
            - EARLIEST
          example: EARLIEST
          type: string
        stream_name:
          description: name of kinesis stream
          example: click_stream
          type: string
      required:
        - stream_name
      type: object
    SourceMongoDb:
      additionalProperties: false
      properties:
        collection_name:
          description: MongoDB collection name
          example: my_collection
          type: string
        database_name:
          description: MongoDB database name containing this collection
          example: my_database
          type: string
        status:
          allOf:
            - $ref: "#/components/schemas/StatusMongoDb"
              description: MongoDB source status
          readOnly: true
      required:
        - collection_name
        - database_name
      type: object
    SourceS3:
      additionalProperties: false
      properties:
        bucket:
          description: address of S3 bucket containing data
          example: s3://customer-account-info
          type: string
        object_bytes_total:
          format: int64
          readOnly: true
          type: integer
        object_count_downloaded:
          format: int64
          readOnly: true
          type: integer
        object_count_total:
          format: int64
          readOnly: true
          type: integer
        pattern:
          description:
            Glob-style pattern that selects keys to ingest. Only either
            prefix or pattern can be specified.
          example: prefix/to/**/keys/*.format
          type: string
        prefix:
          description: Prefix that selects keys to ingest.
          example: prefix/to/keys
          type: string
        prefixes:
          description: list of prefixes to paths from which data should be ingested
          example:
            - /transactions
            - /stores
          items:
            type: string
          readOnly: true
          type: array
        region:
          description: AWS region containing source bucket
          example: us-west-2
          type: string
      required:
        - bucket
        - prefixes
      type: object
    SourceSnowflake:
      additionalProperties: false
      properties:
        database:
          description: name of the snowflake database
          example: NASDAQ
          type: string
        schema:
          description: name of the snowflake database schema
          example: PUBLIC
          type: string
        status:
          allOf:
            - $ref: "#/components/schemas/StatusSnowflake"
              description: Snowflake source status
          readOnly: true
        table_name:
          description: name of the snowflake table
          example: COMPANIES
          type: string
        warehouse:
          description: name of the data warehouse to be used
          example: COMPUTE_XL
          type: string
      required:
        - database
        - schema
        - table_name
      type: object
    SqlExpression:
      additionalProperties: false
      properties:
        sql:
          description: The name of a sql function
          example: SHA256()
          type: string
      type: object
    Stats:
      additionalProperties: false
      properties:
        elapsed_time_ms:
          description:
            Total execution time (including time queued) of the query,
            in milliseconds.
          example: 128
          format: int64
          type: integer
        result_set_bytes_size:
          description:
            Number of bytes in the query result set. Only populated if
            `status` is `COMPLETE`. Not populated for INSERT INTO queries.
          example: 1235
          format: int64
          type: integer
        result_set_document_count:
          description:
            Number of documents returned by the query. Only populated if
            `status` is `COMPLETE`.
          example: 1235
          format: int64
          type: integer
        throttled_time_ms:
          description: Time query spent queued, in milliseconds.
          example: 16
          format: int64
          type: integer
      type: object
    Status:
      additionalProperties: false
      properties:
        last_processed_at:
          description: ISO-8601 date when source was last processed
          example: "2019-01-15T21:48:23Z"
          type: string
        last_processed_item:
          description: last source item processed by ingester
          example: /path/to/some/object
          type: string
        message:
          description: state message
          example: error 403 forbidden
          type: string
        state:
          description:
            "Status of the Source's ingestion, one of: INITIALIZING, WATCHING,
            PROCESSING, COMPLETED, ERROR"
          enum:
            - INITIALIZING
            - WATCHING
            - PROCESSING
            - COMPLETED
            - ERROR
          example: INITIALIZING
          type: string
        total_processed_items:
          description: Total items processed of source
          example: 32849023
          format: int64
          type: integer
      type: object
    StatusAzureEventHubs:
      additionalProperties: false
      properties:
        last_consumed_time:
          description: Time at which the last document was consumed
          example: "2001-08-28T00:23:41Z"
          type: string
        num_documents_processed:
          description: Number of documents consumed
          example: 1337
          format: int64
          type: integer
        partitions:
          description: Status info per partition
          items:
            $ref: "#/components/schemas/StatusAzureEventHubsPartition"
          type: array
        state:
          description: State of the source
          enum:
            - NO_DOCS_YET
            - ACTIVE
            - DORMANT
          example: ACTIVE
          type: string
      type: object
    StatusAzureEventHubsPartition:
      additionalProperties: false
      properties:
        offset_lag:
          description: Per partition lag for offset
          example: 10
          format: int64
          type: integer
        partition_number:
          description: The number of this partition
          example: 123
          format: int32
          type: integer
        partition_offset:
          description: Latest offset of partition
          example: 100
          format: int64
          type: integer
      type: object
    StatusAzureServiceBus:
      additionalProperties: false
      properties:
        first_processed_at:
          description: Service Bus first message processed time in ISO-8601 format
          example: "2021-08-28T00:23:41Z"
          type: string
        records_processed:
          description: Number of records processed
          example: 1000
          format: int64
          type: integer
        sessions:
          additionalProperties:
            $ref: "#/components/schemas/StatusAzureServiceBusSession"
          description: Sessions processed
          type: object
      type: object
    StatusAzureServiceBusSession:
      additionalProperties: false
      properties:
        last_processed:
          description:
            Most recent ISO-8601 date when a message from this session
            was processed
          example: "2022-08-23T00:13:41Z"
          type: string
        sequence_number:
          description: The last processed sequence number within this session
          example: 323862
          format: int64
          type: integer
      type: object
    StatusDynamoDb:
      additionalProperties: false
      properties:
        scan_end_time:
          description: DynamoDb scan end time
          example: "2001-08-28T00:23:41Z"
          type: string
        scan_records_processed:
          description: Number of records inserted using scan
          example: 1000
          format: int64
          type: integer
        scan_start_time:
          description: DynamoDB scan start time
          example: "2001-08-28T00:23:41Z"
          type: string
        scan_total_records:
          description: Number of records in DynamoDB table at time of scan
          example: 2000
          format: int64
          type: integer
        state:
          description: state of current ingest for this table
          enum:
            - INITIALIZING
            - SCANNING_TABLE
            - PROCESSING_STREAM
          example: SCANNING_TABLE
          type: string
        stream_last_processed_at:
          description: ISO-8601 date when source was last processed
          example: "2019-01-15T21:48:23Z"
          type: string
      type: object
    StatusDynamoDbV2:
      additionalProperties: false
      properties:
        initial_dump_completion_percentage:
          example: 0.73
          format: double
          type: number
        state:
          description: state of current ingest for this table
          enum:
            - INITIALIZING
            - SCANNING
            - EXPORTING_TO_S3
            - DOWNLOADING_FROM_S3
            - PROCESSING_STREAM
          example: PROCESSING_STREAM
          type: string
        stream_last_processed_at:
          description: ISO-8601 date when source was last processed
          example: "2019-01-15T21:48:23Z"
          type: string
      type: object
    StatusKafka:
      additionalProperties: false
      properties:
        kafka_partitions:
          description: Status info per partition
          items:
            $ref: "#/components/schemas/StatusKafkaPartition"
          type: array
        last_consumed_time:
          description: Time at which the last document was consumed from Kafka
          example: "2001-08-28T00:23:41Z"
          type: string
        num_documents_processed:
          description: Number of documents consumed by this Kafka topic
          example: 1337
          format: int64
          type: integer
        state:
          description: State of the Kafka source
          enum:
            - NO_DOCS_YET
            - ACTIVE
            - DORMANT
          example: ACTIVE
          type: string
      type: object
    StatusKafkaPartition:
      additionalProperties: false
      properties:
        offset_lag:
          description: Per partition lag for offset
          example: 10
          format: int64
          type: integer
        partition_number:
          description: The number of this partition
          example: 123
          format: int32
          type: integer
        partition_offset:
          description: Latest offset of partition
          example: 100
          format: int64
          type: integer
      type: object
    StatusMongoDb:
      additionalProperties: false
      properties:
        scan_end_time:
          description: MongoDB scan end time
          example: "2001-08-28T00:23:41Z"
          type: string
        scan_records_processed:
          description: Number of records inserted using scan
          example: 1000
          format: int64
          type: integer
        scan_start_time:
          description: MongoDB scan start time
          example: "2001-08-28T00:23:41Z"
          type: string
        scan_total_records:
          description: Number of records in MongoDB table at time of scan
          example: 2000
          format: int64
          type: integer
        state:
          description: state of current ingest for this table
          enum:
            - INITIALIZING
            - SCANNING_TABLE
            - PROCESSING_STREAM
          example: SCANNING_TABLE
          type: string
        stream_last_delete_processed_at:
          description: ISO-8601 date when delete from source was last processed
          example: "2019-01-15T21:48:23Z"
          type: string
        stream_last_insert_processed_at:
          description: ISO-8601 date when new insert from source was last processed
          example: "2019-01-15T21:48:23Z"
          type: string
        stream_last_update_processed_at:
          description: ISO-8601 date when update from source was last processed
          example: "2019-01-15T21:48:23Z"
          type: string
        stream_records_deleted:
          description: Number of new records deleted using stream
          example: 100
          format: int64
          type: integer
        stream_records_inserted:
          description: Number of new records inserted using stream
          example: 10000
          format: int64
          type: integer
        stream_records_updated:
          description: Number of new records updated using stream
          example: 1000
          format: int64
          type: integer
      type: object
    StatusSnowflake:
      additionalProperties: false
      properties:
        state:
          description: state of current ingest for this table
          enum:
            - INITIALIZING
            - EXPORTING_TO_S3
            - DOWNLOADING_FROM_S3
            - COMPLETED
          example: EXPORTING_TO_S3
          type: string
      type: object
    UnsubscribePreference:
      additionalProperties: false
      description: Notification preferences for the user.
      properties:
        notificationType:
          description: The type of notification to be unsubscribed from.
          example: create_apikey
          type: string
      required:
        - notificationType
      type: object
    UpdateAliasRequest:
      additionalProperties: false
      properties:
        collections:
          description: list of fully qualified collection names referenced by alias
          example:
            - commons.foo
            - prod.demo
          items:
            type: string
          type: array
        description:
          description: optional description
          example: version alias
          type: string
      required:
        - collections
      type: object
    UpdateApiKeyRequest:
      additionalProperties: false
      properties:
        state:
          description: State that the api key should be set to.
          enum:
            - ACTIVE
            - SUSPENDED
          example: ACTIVE
          type: string
      type: object
    UpdateApiKeyResponse:
      additionalProperties: false
      properties:
        data:
          $ref: "#/components/schemas/ApiKey"
          description: The API key that was updated.
      type: object
    UpdateQueryLambdaRequest:
      additionalProperties: false
      properties:
        description:
          description: optional description
          example: production version foo
          type: string
        sql:
          $ref: "#/components/schemas/QueryLambdaSql"
          description: Query Lambda SQL query
      type: object
    UpdateRoleRequest:
      additionalProperties: false
      properties:
        description:
          description: Description for the role.
          example: Role with read and write privileges to all collections.
          type: string
        privileges:
          description: List of privileges that will be associated with the role.
          items:
            $ref: "#/components/schemas/Privilege"
          type: array
      type: object
    UpdateUnsubscribePreferencesRequest:
      additionalProperties: false
      properties:
        data:
          description: List of notification preferences
          items:
            $ref: "#/components/schemas/UnsubscribePreference"
          type: array
      type: object
    UpdateUnsubscribePreferencesResponse:
      additionalProperties: false
      properties:
        data:
          description: List of notification preferences
          items:
            $ref: "#/components/schemas/UnsubscribePreference"
          type: array
      type: object
    UpdateViewRequest:
      additionalProperties: false
      properties:
        description:
          description: optional description
          example: view of awesome collection
          type: string
        query:
          description: SQL for this view
          example: SELECT * FROM foo
          type: string
      required:
        - query
      type: object
    UpdateViewResponse:
      additionalProperties: false
      properties:
        data:
          $ref: "#/components/schemas/View"
          description: view that was updated
      type: object
    UpdateVirtualInstanceRequest:
      additionalProperties: false
      properties:
        monitoring_enabled:
          type: boolean
        new_size:
          description: requested virtual instance size
          enum:
            - FREE
            - NANO
            - SHARED
            - SMALL
            - MEDIUM
            - LARGE
            - XLARGE
            - XLARGE2
            - XLARGE4
            - XLARGE8
            - XLARGE16
          example: LARGE
          type: string
        new_type:
          enum:
            - FREE
            - NANO
            - SHARED
            - SMALL
            - MEDIUM
            - LARGE
            - XLARGE
            - XLARGE2
            - XLARGE4
            - XLARGE8
            - XLARGE16
          type: string
      type: object
    UpdateVirtualInstanceResponse:
      additionalProperties: false
      properties:
        data:
          $ref: "#/components/schemas/VirtualInstance"
          description: virtual instance that was switched
      type: object
    User:
      additionalProperties: false
      properties:
        created_at:
          description: ISO-8601 date
          example: "2001-08-28T00:23:41Z"
          type: string
        email:
          description: user email
          example: hello@rockset.com
          type: string
        first_name:
          description: user first name
          example: John
          type: string
        last_name:
          description: user last name
          example: Doe
          type: string
        roles:
          description: List of roles for a given user
          example:
            - admin
            - member
            - read-only
          items:
            type: string
          type: array
        state:
          description: state of user - NEW / ACTIVE
          example: ACTIVE
          type: string
      required:
        - email
      type: object
    ValidateQueryResponse:
      additionalProperties: false
      properties:
        collections:
          description: list of collections specified in query
          example:
            - commons.foo
          items:
            type: string
          type: array
        parameters:
          description: list of parameters specified in query
          example:
            - foo
          items:
            type: string
          type: array
      required:
        - collections
        - parameters
      type: object
    View:
      additionalProperties: false
      properties:
        created_at:
          description: ISO-8601 date
          example: "2001-08-28T00:23:41Z"
          type: string
        creator_email:
          description: email of the creator
          example: xyz@rockset.com
          type: string
        description:
          description: view description
          example: view referencing collection in workspace
          type: string
        entities:
          description:
            list of entities referenced by view. An entity can be a view,
            alias or collection
          example:
            - common.foo_view
            - prod.demo_alias
            - dev.user_collection
          items:
            type: string
          type: array
        modified_at:
          description: ISO-8601 date
          example: "2001-08-28T00:23:42Z"
          type: string
        name:
          description: name of the view
          example: demo
          type: string
        owner_email:
          description: "email of the owner, note: deprecated and will always be null"
          example: abc@rockset.com
          type: string
        path:
          type: string
        query_sql:
          description: SQL query of the view
          example: SELECT * FROM commons.foo
          type: string
        state:
          description: state of the view
          enum:
            - CREATED
            - SYNCING
            - DELETED
          example: CREATED
          type: string
        workspace:
          description: name of the workspace
          example: commons
          type: string
      type: object
    VirtualInstance:
      additionalProperties: false
      properties:
        current_size:
          description: virtual instance current size
          enum:
            - FREE
            - NANO
            - SHARED
            - SMALL
            - MEDIUM
            - LARGE
            - XLARGE
            - XLARGE2
            - XLARGE4
            - XLARGE8
            - XLARGE16
          example: MEDIUM
          readOnly: true
          type: string
        current_type:
          enum:
            - FREE
            - NANO
            - SHARED
            - SMALL
            - MEDIUM
            - LARGE
            - XLARGE
            - XLARGE2
            - XLARGE4
            - XLARGE8
            - XLARGE16
          type: string
        default_pod_count:
          format: int32
          type: integer
        default_vi:
          type: boolean
        desired_size:
          description: virtual instance desired size
          enum:
            - FREE
            - NANO
            - SHARED
            - SMALL
            - MEDIUM
            - LARGE
            - XLARGE
            - XLARGE2
            - XLARGE4
            - XLARGE8
            - XLARGE16
          example: MEDIUM
          readOnly: true
          type: string
        desired_type:
          enum:
            - FREE
            - NANO
            - SHARED
            - SMALL
            - MEDIUM
            - LARGE
            - XLARGE
            - XLARGE2
            - XLARGE4
            - XLARGE8
            - XLARGE16
          type: string
        id:
          description: unique identifier for virtual instance
          example: 123e4567-e89b-12d3-a456-556642440000
          type: string
        monitoring_enabled:
          type: boolean
        scaled_pod_count:
          format: int32
          type: integer
        state:
          description: virtual instance state
          enum:
            - PROVISIONING_RESOURCES
            - REBALANCING_COLLECTIONS
            - ACTIVE
            - SUSPENDING
            - SUSPENDED
            - DELETED
          example: ACTIVE
          type: string
      type: object
    Workspace:
      additionalProperties: false
      description: Workspaces are organizational containers for collections.
      properties:
        collection_count:
          description: number of collections that are immediate children of workspace
          example: 3
          format: int64
          type: integer
        created_at:
          description: ISO-8601 date of when workspace was created
          example: "2001-08-28T00:23:41Z"
          type: string
        created_by:
          description: email of user who created the workspace
          example: hello@rockset.com
          type: string
        description:
          description: longer explanation for the workspace
          example: Datasets of system logs for the ops team.
          type: string
        name:
          description: descriptive label and unique identifier
          example: event_logs
          type: string
      type: object
    XmlParams:
      additionalProperties: false
      properties:
        attribute_prefix:
          description: tag to differentiate between attributes and elements
          example: _attr
          type: string
        doc_tag:
          description: tags with which documents are identified
          example: row
          type: string
        encoding:
          description: encoding in which data source is encoded
          example: UTF-8
          type: string
        root_tag:
          description: tag until which xml is ignored
          example: root
          type: string
        value_tag:
          description:
            tag used for the value when there are attributes in the element
            having no child
          example: value
          type: string
      type: object
  securitySchemes:
    apikey:
      in: header
      name: Authorization
      type: apiKey
info:
  description:
    "Rockset's REST API allows for creating and managing all resources
    in Rockset. Each supported endpoint is documented below.


    All requests must be authorized with a Rockset API key, which can be created in
    the [Rockset console](https://console.rockset.com). The API key must be provided
    as `ApiKey <api_key>` in the `Authorization` request header. For example:

    ```

    Authorization: ApiKey aB35kDjg93J5nsf4GjwMeErAVd832F7ad4vhsW1S02kfZiab42sTsfW5Sxt25asT

    ```


    All endpoints are only accessible via https.


    Build something awesome!"
  title: REST API
  version: v1
openapi: 3.0.0
paths:
  /v1/orgs/self:
    get:
      description: Retrieve information about current organization.
      operationId: getOrganization
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrganizationResponse"
          description: organization retrieved successfully
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not ready
      summary: Get Organization
      tags:
        - Organizations
      x-rename: get
  /v1/orgs/self/aliases:
    get:
      description: Retrieve all aliases in an organization
      operationId: listAliases
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListAliasesResponse"
          description: aliases retrieved successfully
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not ready
      summary: List Aliases
      tags:
        - Aliases
      x-rename: list
  /v1/orgs/self/collections:
    get:
      description: Retrieve all collections in an organization.
      operationId: listCollections
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListCollectionsResponse"
          description: collections retrieved successfully
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not ready
      summary: List Collections
      tags:
        - Collections
      x-rename: list
  /v1/orgs/self/integrations:
    get:
      description: List all integrations in an organization.
      operationId: listIntegrations
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListIntegrationsResponse"
          description: integrations retrieved successfully
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not ready
      summary: List Integrations
      tags:
        - Integrations
      x-rename: list
  /v1/orgs/self/integrations#AzureBlobStorage:
    post:
      description: Create a new integration.
      operationId: createAzureBlobStorageIntegration
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AzureBlobStorageIntegrationCreationRequest"
        description: integration credentials
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateIntegrationResponse"
          description: integration created successfully
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not ready
      summary: Create azure blob storage integration
      tags:
        - Integrations
  /v1/orgs/self/integrations#AzureEventHubs:
    post:
      description: Create a new integration.
      operationId: createAzureEventHubsIntegration
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AzureEventHubsIntegrationCreationRequest"
        description: integration credentials
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateIntegrationResponse"
          description: integration created successfully
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not ready
      summary: Create azure event hubs integration
      tags:
        - Integrations
  /v1/orgs/self/integrations#Dynamodb:
    post:
      description: Create a new integration.
      operationId: createDynamodbIntegration
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DynamodbIntegrationCreationRequest"
        description: integration credentials
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateIntegrationResponse"
          description: integration created successfully
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not ready
      summary: Create dynamodb integration
      tags:
        - Integrations
  /v1/orgs/self/integrations#Gcs:
    post:
      description: Create a new integration.
      operationId: createGcsIntegration
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GcsIntegrationCreationRequest"
        description: integration credentials
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateIntegrationResponse"
          description: integration created successfully
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not ready
      summary: Create gcs integration
      tags:
        - Integrations
  /v1/orgs/self/integrations#Kafka:
    post:
      description: Create a new integration.
      operationId: createKafkaIntegration
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/KafkaIntegrationCreationRequest"
        description: integration credentials
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateIntegrationResponse"
          description: integration created successfully
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not ready
      summary: Create kafka integration
      tags:
        - Integrations
  /v1/orgs/self/integrations#Kinesis:
    post:
      description: Create a new integration.
      operationId: createKinesisIntegration
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/KinesisIntegrationCreationRequest"
        description: integration credentials
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateIntegrationResponse"
          description: integration created successfully
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not ready
      summary: Create kinesis integration
      tags:
        - Integrations
  /v1/orgs/self/integrations#Mongodb:
    post:
      description: Create a new integration.
      operationId: createMongodbIntegration
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MongodbIntegrationCreationRequest"
        description: integration credentials
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateIntegrationResponse"
          description: integration created successfully
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not ready
      summary: Create mongodb integration
      tags:
        - Integrations
  /v1/orgs/self/integrations#S3:
    post:
      description: Create a new integration.
      operationId: createS3Integration
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/S3IntegrationCreationRequest"
        description: integration credentials
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateIntegrationResponse"
          description: integration created successfully
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not ready
      summary: Create s3 integration
      tags:
        - Integrations
  /v1/orgs/self/integrations#Segment:
    post:
      description: Create a new integration.
      operationId: createSegmentIntegration
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SegmentIntegrationCreationRequest"
        description: integration credentials
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateIntegrationResponse"
          description: integration created successfully
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not ready
      summary: Create segment integration
      tags:
        - Integrations
  /v1/orgs/self/integrations#Snowflake:
    post:
      description: Create a new integration.
      operationId: createSnowflakeIntegration
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SnowflakeIntegrationCreationRequest"
        description: integration credentials
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateIntegrationResponse"
          description: integration created successfully
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not ready
      summary: Create snowflake integration
      tags:
        - Integrations
  /v1/orgs/self/integrations/{integration}:
    delete:
      description: Remove an integration.
      operationId: deleteIntegration
      parameters:
        - description: name of the integration
          in: path
          name: integration
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteIntegrationResponse"
          description: integration deleted successfully
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not ready
      summary: Delete Integration
      tags:
        - Integrations
      x-rename: delete
    get:
      description: Retrieve information about a single integration.
      operationId: getIntegration
      parameters:
        - description: name of the integration
          in: path
          name: integration
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetIntegrationResponse"
          description: integration retrieved successfully
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not ready
      summary: Retrieve Integration
      tags:
        - Integrations
      x-rename: get
  /v1/orgs/self/lambdas:
    get:
      description: List all Query Lambdas in an organization.
      operationId: listAllQueryLambdas
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListQueryLambdasResponse"
          description: Query Lambdas listed successfully
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not ready
      summary: List Query Lambdas
      tags:
        - Query Lambdas
  /v1/orgs/self/queries:
    get:
      description: Lists actively queued and running queries.
      operationId: listActiveQueries
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListQueriesResponse"
          description: successfully fetched queries
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not ready
      summary: List Queries
      tags:
        - Queries
    post:
      description: Make a SQL query to Rockset.
      operationId: query
      requestBody:
        $ref: "#/components/requestBodies/QueryRequest"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QueryResponse"
          description: query executed successfully
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not ready
      summary: Execute SQL Query
      tags:
        - Queries
  /v1/orgs/self/queries/validations:
    post:
      description: Validate a SQL query with Rockset's parser and planner.
      operationId: validate
      requestBody:
        $ref: "#/components/requestBodies/QueryRequest"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidateQueryResponse"
          description: query validated successfully
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not ready
      summary: Validate Query
      tags:
        - Queries
  /v1/orgs/self/queries/{queryId}:
    delete:
      description: Attempts to cancel an actively-running query.
      operationId: cancelQuery
      parameters:
        - in: path
          name: queryId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CancelQueryResponse"
          description: Successfully canceled query
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not ready
      summary: Cancel Query
      tags:
        - Queries
    get:
      description: Returns information about a query.
      operationId: getQuery
      parameters:
        - in: path
          name: queryId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetQueryResponse"
          description: Successfully fetched query info
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not ready
      summary: Retrieve Query
      tags:
        - Queries
  /v1/orgs/self/queries/{queryId}/pages:
    get:
      description: Returns a page of query results.
      operationId: getQueryResults
      parameters:
        - in: path
          name: queryId
          required: true
          schema:
            type: string
        - in: query
          name: cursor
          required: false
          schema:
            type: string
        - in: query
          name: docs
          required: false
          schema:
            format: int32
            type: integer
        - in: query
          name: offset
          required: false
          schema:
            format: int32
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QueryPaginationResponse"
          description: successfully fetched query results
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not ready
      summary: Retrieve Query Results Page
      tags:
        - Queries
  /v1/orgs/self/roles:
    get:
      description: List all roles for your organization.
      operationId: listRoles
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListRolesResponse"
          description: roles retrieved successfully
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not ready
      summary: List Roles
      tags:
        - Custom Roles
      x-rename: list
    post:
      description: Create a role for your organization.
      operationId: createRole
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateRoleRequest"
        description: JSON Object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RoleResponse"
          description: role created successfully
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not ready
      summary: Create a Role
      tags:
        - Custom Roles
      x-rename: create
  /v1/orgs/self/roles/{roleName}:
    delete:
      description: Delete a role for your organization.
      operationId: deleteRole
      parameters:
        - in: path
          name: roleName
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RoleResponse"
          description: role deleted successfully
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not ready
      summary: Delete a Role
      tags:
        - Custom Roles
      x-rename: delete
    get:
      description: Retrieve a role by name for your organization.
      operationId: getRole
      parameters:
        - in: path
          name: roleName
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RoleResponse"
          description: role retrieved successfully
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not ready
      summary: Retrieve role
      tags:
        - Custom Roles
      x-rename: get
    post:
      description: Update a role for your organization.
      operationId: updateRole
      parameters:
        - in: path
          name: roleName
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateRoleRequest"
        description: JSON Object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RoleResponse"
          description: role updated successfully
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not ready
      summary: Update a Role
      tags:
        - Custom Roles
      x-rename: update
  /v1/orgs/self/users:
    get:
      description: Retrieve all users for an organization.
      operationId: listUsers
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListUsersResponse"
          description: users retrieved successfully
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not ready
      summary: List Users
      tags:
        - Users
      x-rename: list
    post:
      description: Create a new user for an organization.
      operationId: createUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateUserRequest"
        description: JSON object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateUserResponse"
          description: user created successfully
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not ready
      summary: Create User
      tags:
        - Users
      x-rename: create
  /v1/orgs/self/users/self:
    get:
      description: Retrieve currently authenticated user.
      operationId: getCurrentUser
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
          description: user retrieved successfully
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not ready
      summary: Retrieve Current User
      tags:
        - Users
  /v1/orgs/self/users/self/apikeys:
    post:
      description: Create a new API key for the authenticated user.
      operationId: createApiKey
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateApiKeyRequest"
        description: JSON object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateApiKeyResponse"
          description: API key created successfully
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not ready
      summary: Create API Key
      tags:
        - API Keys
      x-rename: create
  /v1/orgs/self/users/self/preferences:
    get:
      description: Get all notification preferences.
      operationId: listUnsubscribePreferences
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListUnsubscribePreferencesResponse"
          description: Notification preferences retrieved successfully
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not ready
      summary: Retrieve Notification Preferences
      tags:
        - Users
    post:
      description: Update notification preference.
      operationId: updateUnsubscribePreferences
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateUnsubscribePreferencesRequest"
        description: JSON Object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateUnsubscribePreferencesResponse"
          description: Notification preference created successfully
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not ready
      summary: Update Notification Preferences
      tags:
        - Users
  /v1/orgs/self/users/{user}:
    delete:
      description: Delete a user from an organization.
      operationId: deleteUser
      parameters:
        - description: user email
          in: path
          name: user
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteUserResponse"
          description: user deleted successfully
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not ready
      summary: Delete User
      tags:
        - Users
      x-rename: delete
    get:
      description: Retrieve user by email.
      operationId: getUser
      parameters:
        - description: user email
          in: path
          name: user
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
          description: user found
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not ready
      summary: Retrieve User
      tags:
        - Users
      x-rename: get
  /v1/orgs/self/users/{user}/apikeys:
    get:
      description: List API key metadata for any user in your organization.
      operationId: listApiKeys
      parameters:
        - description:
            Email of the API key owner. Use `self` to specify the currently
            authenticated user.
          example: admin@me.com
          in: path
          name: user
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListApiKeysResponse"
          description: API keys retrieved successfully
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not ready
      summary: List API Keys
      tags:
        - API Keys
      x-rename: list
  /v1/orgs/self/users/{user}/apikeys/{name}:
    delete:
      description: Delete an API key for any user in your organization.
      operationId: deleteApiKey
      parameters:
        - description: Name of the API key.
          example: my-key
          in: path
          name: name
          required: true
          schema:
            type: string
        - description:
            Email of the API key owner. Use `self` to specify the currently
            authenticated user.
          example: admin@me.com
          in: path
          name: user
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteApiKeyResponse"
          description: API key deleted successfully
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not ready
      summary: Delete API Key
      tags:
        - API Keys
      x-rename: delete
    get:
      description: Retrieve a particular API key for any user in your organization.
      operationId: getApiKey
      parameters:
        - description:
            Email of the API key owner. Use `self` to specify the currently
            authenticated user.
          example: admin@me.com
          in: path
          name: user
          required: true
          schema:
            type: string
        - description: Name of the API key.
          example: my-key
          in: path
          name: name
          required: true
          schema:
            type: string
        - description: Reveal full key.
          example: true
          in: query
          name: reveal
          required: false
          schema:
            type: boolean
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetApiKeyResponse"
          description: API key retrieved successfully
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not ready
      summary: Retrieve API Key
      tags:
        - API Keys
      x-rename: get
    post:
      description: Update the state of an API key for any user in your organization.
      operationId: updateApiKey
      parameters:
        - description: Name of the API key.
          example: my-key
          in: path
          name: name
          required: true
          schema:
            type: string
        - description:
            Email of the API key owner. Use `self` to specify the currently
            authenticated user.
          example: admin@me.com
          in: path
          name: user
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateApiKeyRequest"
        description: JSON object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateApiKeyResponse"
          description: API key successfully updated
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not ready
      summary: Update API Key State
      tags:
        - API Keys
      x-rename: update
  /v1/orgs/self/views:
    get:
      description: Retrieve all views in an organization
      operationId: listViews
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListViewsResponse"
          description: views retrieved successfully
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not ready
      summary: List Views
      tags:
        - Views
      x-rename: list
  /v1/orgs/self/virtualinstances:
    get:
      description: Retrieve all virtual instances in an organization.
      operationId: listVirtualInstances
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListVirtualInstancesResponse"
          description: virtual instances retrieved successfully
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not ready
      summary: List Virtual Instances
      tags:
        - Virtual Instances
      x-rename: list
  /v1/orgs/self/virtualinstances/{virtualInstanceId}:
    get:
      description: Get details about a virtual instance.
      operationId: getVirtualInstance
      parameters:
        - description: uuid of the virtual instance
          in: path
          name: virtualInstanceId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetVirtualInstanceResponse"
          description: virtual instance retrieved successfully
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not ready
      summary: Retrieve Virtual Instance
      tags:
        - Virtual Instances
      x-rename: get
    post:
      description: Update the properties of a virtual instance.
      operationId: setVirtualInstance
      parameters:
        - description: uuid of the virtual instance
          in: path
          name: virtualInstanceId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateVirtualInstanceRequest"
        description: JSON object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateVirtualInstanceResponse"
          description: virtual instance updated successfully
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not ready
      summary: Update Virtual Instance
      tags:
        - Virtual Instances
  /v1/orgs/self/ws:
    get:
      description: List all workspaces in an organization.
      operationId: listWorkspaces
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListWorkspacesResponse"
          description: workspaces retrieved successfully
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not ready
      summary: List Workspaces
      tags:
        - Workspaces
      x-rename: list
    post:
      description: Create a new workspace.
      operationId: createWorkspace
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateWorkspaceRequest"
        description: workspace details
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateWorkspaceResponse"
          description: workspace created successfully
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not ready
      summary: Create Workspace
      tags:
        - Workspaces
      x-rename: create
  /v1/orgs/self/ws/{workspace}:
    delete:
      description: Remove a workspace.
      operationId: deleteWorkspace
      parameters:
        - description: name of the workspace
          in: path
          name: workspace
          required: true
          schema:
            default: commons
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteWorkspaceResponse"
          description: workspace deleted successfully
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not ready
      summary: Delete Workspace
      tags:
        - Workspaces
      x-rename: delete
    get:
      description: Get information about a single workspace.
      operationId: getWorkspace
      parameters:
        - description: name of the workspace
          in: path
          name: workspace
          required: true
          schema:
            default: commons
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetWorkspaceResponse"
          description: workspace retrieved successfully
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not ready
      summary: Retrieve Workspace
      tags:
        - Workspaces
      x-rename: get
  /v1/orgs/self/ws/{workspace}/aliases:
    get:
      description: Retrieve all aliases in a workspace.
      operationId: workspaceAliases
      parameters:
        - description: name of the workspace
          in: path
          name: workspace
          required: true
          schema:
            default: commons
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListAliasesResponse"
          description: aliases retrieved successfully
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not ready
      summary: List Aliases in Workspace
      tags:
        - Aliases
    post:
      description: Create new alias in a workspace.
      operationId: createAlias
      parameters:
        - description: name of the workspace
          in: path
          name: workspace
          required: true
          schema:
            default: commons
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateAliasRequest"
        description: JSON object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateAliasResponse"
          description: alias created successfully
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not ready
      summary: Create Alias
      tags:
        - Aliases
      x-rename: create
  /v1/orgs/self/ws/{workspace}/aliases/{alias}:
    delete:
      description: Delete an alias.
      operationId: deleteAlias
      parameters:
        - description: name of the workspace
          in: path
          name: workspace
          required: true
          schema:
            default: commons
            type: string
        - description: name of the alias
          in: path
          name: alias
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteAliasResponse"
          description: alias deleted successfully
      summary: Delete Alias
      tags:
        - Aliases
      x-rename: delete
    get:
      description: Get details about an alias
      operationId: getAlias
      parameters:
        - description: name of the workspace
          in: path
          name: workspace
          required: true
          schema:
            default: commons
            type: string
        - description: name of the alias
          in: path
          name: alias
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetAliasResponse"
          description: alias retrieved successfully
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not ready
      summary: Retrieve Alias
      tags:
        - Aliases
      x-rename: get
    post:
      description: Update alias in a workspace.
      operationId: updateAlias
      parameters:
        - description: name of the workspace
          in: path
          name: workspace
          required: true
          schema:
            default: commons
            type: string
        - description: name of the alias
          in: path
          name: alias
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateAliasRequest"
        description: JSON object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetAliasResponse"
          description: alias updated successfully
      summary: Update Alias
      tags:
        - Aliases
      x-rename: update
  /v1/orgs/self/ws/{workspace}/collections:
    get:
      description: Retrieve all collections in a workspace.
      operationId: workspaceCollections
      parameters:
        - description: name of the workspace
          in: path
          name: workspace
          required: true
          schema:
            default: commons
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListCollectionsResponse"
          description: collections retrieved successfully
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not ready
      summary: List Collections in Workspace
      tags:
        - Collections
  /v1/orgs/self/ws/{workspace}/collections#AzureBlobStorage:
    post:
      description: Create new collection in a workspace.
      operationId: createAzureBlobStorageCollection
      parameters:
        - description: name of the workspace
          in: path
          name: workspace
          required: true
          schema:
            default: commons
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AzureBlobStorageCollectionCreationRequest"
        description: JSON object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateCollectionResponse"
          description: collection created successfully
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not ready
      summary: Create azure blob storage collection
      tags:
        - Collections
  /v1/orgs/self/ws/{workspace}/collections#AzureEventHubs:
    post:
      description: Create new collection in a workspace.
      operationId: createAzureEventHubsCollection
      parameters:
        - description: name of the workspace
          in: path
          name: workspace
          required: true
          schema:
            default: commons
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AzureEventHubsCollectionCreationRequest"
        description: JSON object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateCollectionResponse"
          description: collection created successfully
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not ready
      summary: Create azure event hubs collection
      tags:
        - Collections
  /v1/orgs/self/ws/{workspace}/collections#AzureServiceBus:
    post:
      description: Create new collection in a workspace.
      operationId: createAzureServiceBusCollection
      parameters:
        - description: name of the workspace
          in: path
          name: workspace
          required: true
          schema:
            default: commons
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AzureServiceBusCollectionCreationRequest"
        description: JSON object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateCollectionResponse"
          description: collection created successfully
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not ready
      summary: Create azure service bus collection
      tags:
        - Collections
  /v1/orgs/self/ws/{workspace}/collections#Dynamodb:
    post:
      description: Create new collection in a workspace.
      operationId: createDynamodbCollection
      parameters:
        - description: name of the workspace
          in: path
          name: workspace
          required: true
          schema:
            default: commons
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DynamodbCollectionCreationRequest"
        description: JSON object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateCollectionResponse"
          description: collection created successfully
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not ready
      summary: Create dynamodb collection
      tags:
        - Collections
  /v1/orgs/self/ws/{workspace}/collections#FileUpload:
    post:
      description: Create new collection in a workspace.
      operationId: createFileUploadCollection
      parameters:
        - description: name of the workspace
          in: path
          name: workspace
          required: true
          schema:
            default: commons
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FileUploadCollectionCreationRequest"
        description: JSON object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateCollectionResponse"
          description: collection created successfully
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not ready
      summary: Create file upload collection
      tags:
        - Collections
  /v1/orgs/self/ws/{workspace}/collections#Gcs:
    post:
      description: Create new collection in a workspace.
      operationId: createGcsCollection
      parameters:
        - description: name of the workspace
          in: path
          name: workspace
          required: true
          schema:
            default: commons
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GcsCollectionCreationRequest"
        description: JSON object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateCollectionResponse"
          description: collection created successfully
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not ready
      summary: Create gcs collection
      tags:
        - Collections
  /v1/orgs/self/ws/{workspace}/collections#Kafka:
    post:
      description: Create new collection in a workspace.
      operationId: createKafkaCollection
      parameters:
        - description: name of the workspace
          in: path
          name: workspace
          required: true
          schema:
            default: commons
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/KafkaCollectionCreationRequest"
        description: JSON object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateCollectionResponse"
          description: collection created successfully
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not ready
      summary: Create kafka collection
      tags:
        - Collections
  /v1/orgs/self/ws/{workspace}/collections#Kinesis:
    post:
      description: Create new collection in a workspace.
      operationId: createKinesisCollection
      parameters:
        - description: name of the workspace
          in: path
          name: workspace
          required: true
          schema:
            default: commons
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/KinesisCollectionCreationRequest"
        description: JSON object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateCollectionResponse"
          description: collection created successfully
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not ready
      summary: Create kinesis collection
      tags:
        - Collections
  /v1/orgs/self/ws/{workspace}/collections#Mongodb:
    post:
      description: Create new collection in a workspace.
      operationId: createMongodbCollection
      parameters:
        - description: name of the workspace
          in: path
          name: workspace
          required: true
          schema:
            default: commons
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MongodbCollectionCreationRequest"
        description: JSON object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateCollectionResponse"
          description: collection created successfully
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not ready
      summary: Create mongodb collection
      tags:
        - Collections
  /v1/orgs/self/ws/{workspace}/collections#S3:
    post:
      description: Create new collection in a workspace.
      operationId: createS3Collection
      parameters:
        - description: name of the workspace
          in: path
          name: workspace
          required: true
          schema:
            default: commons
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/S3CollectionCreationRequest"
        description: JSON object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateCollectionResponse"
          description: collection created successfully
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not ready
      summary: Create s3 collection
      tags:
        - Collections
  /v1/orgs/self/ws/{workspace}/collections#Snowflake:
    post:
      description: Create new collection in a workspace.
      operationId: createSnowflakeCollection
      parameters:
        - description: name of the workspace
          in: path
          name: workspace
          required: true
          schema:
            default: commons
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SnowflakeCollectionCreationRequest"
        description: JSON object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateCollectionResponse"
          description: collection created successfully
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not ready
      summary: Create snowflake collection
      tags:
        - Collections
  /v1/orgs/self/ws/{workspace}/collections/{collection}:
    delete:
      description: Delete a collection and all its documents from Rockset.
      operationId: deleteCollection
      parameters:
        - description: name of the workspace
          in: path
          name: workspace
          required: true
          schema:
            default: commons
            type: string
        - description: name of the collection
          in: path
          name: collection
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteCollectionResponse"
          description: collection deleted successfully
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not ready
      summary: Delete Collection
      tags:
        - Collections
      x-rename: delete
    get:
      description: Get details about a collection.
      operationId: getCollection
      parameters:
        - description: name of the workspace
          in: path
          name: workspace
          required: true
          schema:
            default: commons
            type: string
        - description: name of the collection
          in: path
          name: collection
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetCollectionResponse"
          description: collection retrieved successfully
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not ready
      summary: Retrieve Collection
      tags:
        - Collections
      x-rename: get
  /v1/orgs/self/ws/{workspace}/collections/{collection}/docs:
    delete:
      description: Delete documents from a collection.
      operationId: deleteDocuments
      parameters:
        - description: Name of the workspace.
          in: path
          name: workspace
          required: true
          schema:
            default: commons
            type: string
        - description: Name of the collection.
          in: path
          name: collection
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeleteDocumentsRequest"
        description: JSON object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteDocumentsResponse"
          description: documents deleted successfully
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not ready
      summary: Delete Documents
      tags:
        - Documents
    patch:
      description: Update existing documents in a collection.
      operationId: patchDocuments
      parameters:
        - description: Name of the workspace.
          in: path
          name: workspace
          required: true
          schema:
            default: commons
            type: string
        - description: Name of the collection.
          in: path
          name: collection
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PatchDocumentsRequest"
        description: JSON Patch objects
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PatchDocumentsResponse"
          description: Documents patched successfully
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not ready
      summary: Patch Documents
      tags:
        - Documents
    post:
      description: Add documents to a collection.
      operationId: addDocuments
      parameters:
        - description: Name of the workspace.
          in: path
          name: workspace
          required: true
          schema:
            default: commons
            type: string
        - description: Name of the collection.
          in: path
          name: collection
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddDocumentsRequest"
        description: JSON object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AddDocumentsResponse"
          description: documents added successfully
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not ready
      summary: Add Documents
      tags:
        - Documents
  /v1/orgs/self/ws/{workspace}/lambdas:
    get:
      description: List all Query Lambdas under given workspace.
      operationId: listQueryLambdasInWorkspace
      parameters:
        - description: name of the workspace
          in: path
          name: workspace
          required: true
          schema:
            default: commons
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListQueryLambdasResponse"
          description: Query Lambdas listed successfully
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not ready
      summary: List Query Lambdas in Workspace
      tags:
        - Query Lambdas
    post:
      description: Create a Query Lambda in given workspace.
      operationId: createQueryLambda
      parameters:
        - description: name of the workspace
          in: path
          name: workspace
          required: true
          schema:
            default: commons
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateQueryLambdaRequest"
        description: JSON object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QueryLambdaVersionResponse"
          description: Query Lambda created successfully
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not ready
      summary: Create Query Lambda
      tags:
        - Query Lambdas
  /v1/orgs/self/ws/{workspace}/lambdas/{queryLambda}:
    delete:
      description: Delete a Query Lambda.
      operationId: deleteQueryLambda
      parameters:
        - description: name of the workspace
          in: path
          name: workspace
          required: true
          schema:
            default: commons
            type: string
        - description: name of the Query Lambda
          in: path
          name: queryLambda
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteQueryLambdaResponse"
          description: Query Lambda deleted successfully
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not ready
      summary: Delete Query Lambda
      tags:
        - Query Lambdas
  /v1/orgs/self/ws/{workspace}/lambdas/{queryLambda}/tags:
    get:
      description: List all tags associated with a Query Lambda
      operationId: listQueryLambdaTags
      parameters:
        - description: name of the workspace
          in: path
          name: workspace
          required: true
          schema:
            default: commons
            type: string
        - description: name of the Query Lambda
          in: path
          name: queryLambda
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListQueryLambdaTagsResponse"
          description: tags listed successfully
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not ready
      summary: List Query Lambda Tags
      tags:
        - Query Lambdas
    post:
      description:
        Create a tag for a specific Query Lambda version, or update that
        tag if it already exists.
      operationId: createQueryLambdaTag
      parameters:
        - description: name of the workspace
          in: path
          name: workspace
          required: true
          schema:
            default: commons
            type: string
        - description: name of the Query Lambda
          in: path
          name: queryLambda
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateQueryLambdaTagRequest"
        description: JSON object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QueryLambdaTagResponse"
          description: tag created successfully
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not ready
      summary: Create Query Lambda Tag
      tags:
        - Query Lambdas
  /v1/orgs/self/ws/{workspace}/lambdas/{queryLambda}/tags/{tag}:
    delete:
      description: Delete a tag for a specific Query Lambda
      operationId: deleteQueryLambdaTag
      parameters:
        - description: name of the workspace
          in: path
          name: workspace
          required: true
          schema:
            default: commons
            type: string
        - description: name of the Query Lambda
          in: path
          name: queryLambda
          required: true
          schema:
            type: string
        - description: name of the tag
          in: path
          name: tag
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QueryLambdaTagResponse"
          description: tag deleted successfully
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not ready
      summary: Delete Query Lambda Tag Version
      tags:
        - Query Lambdas
    get:
      description: Retrieve the Query Lambda version associated with a given tag.
      operationId: getQueryLambdaTagVersion
      parameters:
        - description: name of the workspace
          in: path
          name: workspace
          required: true
          schema:
            default: commons
            type: string
        - description: name of the Query Lambda
          in: path
          name: queryLambda
          required: true
          schema:
            type: string
        - description: name of the tag
          in: path
          name: tag
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QueryLambdaTagResponse"
          description: version retrieved successfully
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not ready
      summary: Retrieve Query Lambda Tag
      tags:
        - Query Lambdas
    post:
      description: Execute the Query Lambda version associated with a given tag.
      operationId: executeQueryLambdaByTag
      parameters:
        - description: name of the workspace
          in: path
          name: workspace
          required: true
          schema:
            default: commons
            type: string
        - description: name of the Query Lambda
          in: path
          name: queryLambda
          required: true
          schema:
            type: string
        - description: tag
          in: path
          name: tag
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ExecuteQueryLambdaRequest"
        description: JSON object
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QueryResponse"
          description: Query Lambda executed successfully
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not ready
      summary: Execute Query Lambda By Tag
      tags:
        - Query Lambdas
  /v1/orgs/self/ws/{workspace}/lambdas/{queryLambda}/version/{version}:
    delete:
      description: Delete a Query Lambda version.
      operationId: deleteQueryLambdaVersion
      parameters:
        - description: name of the workspace
          in: path
          name: workspace
          required: true
          schema:
            default: commons
            type: string
        - description: name of the Query Lambda
          in: path
          name: queryLambda
          required: true
          schema:
            type: string
        - description: version
          in: path
          name: version
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QueryLambdaVersionResponse"
          description: Query Lambda version deleted successfully
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not ready
      summary: Delete Query Lambda Version
      tags:
        - Query Lambdas
  /v1/orgs/self/ws/{workspace}/lambdas/{queryLambda}/versions:
    get:
      description: List all versions of a Query Lambda.
      operationId: listQueryLambdaVersions
      parameters:
        - description: name of the workspace
          in: path
          name: workspace
          required: true
          schema:
            default: commons
            type: string
        - description: name of the Query Lambda
          in: path
          name: queryLambda
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListQueryLambdaVersionsResponse"
          description: versions listed successfully
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not ready
      summary: List Query Lambda Versions
      tags:
        - Query Lambdas
    post:
      description: Create a new version of a Query Lambda in given workspace.
      operationId: updateQueryLambda
      parameters:
        - description: name of the workspace
          in: path
          name: workspace
          required: true
          schema:
            default: commons
            type: string
        - description: name of the Query Lambda
          in: path
          name: queryLambda
          required: true
          schema:
            type: string
        - in: query
          name: create
          required: false
          schema:
            type: boolean
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateQueryLambdaRequest"
        description: JSON object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QueryLambdaVersionResponse"
          description: Query Lambda updated successfully
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not ready
      summary: Update Query Lambda
      tags:
        - Query Lambdas
  /v1/orgs/self/ws/{workspace}/lambdas/{queryLambda}/versions/{version}:
    get:
      description: Retrieve details for a specified version of a Query Lambda.
      operationId: getQueryLambdaVersion
      parameters:
        - description: name of the workspace
          in: path
          name: workspace
          required: true
          schema:
            default: commons
            type: string
        - description: name of the Query Lambda
          in: path
          name: queryLambda
          required: true
          schema:
            type: string
        - description: version
          in: path
          name: version
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QueryLambdaVersionResponse"
          description: Query Lambda retrieved successfully
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not ready
      summary: Retrieve Query Lambda Version
      tags:
        - Query Lambdas
    post:
      description: Execute a particular version of a Query Lambda.
      operationId: executeQueryLambda
      parameters:
        - description: name of the workspace
          in: path
          name: workspace
          required: true
          schema:
            default: commons
            type: string
        - description: name of the Query Lambda
          in: path
          name: queryLambda
          required: true
          schema:
            type: string
        - description: version
          in: path
          name: version
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ExecuteQueryLambdaRequest"
        description: JSON object
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QueryResponse"
          description: Query Lambda executed successfully
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not ready
      summary: Execute Query Lambda By Version
      tags:
        - Query Lambdas
  /v1/orgs/self/ws/{workspace}/views:
    get:
      description: Retrieve all views in a workspace.
      operationId: workspaceViews
      parameters:
        - description: name of the workspace
          in: path
          name: workspace
          required: true
          schema:
            default: commons
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListViewsResponse"
          description: views retrieved successfully
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not ready
      summary: List Views in Workspace
      tags:
        - Views
    post:
      description: Create a view
      operationId: createView
      parameters:
        - description: name of the workspace
          in: path
          name: workspace
          required: true
          schema:
            default: commons
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateViewRequest"
        description: JSON object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateViewResponse"
          description: view created successfully
      summary: Create View
      tags:
        - Views
      x-rename: create
  /v1/orgs/self/ws/{workspace}/views/{view}:
    delete:
      description: Delete a view
      operationId: deleteView
      parameters:
        - description: name of the workspace
          in: path
          name: workspace
          required: true
          schema:
            default: commons
            type: string
        - description: name of the view
          in: path
          name: view
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteViewResponse"
          description: view deleted successfully
      summary: Delete View
      tags:
        - Views
      x-rename: delete
    get:
      description: Get details about a view
      operationId: getView
      parameters:
        - description: name of the workspace
          in: path
          name: workspace
          required: true
          schema:
            default: commons
            type: string
        - description: name of the view
          in: path
          name: view
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetViewResponse"
          description: view retrieved successfully
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not ready
      summary: Retrieve View
      tags:
        - Views
      x-rename: get
    post:
      description: Update a view
      operationId: updateView
      parameters:
        - description: name of the workspace
          in: path
          name: workspace
          required: true
          schema:
            default: commons
            type: string
        - description: name of the view
          in: path
          name: view
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateViewRequest"
        description: JSON object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateViewResponse"
          description: view updated successfully
      summary: Update View
      tags:
        - Views
      x-rename: update
security:
  - apikey: []
servers:
  - url: https://api.use1a1.rockset.com/
tags:
  - name: API Keys
  - name: Aliases
  - name: Collections
  - name: Custom Roles
  - name: Documents
  - name: Integrations
  - name: Organizations
  - name: Queries
  - name: Query Lambdas
  - name: Users
  - name: Views
  - name: Virtual Instances
  - name: Workspaces
