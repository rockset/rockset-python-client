openapi: 3.0.0
info:
  description: >-
    Rockset's REST API allows for creating and managing all resources in
    Rockset. Each supported endpoint is documented below.


    All requests must be authorized with a Rockset API key, which can be created
    in the [Rockset console](https://console.rockset.com). The API key must be
    provided as `ApiKey <api_key>` in the `Authorization` request header. For
    example:

    ```

    Authorization: ApiKey
    aB35kDjg93J5nsf4GjwMeErAVd832F7ad4vhsW1S02kfZiab42sTsfW5Sxt25asT

    ```


    All endpoints are only accessible via https.


    Build something awesome!
  title: REST API
  version: v1
servers:
  - url: "https://api.use1a1.rockset.com/"
paths:
  /v1/orgs/self:
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrganizationResponse"
          description: organization retrieved successfully
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not ready
      tags:
        - Organizations
      description: Retrieve information about current organization.
      operationId: getOrganization
      summary: Get Organization
      x-rename: get
  /v1/orgs/self/aliases:
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListAliasesResponse"
          description: aliases retrieved successfully
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not ready
      tags:
        - Aliases
      description: Retrieve all aliases in an organization
      operationId: listAliases
      summary: List Aliases
      x-rename: list
  /v1/orgs/self/collections:
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListCollectionsResponse"
          description: collections retrieved successfully
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not ready
      tags:
        - Collections
      description: Retrieve all collections in an organization.
      operationId: listCollections
      summary: List Collections
      x-rename: list
  /v1/orgs/self/integrations:
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListIntegrationsResponse"
          description: integrations retrieved successfully
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not ready
      tags:
        - Integrations
      description: List all integrations in an organization.
      operationId: listIntegrations
      summary: List Integrations
      x-rename: list
    post:
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateIntegrationResponse"
          description: integration created successfully
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not ready
      tags:
        - Integrations
      description: Create a new integration.
      operationId: createIntegration
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateIntegrationRequest"
        description: integration credentials
        required: true
      summary: Create Integration
  "/v1/orgs/self/integrations/{integration}":
    delete:
      parameters:
        - description: name of the integration
          in: path
          name: integration
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteIntegrationResponse"
          description: integration deleted successfully
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not ready
      tags:
        - Integrations
      description: Remove an integration.
      operationId: deleteIntegration
      summary: Delete Integration
      x-rename: delete
    get:
      parameters:
        - description: name of the integration
          in: path
          name: integration
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetIntegrationResponse"
          description: integration retrieved successfully
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not ready
      tags:
        - Integrations
      description: Retrieve information about a single integration.
      operationId: getIntegration
      summary: Retrieve Integration
      x-rename: get
  /v1/orgs/self/lambdas:
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListQueryLambdasResponse"
          description: Query Lambdas listed successfully
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not ready
      tags:
        - Query Lambdas
      description: List all Query Lambdas in an organization.
      operationId: listAllQueryLambdas
      summary: List Query Lambdas
  /v1/orgs/self/queries:
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListQueriesResponse"
          description: successfully fetched queries
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not ready
      tags:
        - Queries
      description: Lists actively queued and running queries.
      operationId: listActiveQueries
      summary: List Queries
    post:
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QueryResponse"
          description: query executed successfully
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not ready
      tags:
        - Queries
      description: Make a SQL query to Rockset.
      operationId: query
      requestBody:
        $ref: "#/components/requestBodies/QueryRequest"
      summary: Execute SQL Query
  /v1/orgs/self/queries/validations:
    post:
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidateQueryResponse"
          description: query validated successfully
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not ready
      tags:
        - Queries
      description: Validate a SQL query with Rockset's parser and planner.
      operationId: validate
      requestBody:
        $ref: "#/components/requestBodies/QueryRequest"
      summary: Validate Query
  "/v1/orgs/self/queries/{queryId}":
    delete:
      parameters:
        - in: path
          name: queryId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CancelQueryResponse"
          description: Successfully canceled query
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not ready
      tags:
        - Queries
      description: Attempts to cancel an actively-running query.
      operationId: cancelQuery
      summary: Cancel Query
    get:
      parameters:
        - in: path
          name: queryId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetQueryResponse"
          description: Successfully fetched query info
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not ready
      tags:
        - Queries
      description: Returns information about a query.
      operationId: getQuery
      summary: Retrieve Query
  "/v1/orgs/self/queries/{queryId}/pages":
    get:
      parameters:
        - in: path
          name: queryId
          required: true
          schema:
            type: string
        - description: "Cursor to current page. If unset, will default to the first page."
          in: query
          name: cursor
          required: false
          schema:
            type: string
        - description: Number of documents to fetch.
          in: query
          name: docs
          required: false
          schema:
            format: int32
            type: integer
        - description: Offset from the cursor of the first document to be returned
          in: query
          name: offset
          required: false
          schema:
            format: int32
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QueryPaginationResponse"
          description: successfully fetched query results
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not ready
      tags:
        - Queries
      description: Returns a page of query results.
      operationId: getQueryResults
      summary: Retrieve Query Results Page
  /v1/orgs/self/roles:
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListRolesResponse"
          description: roles retrieved successfully
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not ready
      tags:
        - Custom Roles
      description: List all roles for your organization.
      operationId: listRoles
      summary: List Roles
      x-rename: list
    post:
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RoleResponse"
          description: role created successfully
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not ready
      tags:
        - Custom Roles
      description: Create a role for your organization.
      operationId: createRole
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateRoleRequest"
        description: JSON Object
        required: true
      summary: Create a Role
      x-rename: create
  "/v1/orgs/self/roles/{roleName}":
    delete:
      parameters:
        - in: path
          name: roleName
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RoleResponse"
          description: role deleted successfully
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not ready
      tags:
        - Custom Roles
      description: Delete a role for your organization.
      operationId: deleteRole
      summary: Delete a Role
      x-rename: delete
    get:
      parameters:
        - in: path
          name: roleName
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RoleResponse"
          description: role retrieved successfully
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not ready
      tags:
        - Custom Roles
      description: Retrieve a role by name for your organization.
      operationId: getRole
      summary: Retrieve role
      x-rename: get
    post:
      parameters:
        - in: path
          name: roleName
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RoleResponse"
          description: role updated successfully
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not ready
      tags:
        - Custom Roles
      description: Update a role for your organization.
      operationId: updateRole
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateRoleRequest"
        description: JSON Object
        required: true
      summary: Update a Role
      x-rename: update
  /v1/orgs/self/users:
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListUsersResponse"
          description: users retrieved successfully
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not ready
      tags:
        - Users
      description: Retrieve all users for an organization.
      operationId: listUsers
      summary: List Users
      x-rename: list
    post:
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateUserResponse"
          description: user created successfully
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not ready
      tags:
        - Users
      description: Create a new user for an organization.
      operationId: createUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateUserRequest"
        description: JSON object
        required: true
      summary: Create User
      x-rename: create
  /v1/orgs/self/users/self:
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
          description: user retrieved successfully
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not ready
      tags:
        - Users
      description: Retrieve currently authenticated user.
      operationId: getCurrentUser
      summary: Retrieve Current User
  /v1/orgs/self/users/self/apikeys:
    post:
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateApiKeyResponse"
          description: API key created successfully
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not ready
      tags:
        - API Keys
      description: Create a new API key for the authenticated user.
      operationId: createApiKey
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateApiKeyRequest"
        description: JSON object
        required: true
      summary: Create API Key
      x-rename: create
  /v1/orgs/self/users/self/preferences:
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListUnsubscribePreferencesResponse"
          description: Notification preferences retrieved successfully
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not ready
      tags:
        - Users
      description: Get all notification preferences.
      operationId: listUnsubscribePreferences
      summary: Retrieve Notification Preferences
    post:
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateUnsubscribePreferencesResponse"
          description: Notification preference created successfully
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not ready
      tags:
        - Users
      description: Update notification preference.
      operationId: updateUnsubscribePreferences
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateUnsubscribePreferencesRequest"
        description: JSON Object
        required: true
      summary: Update Notification Preferences
  "/v1/orgs/self/users/{user}":
    delete:
      parameters:
        - description: user email
          in: path
          name: user
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteUserResponse"
          description: user deleted successfully
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not ready
      tags:
        - Users
      description: Delete a user from an organization.
      operationId: deleteUser
      summary: Delete User
      x-rename: delete
    get:
      parameters:
        - description: user email
          in: path
          name: user
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
          description: user found
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not ready
      tags:
        - Users
      description: Retrieve user by email.
      operationId: getUser
      summary: Retrieve User
      x-rename: get
    post:
      parameters:
        - description: email of the user to update
          in: path
          name: user
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
          description: user updated successfully
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not ready
      tags:
        - Users
      description: Update a user in an organization.
      operationId: updateUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateUserRequest"
        description: JSON object
        required: true
      summary: Update User
      x-rename: update
  "/v1/orgs/self/users/{user}/apikeys":
    get:
      parameters:
        - description: >-
            Email of the API key owner. Use `self` to specify the currently
            authenticated user.
          example: admin@me.com
          in: path
          name: user
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListApiKeysResponse"
          description: API keys retrieved successfully
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not ready
      tags:
        - API Keys
      description: List API key metadata for any user in your organization.
      operationId: listApiKeys
      summary: List API Keys
      x-rename: list
  "/v1/orgs/self/users/{user}/apikeys/{name}":
    delete:
      parameters:
        - description: Name of the API key.
          example: my-key
          in: path
          name: name
          required: true
          schema:
            type: string
        - description: >-
            Email of the API key owner. Use `self` to specify the currently
            authenticated user.
          example: admin@me.com
          in: path
          name: user
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteApiKeyResponse"
          description: API key deleted successfully
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not ready
      tags:
        - API Keys
      description: Delete an API key for any user in your organization.
      operationId: deleteApiKey
      summary: Delete API Key
      x-rename: delete
    get:
      parameters:
        - description: >-
            Email of the API key owner. Use `self` to specify the currently
            authenticated user.
          example: admin@me.com
          in: path
          name: user
          required: true
          schema:
            type: string
        - description: Name of the API key.
          example: my-key
          in: path
          name: name
          required: true
          schema:
            type: string
        - description: Reveal full key.
          example: true
          in: query
          name: reveal
          required: false
          schema:
            type: boolean
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetApiKeyResponse"
          description: API key retrieved successfully
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not ready
      tags:
        - API Keys
      description: Retrieve a particular API key for any user in your organization.
      operationId: getApiKey
      summary: Retrieve API Key
      x-rename: get
    post:
      parameters:
        - description: Name of the API key.
          example: my-key
          in: path
          name: name
          required: true
          schema:
            type: string
        - description: >-
            Email of the API key owner. Use `self` to specify the currently
            authenticated user.
          example: admin@me.com
          in: path
          name: user
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateApiKeyResponse"
          description: API key successfully updated
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not ready
      tags:
        - API Keys
      description: Update the state of an API key for any user in your organization.
      operationId: updateApiKey
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateApiKeyRequest"
        description: JSON object
        required: true
      summary: Update API Key State
      x-rename: update
  /v1/orgs/self/views:
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListViewsResponse"
          description: views retrieved successfully
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not ready
      tags:
        - Views
      description: Retrieve all views in an organization
      operationId: listViews
      summary: List Views
      x-rename: list
  /v1/orgs/self/virtualinstances:
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListVirtualInstancesResponse"
          description: virtual instances retrieved successfully
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not ready
      tags:
        - Virtual Instances
      description: Retrieve all virtual instances in an organization.
      operationId: listVirtualInstances
      summary: List Virtual Instances
      x-rename: list
    post:
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateVirtualInstanceResponse"
          description: virtual instance created successfully
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not ready
      tags:
        - Virtual Instances
      description: "[beta] Create virtual instance"
      operationId: createVirtualInstance
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateVirtualInstanceRequest"
        description: JSON object
        required: true
      summary: Create Virtual Instance
      x-rename: create
  "/v1/orgs/self/virtualinstances/{virtualInstanceId}":
    delete:
      parameters:
        - description: Virtual Instance RRN
          in: path
          name: virtualInstanceId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteVirtualInstanceResponse"
          description: virtual instance deleted successfully
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not ready
      tags:
        - Virtual Instances
      description: "[beta] Delete a virtual instance."
      operationId: deleteVirtualInstance
      summary: Delete Virtual Instance
      x-rename: delete
    get:
      parameters:
        - description: Virtual Instance RRN
          in: path
          name: virtualInstanceId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetVirtualInstanceResponse"
          description: virtual instance retrieved successfully
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not ready
      tags:
        - Virtual Instances
      description: Get details about a virtual instance.
      operationId: getVirtualInstance
      summary: Retrieve Virtual Instance
      x-rename: get
    post:
      parameters:
        - description: Virtual Instance RRN
          in: path
          name: virtualInstanceId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateVirtualInstanceResponse"
          description: virtual instance updated successfully
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not ready
      tags:
        - Virtual Instances
      description: Update the properties of a virtual instance.
      operationId: setVirtualInstance
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateVirtualInstanceRequest"
        description: JSON object
        required: true
      summary: Update Virtual Instance
      x-rename: update
  "/v1/orgs/self/virtualinstances/{virtualInstanceId}/mounts":
    get:
      parameters:
        - description: Virtual Instance RRN
          in: path
          name: virtualInstanceId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListCollectionMountsResponse"
          description: resource mounted
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not ready
      tags:
        - Virtual Instances
      description: "[beta] List collection mounts for a particular VI."
      operationId: listCollectionMounts
      summary: List Collection Mounts
    post:
      parameters:
        - description: Virtual Instance RRN
          in: path
          name: virtualInstanceId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateCollectionMountsResponse"
          description: collection mounted
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not ready
      tags:
        - Virtual Instances
      description: "[beta] Mount a collection to this virtual instance."
      operationId: mountCollection
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateCollectionMountRequest"
        description: JSON object
        required: true
      summary: Mount Collection
  "/v1/orgs/self/virtualinstances/{virtualInstanceId}/mounts/{collectionPath}":
    delete:
      parameters:
        - description: Virtual Instance RRN
          in: path
          name: virtualInstanceId
          required: true
          schema:
            type: string
        - in: path
          name: collectionPath
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CollectionMountResponse"
          description: collection unmounted
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not ready
      tags:
        - Virtual Instances
      description: "[beta] Unmount a collection from this virtual instance."
      operationId: unmountCollection
      summary: Unmount Collection
    get:
      parameters:
        - description: Virtual Instance RRN
          in: path
          name: virtualInstanceId
          required: true
          schema:
            type: string
        - in: path
          name: collectionPath
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CollectionMountResponse"
          description: collection unmounted
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not ready
      tags:
        - Virtual Instances
      description: "[beta] Get a mount on this virtual instance."
      operationId: getCollectionMount
      summary: Get Collection Mount
  "/v1/orgs/self/virtualinstances/{virtualInstanceId}/queries":
    get:
      parameters:
        - description: Virtual Instance RRN
          in: path
          name: virtualInstanceId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListQueriesResponse"
          description: successfully fetched queries
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not ready
      tags:
        - Virtual Instances
      description: >-
        [beta] Lists actively queued and running queries for a particular
        Virtual Instance.
      operationId: getVirtualInstanceQueries
      summary: List Queries
    post:
      parameters:
        - description: Virtual Instance RRN
          in: path
          name: virtualInstanceId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QueryResponse"
          description: query executed successfully
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not ready
      tags:
        - Virtual Instances
      description: "[beta] Make a SQL query to Rockset."
      operationId: queryVirtualInstance
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/QueryRequest"
        description: JSON object
        required: true
      summary: Execute SQL Query
  "/v1/orgs/self/virtualinstances/{virtualInstanceId}/resume":
    post:
      parameters:
        - description: Virtual Instance RRN
          in: path
          name: virtualInstanceId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResumeVirtualInstanceResponse"
          description: virtual instance resumed successfully
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not ready
      tags:
        - Virtual Instances
      description: "[beta] Resume a virtual instance."
      operationId: resumeVirtualInstance
      summary: Resume Virtual Instance
  "/v1/orgs/self/virtualinstances/{virtualInstanceId}/suspend":
    post:
      parameters:
        - description: Virtual Instance RRN
          in: path
          name: virtualInstanceId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuspendVirtualInstanceResponse"
          description: virtual instance suspended successfully
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not ready
      tags:
        - Virtual Instances
      description: "[beta] Suspend a virtual instance."
      operationId: suspendVirtualInstance
      summary: Suspend Virtual Instance
  /v1/orgs/self/ws:
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListWorkspacesResponse"
          description: workspaces retrieved successfully
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not ready
      tags:
        - Workspaces
      description: List all workspaces in an organization.
      operationId: listWorkspaces
      summary: List Workspaces
      x-rename: list
    post:
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateWorkspaceResponse"
          description: workspace created successfully
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not ready
      tags:
        - Workspaces
      description: Create a new workspace.
      operationId: createWorkspace
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateWorkspaceRequest"
        description: workspace details
        required: true
      summary: Create Workspace
      x-rename: create
  "/v1/orgs/self/ws/{workspace}":
    delete:
      parameters:
        - description: name of the workspace
          in: path
          name: workspace
          required: true
          schema:
            default: commons
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteWorkspaceResponse"
          description: workspace deleted successfully
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not ready
      tags:
        - Workspaces
      description: Remove a workspace.
      operationId: deleteWorkspace
      summary: Delete Workspace
      x-rename: delete
    get:
      parameters:
        - description: name of the workspace
          in: path
          name: workspace
          required: true
          schema:
            default: commons
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetWorkspaceResponse"
          description: workspace retrieved successfully
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not ready
      tags:
        - Workspaces
      description: Get information about a single workspace.
      operationId: getWorkspace
      summary: Retrieve Workspace
      x-rename: get
  "/v1/orgs/self/ws/{workspace}/aliases":
    get:
      parameters:
        - description: name of the workspace
          in: path
          name: workspace
          required: true
          schema:
            default: commons
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListAliasesResponse"
          description: aliases retrieved successfully
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not ready
      tags:
        - Aliases
      description: Retrieve all aliases in a workspace.
      operationId: workspaceAliases
      summary: List Aliases in Workspace
    post:
      parameters:
        - description: name of the workspace
          in: path
          name: workspace
          required: true
          schema:
            default: commons
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateAliasResponse"
          description: alias created successfully
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not ready
      tags:
        - Aliases
      description: Create new alias in a workspace.
      operationId: createAlias
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateAliasRequest"
        description: JSON object
        required: true
      summary: Create Alias
      x-rename: create
  "/v1/orgs/self/ws/{workspace}/aliases/{alias}":
    delete:
      parameters:
        - description: name of the workspace
          in: path
          name: workspace
          required: true
          schema:
            default: commons
            type: string
        - description: name of the alias
          in: path
          name: alias
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteAliasResponse"
          description: alias deleted successfully
      tags:
        - Aliases
      description: Delete an alias.
      operationId: deleteAlias
      summary: Delete Alias
      x-rename: delete
    get:
      parameters:
        - description: name of the workspace
          in: path
          name: workspace
          required: true
          schema:
            default: commons
            type: string
        - description: name of the alias
          in: path
          name: alias
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetAliasResponse"
          description: alias retrieved successfully
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not ready
      tags:
        - Aliases
      description: Get details about an alias
      operationId: getAlias
      summary: Retrieve Alias
      x-rename: get
    post:
      parameters:
        - description: name of the workspace
          in: path
          name: workspace
          required: true
          schema:
            default: commons
            type: string
        - description: name of the alias
          in: path
          name: alias
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetAliasResponse"
          description: alias updated successfully
      tags:
        - Aliases
      description: Update alias in a workspace.
      operationId: updateAlias
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateAliasRequest"
        description: JSON object
        required: true
      summary: Update Alias
      x-rename: update
  "/v1/orgs/self/ws/{workspace}/collections":
    get:
      parameters:
        - description: name of the workspace
          in: path
          name: workspace
          required: true
          schema:
            default: commons
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListCollectionsResponse"
          description: collections retrieved successfully
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not ready
      tags:
        - Collections
      description: Retrieve all collections in a workspace.
      operationId: workspaceCollections
      summary: List Collections in Workspace
    post:
      parameters:
        - description: name of the workspace
          in: path
          name: workspace
          required: true
          schema:
            default: commons
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateCollectionResponse"
          description: collection created successfully
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not ready
      tags:
        - Collections
      description: Create new collection in a workspace.
      operationId: createCollection
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateCollectionRequest"
        description: JSON object
        required: true
      summary: Create Collection
  "/v1/orgs/self/ws/{workspace}/collections/{collection}":
    delete:
      parameters:
        - description: name of the workspace
          in: path
          name: workspace
          required: true
          schema:
            default: commons
            type: string
        - description: name of the collection
          in: path
          name: collection
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteCollectionResponse"
          description: collection deleted successfully
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not ready
      tags:
        - Collections
      description: Delete a collection and all its documents from Rockset.
      operationId: deleteCollection
      summary: Delete Collection
      x-rename: delete
    get:
      parameters:
        - description: name of the workspace
          in: path
          name: workspace
          required: true
          schema:
            default: commons
            type: string
        - description: name of the collection
          in: path
          name: collection
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetCollectionResponse"
          description: collection retrieved successfully
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not ready
      tags:
        - Collections
      description: Get details about a collection.
      operationId: getCollection
      summary: Retrieve Collection
      x-rename: get
  "/v1/orgs/self/ws/{workspace}/collections/{collection}/docs":
    delete:
      parameters:
        - description: Name of the workspace.
          in: path
          name: workspace
          required: true
          schema:
            default: commons
            type: string
        - description: Name of the collection.
          in: path
          name: collection
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteDocumentsResponse"
          description: documents deleted successfully
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not ready
      tags:
        - Documents
      description: Delete documents from a collection.
      operationId: deleteDocuments
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeleteDocumentsRequest"
        description: JSON object
        required: true
      summary: Delete Documents
    patch:
      parameters:
        - description: Name of the workspace.
          in: path
          name: workspace
          required: true
          schema:
            default: commons
            type: string
        - description: Name of the collection.
          in: path
          name: collection
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PatchDocumentsResponse"
          description: Documents patched successfully
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: request timeout
        "413":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: content too large
        "415":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not ready
      tags:
        - Documents
      description: Update existing documents in a collection.
      operationId: patchDocuments
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PatchDocumentsRequest"
        description: JSON Patch objects
        required: true
      summary: Patch Documents
    post:
      parameters:
        - description: Name of the workspace.
          in: path
          name: workspace
          required: true
          schema:
            default: commons
            type: string
        - description: Name of the collection.
          in: path
          name: collection
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AddDocumentsResponse"
          description: documents added successfully
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: request timeout
        "413":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: content too large
        "415":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not ready
      tags:
        - Documents
      description: Add documents to a collection.
      operationId: addDocuments
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddDocumentsRequest"
        description: JSON object
        required: true
      summary: Add Documents
  "/v1/orgs/self/ws/{workspace}/lambdas":
    get:
      parameters:
        - description: name of the workspace
          in: path
          name: workspace
          required: true
          schema:
            default: commons
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListQueryLambdasResponse"
          description: Query Lambdas listed successfully
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not ready
      tags:
        - Query Lambdas
      description: List all Query Lambdas under given workspace.
      operationId: listQueryLambdasInWorkspace
      summary: List Query Lambdas in Workspace
    post:
      parameters:
        - description: name of the workspace
          in: path
          name: workspace
          required: true
          schema:
            default: commons
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QueryLambdaVersionResponse"
          description: Query Lambda created successfully
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not ready
      tags:
        - Query Lambdas
      description: Create a Query Lambda in given workspace.
      operationId: createQueryLambda
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateQueryLambdaRequest"
        description: JSON object
        required: true
      summary: Create Query Lambda
  "/v1/orgs/self/ws/{workspace}/lambdas/{queryLambda}":
    delete:
      parameters:
        - description: name of the workspace
          in: path
          name: workspace
          required: true
          schema:
            default: commons
            type: string
        - description: name of the Query Lambda
          in: path
          name: queryLambda
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteQueryLambdaResponse"
          description: Query Lambda deleted successfully
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not ready
      tags:
        - Query Lambdas
      description: Delete a Query Lambda.
      operationId: deleteQueryLambda
      summary: Delete Query Lambda
  "/v1/orgs/self/ws/{workspace}/lambdas/{queryLambda}/tags":
    get:
      parameters:
        - description: name of the workspace
          in: path
          name: workspace
          required: true
          schema:
            default: commons
            type: string
        - description: name of the Query Lambda
          in: path
          name: queryLambda
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListQueryLambdaTagsResponse"
          description: tags listed successfully
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not ready
      tags:
        - Query Lambdas
      description: List all tags associated with a Query Lambda
      operationId: listQueryLambdaTags
      summary: List Query Lambda Tags
    post:
      parameters:
        - description: name of the workspace
          in: path
          name: workspace
          required: true
          schema:
            default: commons
            type: string
        - description: name of the Query Lambda
          in: path
          name: queryLambda
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QueryLambdaTagResponse"
          description: tag created successfully
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not ready
      tags:
        - Query Lambdas
      description: >-
        Create a tag for a specific Query Lambda version, or update that tag if
        it already exists.
      operationId: createQueryLambdaTag
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateQueryLambdaTagRequest"
        description: JSON object
        required: true
      summary: Create Query Lambda Tag
  "/v1/orgs/self/ws/{workspace}/lambdas/{queryLambda}/tags/{tag}":
    delete:
      parameters:
        - description: name of the workspace
          in: path
          name: workspace
          required: true
          schema:
            default: commons
            type: string
        - description: name of the Query Lambda
          in: path
          name: queryLambda
          required: true
          schema:
            type: string
        - description: name of the tag
          in: path
          name: tag
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QueryLambdaTagResponse"
          description: tag deleted successfully
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not ready
      tags:
        - Query Lambdas
      description: Delete a tag for a specific Query Lambda
      operationId: deleteQueryLambdaTag
      summary: Delete Query Lambda Tag Version
    get:
      parameters:
        - description: name of the workspace
          in: path
          name: workspace
          required: true
          schema:
            default: commons
            type: string
        - description: name of the Query Lambda
          in: path
          name: queryLambda
          required: true
          schema:
            type: string
        - description: name of the tag
          in: path
          name: tag
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QueryLambdaTagResponse"
          description: version retrieved successfully
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not ready
      tags:
        - Query Lambdas
      description: Retrieve the Query Lambda version associated with a given tag.
      operationId: getQueryLambdaTagVersion
      summary: Retrieve Query Lambda Tag
    post:
      parameters:
        - description: name of the workspace
          in: path
          name: workspace
          required: true
          schema:
            default: commons
            type: string
        - description: name of the Query Lambda
          in: path
          name: queryLambda
          required: true
          schema:
            type: string
        - description: tag
          in: path
          name: tag
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QueryResponse"
          description: Query Lambda executed successfully
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not ready
      tags:
        - Query Lambdas
      description: Execute the Query Lambda version associated with a given tag.
      operationId: executeQueryLambdaByTag
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ExecuteQueryLambdaRequest"
        description: JSON object
      summary: Execute Query Lambda By Tag
  "/v1/orgs/self/ws/{workspace}/lambdas/{queryLambda}/version/{version}":
    delete:
      parameters:
        - description: name of the workspace
          in: path
          name: workspace
          required: true
          schema:
            default: commons
            type: string
        - description: name of the Query Lambda
          in: path
          name: queryLambda
          required: true
          schema:
            type: string
        - description: version
          in: path
          name: version
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QueryLambdaVersionResponse"
          description: Query Lambda version deleted successfully
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not ready
      tags:
        - Query Lambdas
      description: Delete a Query Lambda version.
      operationId: deleteQueryLambdaVersion
      summary: Delete Query Lambda Version
  "/v1/orgs/self/ws/{workspace}/lambdas/{queryLambda}/versions":
    get:
      parameters:
        - description: name of the workspace
          in: path
          name: workspace
          required: true
          schema:
            default: commons
            type: string
        - description: name of the Query Lambda
          in: path
          name: queryLambda
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListQueryLambdaVersionsResponse"
          description: versions listed successfully
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not ready
      tags:
        - Query Lambdas
      description: List all versions of a Query Lambda.
      operationId: listQueryLambdaVersions
      summary: List Query Lambda Versions
    post:
      parameters:
        - description: name of the workspace
          in: path
          name: workspace
          required: true
          schema:
            default: commons
            type: string
        - description: name of the Query Lambda
          in: path
          name: queryLambda
          required: true
          schema:
            type: string
        - description: Create a new Query Lambda if one does not exist already.
          in: query
          name: create
          required: false
          schema:
            type: boolean
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QueryLambdaVersionResponse"
          description: Query Lambda updated successfully
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not ready
      tags:
        - Query Lambdas
      description: Create a new version of a Query Lambda in given workspace.
      operationId: updateQueryLambda
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateQueryLambdaRequest"
        description: JSON object
        required: true
      summary: Update Query Lambda
  "/v1/orgs/self/ws/{workspace}/lambdas/{queryLambda}/versions/{version}":
    get:
      parameters:
        - description: name of the workspace
          in: path
          name: workspace
          required: true
          schema:
            default: commons
            type: string
        - description: name of the Query Lambda
          in: path
          name: queryLambda
          required: true
          schema:
            type: string
        - description: version
          in: path
          name: version
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QueryLambdaVersionResponse"
          description: Query Lambda retrieved successfully
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not ready
      tags:
        - Query Lambdas
      description: Retrieve details for a specified version of a Query Lambda.
      operationId: getQueryLambdaVersion
      summary: Retrieve Query Lambda Version
    post:
      parameters:
        - description: name of the workspace
          in: path
          name: workspace
          required: true
          schema:
            default: commons
            type: string
        - description: name of the Query Lambda
          in: path
          name: queryLambda
          required: true
          schema:
            type: string
        - description: version
          in: path
          name: version
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QueryResponse"
          description: Query Lambda executed successfully
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not ready
      tags:
        - Query Lambdas
      description: Execute a particular version of a Query Lambda.
      operationId: executeQueryLambda
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ExecuteQueryLambdaRequest"
        description: JSON object
      summary: Execute Query Lambda By Version
  "/v1/orgs/self/ws/{workspace}/views":
    get:
      parameters:
        - description: name of the workspace
          in: path
          name: workspace
          required: true
          schema:
            default: commons
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListViewsResponse"
          description: views retrieved successfully
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not ready
      tags:
        - Views
      description: Retrieve all views in a workspace.
      operationId: workspaceViews
      summary: List Views in Workspace
    post:
      parameters:
        - description: name of the workspace
          in: path
          name: workspace
          required: true
          schema:
            default: commons
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateViewResponse"
          description: view created successfully
      tags:
        - Views
      description: Create a view
      operationId: createView
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateViewRequest"
        description: JSON object
        required: true
      summary: Create View
      x-rename: create
  "/v1/orgs/self/ws/{workspace}/views/{view}":
    delete:
      parameters:
        - description: name of the workspace
          in: path
          name: workspace
          required: true
          schema:
            default: commons
            type: string
        - description: name of the view
          in: path
          name: view
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteViewResponse"
          description: view deleted successfully
      tags:
        - Views
      description: Delete a view
      operationId: deleteView
      summary: Delete View
      x-rename: delete
    get:
      parameters:
        - description: name of the workspace
          in: path
          name: workspace
          required: true
          schema:
            default: commons
            type: string
        - description: name of the view
          in: path
          name: view
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetViewResponse"
          description: view retrieved successfully
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not ready
      tags:
        - Views
      description: Get details about a view
      operationId: getView
      summary: Retrieve View
      x-rename: get
    post:
      parameters:
        - description: name of the workspace
          in: path
          name: workspace
          required: true
          schema:
            default: commons
            type: string
        - description: name of the view
          in: path
          name: view
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateViewResponse"
          description: view updated successfully
      tags:
        - Views
      description: Update a view
      operationId: updateView
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateViewRequest"
        description: JSON object
        required: true
      summary: Update View
      x-rename: update
  "/v1/public/shared_lambdas/{public_access_id}":
    post:
      parameters:
        - description: public access ID of the query lambda
          in: path
          name: public_access_id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QueryResponse"
          description: Query Lambda executed successfully
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
          description: not ready
      tags:
        - Shared Lambdas
      description: Execute a public query lambda (full version).
      operationId: executePublicQueryLambdaWithParams
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ExecutePublicQueryLambdaRequest"
        description: JSON object
      summary: Execute a Public Query Lambda
components:
  requestBodies:
    ExecuteQueryLambdaRequest:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ExecuteQueryLambdaRequest"
      description: JSON object
    QueryRequest:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/QueryRequest"
      description: JSON object
      required: true
  schemas:
    AddDocumentsRequest:
      properties:
        data:
          description: Array of documents to be added to the collection.
          example: '[{ "field": "value" }]'
          items:
            type: object
          type: array
      required:
        - data
      type: object
    AddDocumentsResponse:
      properties:
        data:
          description: Information about the added documents.
          items:
            $ref: "#/components/schemas/DocumentStatus"
          type: array
      type: object
    Alias:
      properties:
        collections:
          description: List of fully qualified collection names referenced by alias.
          example: '["commons.foo", "prod.demo"]'
          items:
            type: string
          type: array
        created_at:
          description: ISO-8601 date.
          example: "2001-08-28T00:23:41Z"
          type: string
        creator_email:
          description: Email of the creator.
          example: xyz@rockset.com
          type: string
        description:
          description: Alias description.
          example: alias referencing collection in workspace
          type: string
        modified_at:
          description: ISO-8601 date.
          example: "2001-08-28T00:23:42Z"
          type: string
        name:
          description: Name of the alias.
          example: demo
          type: string
        state:
          description: State of the alias.
          enum:
            - CREATED
            - DELETED
          example: CREATED
          type: string
        workspace:
          description: Name of the workspace.
          example: commons
          type: string
      type: object
    ApiKey:
      description: >-
        API keys are used to authenticate requests to Rockset's API. An API key
        is tied to the user who creates it.
      properties:
        created_at:
          description: Date that API key was created (ISO-8601 format).
          example: "2001-08-28T00:23:41Z"
          type: string
        created_by:
          description: Email of API key owner.
          example: test@rockset.com
          type: string
        expiry_time:
          description: The expiration date of this API key.
          example: "2001-08-28T00:23:41Z"
          type: string
        key:
          description: API key string of 64 alphanumeric characters.
          example: aB35kDjg*******************************
          type: string
        last_access_time:
          description: Date that API key was most recently used (ISO-8601 format).
          example: "2001-08-28T00:23:41Z"
          type: string
        name:
          description: Name of the API key.
          example: my-key
          type: string
        role:
          description: >-
            Role specifying access control. If not specified, API key will have
            access to all of the associated user's roles.
          example: read-only
          type: string
        state:
          description: Current state of this key.
          enum:
            - ACTIVE
            - SUSPENDED
          example: ACTIVE
          type: string
      required:
        - key
        - name
      type: object
    AsyncQueryOptions:
      properties:
        client_timeout_ms:
          description: >-
            The maximum amount of time that the client is willing to wait for
            the query to complete. If the query is not complete by this timeout,
            a response will be returned with a `query_id` that can be used to
            check the status of the query and retrieve results once the query
            has completed.
          format: int64
          type: integer
        max_initial_results:
          description: >-
            The maximum number of results you will receive as a client. If the
            query exceeds this limit, the remaining results can be requested
            using a returned pagination cursor. In addition, there is a maximum
            response size of 100MiB so fewer than `max_results` may be returned.
          format: int64
          type: integer
        timeout_ms:
          description: >-
            The maximum amount of time that the system will attempt to complete
            query execution before aborting the query and returning an error.
          format: int64
          type: integer
      type: object
    AvroParams:
      type: object
    AwsAccessKey:
      properties:
        aws_access_key_id:
          description: AWS access key ID.
          example: AKIAIOSFODNN7EXAMPLE
          type: string
        aws_secret_access_key:
          description: AWS secret access key.
          example: wJal....
          type: string
      required:
        - aws_access_key_id
        - aws_secret_access_key
      type: object
    AwsRole:
      properties:
        aws_external_id:
          description: External id used for integration.
          example: external id of aws
          type: string
        aws_role_arn:
          description: ARN of rockset-role created in your account.
          example: "arn:aws:iam::2378964092:role/rockset-role"
          type: string
      required:
        - aws_role_arn
      type: object
    AzureBlobStorageIntegration:
      properties:
        connection_string:
          description: Credentials for the Azure Blob Service.
          example: |-
            BlobEndpoint=https://<NamespaceName>.blob.core.windows.net;
            SharedAccessSignature=<KeyValue>
          type: string
      required:
        - connection_string
      type: object
    AzureEventHubsIntegration:
      properties:
        connection_string:
          description: Credentials for the Azure Event Hubs.
          example: >-
            Endpoint=sb://<NamespaceName>.servicebus.windows.net/;SharedAccessKeyName=<KeyName>;SharedAccessKey=<KeyValue>
          type: string
      type: object
    AzureServiceBusIntegration:
      properties:
        connection_string:
          description: Credentials for the Azure Service Bus.
          example: >-
            Endpoint=sb://<NamespaceName>.servicebus.windows.net/;SharedAccessKeyName=<KeyName>;SharedAccessKey=<KeyValue>
          type: string
      required:
        - connection_string
      type: object
    BulkStats:
      properties:
        data_downloaded_bytes:
          description: >-
            Size in bytes of documents downloaded from source during an ongoing
            or completed bulk ingest. This includes documents that are dropped
            and reingested.
          example: 10000000
          format: int64
          type: integer
        data_indexed_bytes:
          description: >-
            Size in bytes of documents indexed. This is the total size of
            documents after transformations and dropping before indexes are
            built.
          example: 8000000
          format: int64
          type: integer
        data_indexed_throughput_bytes:
          description: >-
            Throughput of documents indexed in the last minute measured in
            bytes/s. This is based off the data_indexed_bytes size. Throughput
            during the download stage is shown on a per-source granularity in
            the sources field of the Collection response.
          example: 800000.5
          format: double
          type: number
        documents_downloaded:
          description: >-
            Number of documents downloaded from source during an ongoing or
            completed bulk ingest. This includes documents that are dropped and
            reingested.
          example: 10000
          format: int64
          type: integer
        download_compute_ms:
          description: >-
            Bulk ingest compute units in milliseconds used for downloading
            documents.
          example: 50000
          format: int64
          type: integer
        downloading_stage_done_at:
          description: ISO-8601 date of when the downloading stage was completed.
          example: "2001-08-28T00:23:41Z"
          type: string
        finalizing_stage_done_at:
          description: ISO-8601 date of when the finalizing stage was completed.
          example: "2001-08-28T00:23:41Z"
          type: string
        index_compute_ms:
          description: >-
            Bulk ingest compute units in milliseconds used for indexing
            documents.
          example: 100000
          format: int64
          type: integer
        indexing_stage_done_at:
          description: ISO-8601 date of when the indexing stage was completed.
          example: "2001-08-28T00:23:41Z"
          type: string
        initializing_stage_done_at:
          description: ISO-8601 date of when the initializing stage was completed.
          example: "2001-08-28T00:23:41Z"
          type: string
        pre_index_size_bytes:
          description: >-
            Size in bytes of documents before being indexed. This is the total
            size of documents after decompression, transformations, and
            dropping. This is equal to data_indexed_bytes after the indexing
            stage is done unless there are retries during indexing the data.
          example: 8000000
          format: int64
          type: integer
        provisioning_stage_done_at:
          description: ISO-8601 date of when the provisioning stage was completed.
          example: "2001-08-28T00:23:41Z"
          type: string
        started_at:
          description: ISO-8601 date of when the bulk ingest was started.
          example: "2001-08-28T00:23:41Z"
          type: string
        total_index_size_bytes:
          description: >-
            Total size of indexes after the completed bulk ingest. This is the
            same as collection size.
          example: 10000000
          format: int64
          type: integer
        transformation_compute_ms:
          description: >-
            Bulk ingest compute units in milliseconds used for ingest
            transformation.
          example: 50000
          format: int64
          type: integer
      type: object
    CancelQueryResponse:
      properties:
        data:
          $ref: "#/components/schemas/QueryInfo"
      type: object
    Cluster:
      properties:
        apiserver_url:
          description: Api server url for cluster.
          example: api.rockset.us-west-2.rockset.com
          type: string
        aws_region:
          description: Aws region.
          example: us-west-2
          type: string
        cluster_type:
          description: Cluster type.
          enum:
            - PUBLIC
          example: PRIVATE
          type: string
        domain:
          description: Domain of org using cluster.
          example: rockset
          type: string
        id:
          description: Unique identifier for the cluster.
          example: asdf98-as9df8adf-adsf9asfd
          type: string
        top_level_domain:
          description: Top level domain of org using cluster.
          example: .com
          type: string
      type: object
    Collection:
      properties:
        aliases:
          description: List of aliases for a collection.
          items:
            $ref: "#/components/schemas/Alias"
          type: array
        bulk_stats:
          items:
            $ref: "#/components/schemas/BulkStats"
          type: array
        clustering_key:
          description: List of clustering fields for a collection.
          items:
            $ref: "#/components/schemas/FieldPartition"
          type: array
        created_at:
          description: ISO-8601 date.
          example: "2001-08-28T00:23:41Z"
          type: string
        created_by:
          description: Email of user who created the collection.
          example: hello@rockset.com
          type: string
        description:
          description: Text describing the collection.
          example: transactions from stores worldwide
          type: string
        field_mapping_query:
          $ref: "#/components/schemas/FieldMappingQuery"
          description: Field mapping for a collection.
        field_mappings:
          description: List of mappings applied on all documents in a collection.
          items:
            $ref: "#/components/schemas/FieldMappingV2"
          type: array
        insert_only:
          description: Whether the collection is insert only or not.
          type: boolean
        name:
          description: >-
            Unique identifer for collection, can contain alphanumeric or dash
            characters.
          example: global-transactions
          pattern: '^[A-Za-z0-9_\-.]+$'
          type: string
        read_only:
          description: Whether the collection is read-only or not.
          type: boolean
        retention_secs:
          description: Number of seconds after which data is purged based on event time.
          example: 2592000
          format: int64
          type: integer
        sources:
          description: List of sources from which collection ingests.
          items:
            $ref: "#/components/schemas/Source"
          type: array
        stats:
          $ref: "#/components/schemas/CollectionStats"
          description: Metrics about the collection.
        status:
          description: Current status of collection.
          enum:
            - INITIALIZED
            - CREATED
            - READY
            - PAUSED
            - DELETED
            - PAUSING
            - RESUMING
            - PREPARING_BULK
            - BULK_INGEST_MODE
            - EXITING_BULK_INGEST_MODE
            - UNKNOWN
          example: READY
          type: string
        workspace:
          description: Name of the workspace that the collection is in.
          example: commons
          type: string
      type: object
    CollectionMount:
      properties:
        collection_path:
          description: Collection path.
          example: commons.foo
          type: string
        created_at:
          description: ISO-8601 date.
          example: "2001-08-28T00:23:41Z"
          type: string
        id:
          description: Mount ID.
          example: 5ac23....
          type: string
        rrn:
          description: Mount RRN.
          example: "rrn:mnt:use1a1:123e4567-e89b-12d3-a456-556642440000"
          type: string
        snapshot_expiration_time_millis:
          description: Time in millis at which the snapshot expires.
          example: 864000000
          format: int64
          type: integer
        state:
          description: Mount type.
          enum:
            - CREATING
            - ACTIVE
            - REFRESHING
            - EXPIRED
            - DELETING
          example: ACTIVE
          type: string
        stats:
          $ref: "#/components/schemas/CollectionMountStats"
          description: Stats about this Collection Mount
        type:
          description: Mount type.
          enum:
            - STATIC
            - LIVE
          example: STATIC
          type: string
        virtual_instance_id:
          description: Virtual instance ID.
          example: 5ac23....
          type: string
        virtual_instance_rrn:
          description: Virtual Instance RRN.
          example: "rrn:vi:use1a1:123e4567-e89b-12d3-a456-556642440000"
          type: string
      type: object
    CollectionMountResponse:
      properties:
        data:
          $ref: "#/components/schemas/CollectionMount"
          description: Resource mount object.
      type: object
    CollectionMountStats:
      properties:
        last_queried_ms:
          description: "Milliseconds since Unix epoch Jan 1, 1970."
          example: 1535101119334
          format: int64
          type: integer
      type: object
    CollectionStats:
      properties:
        bulk_bytes_inserted:
          description: Total number of bytes inserted into the collection during bulk.
          format: int64
          type: integer
        bulk_bytes_overwritten:
          description: >-
            Total number of bytes overwritten in writing into the collection
            during bulk.
          format: int64
          type: integer
        bytes_inserted:
          description: Total number of bytes inserted into the collection.
          example: 123456
          format: int64
          type: integer
        bytes_overwritten:
          description: Total number of bytes overwritten in writing into the collection.
          example: 123456
          format: int64
          type: integer
        column_index_size:
          description: Total collection column index size in bytes.
          example: 123456
          format: int64
          type: integer
        doc_count:
          description: Number of documents in the collection.
          example: 2145
          format: int64
          type: integer
        fill_progress:
          description: >-
            Number between 0 and 1 that indicates progress of collection
            creation.
          example: 0.6
          format: double
          type: number
        inverted_index_size:
          description: Total collection inverted index size in bytes.
          example: 123456
          format: int64
          type: integer
        last_queried_ms:
          description: "Milliseconds since Unix epoch Jan 1, 1970."
          example: 1535101119334
          format: int64
          type: integer
        last_updated_ms:
          description: "Milliseconds since Unix epoch Jan 1, 1970."
          example: 1535101094433
          format: int64
          type: integer
        purged_doc_count:
          description: Number of documents purged from the collection.
          example: 2145
          format: int64
          type: integer
        purged_doc_size:
          description: Total size of bytes purged in bytes.
          example: 123456
          format: int64
          type: integer
        range_index_size:
          description: Total collection range index size in bytes.
          example: 123456
          format: int64
          type: integer
        row_index_size:
          description: Total collection row index size in bytes.
          example: 123456
          format: int64
          type: integer
        total_index_size:
          description: Total collection index size in bytes.
          example: 123456
          format: int64
          type: integer
        total_size:
          description: Total collection size in bytes.
          example: 123456
          format: int64
          type: integer
      type: object
    CreateAliasRequest:
      properties:
        collections:
          description: List of fully qualified collection names referenced by alias.
          example: '["commons.foo", "prod.demo"]'
          items:
            type: string
          type: array
        description:
          description: Optional description.
          example: version alias
          type: string
        name:
          description: Alias name.
          example: aliasName
          type: string
      required:
        - collections
        - name
      type: object
    CreateAliasResponse:
      properties:
        data:
          $ref: "#/components/schemas/Alias"
          description: Alias that was created.
      type: object
    CreateApiKeyRequest:
      properties:
        created_by:
          type: string
        name:
          description: Name for this API key.
          example: my-app
          type: string
        role:
          type: string
      required:
        - name
      type: object
    CreateApiKeyResponse:
      properties:
        data:
          $ref: "#/components/schemas/ApiKey"
          description: The API key that was created.
      type: object
    CreateCollectionMountRequest:
      properties:
        collection_paths:
          description: Collections to mount.
          example: '["commons.foo", "commons.bar"]'
          items:
            type: string
          type: array
        type:
          description: Mount type.
          enum:
            - STATIC
            - LIVE
          example: STATIC
          type: string
      type: object
    CreateCollectionMountsResponse:
      properties:
        data:
          description: Mounts created.
          items:
            $ref: "#/components/schemas/CollectionMount"
          type: array
      type: object
    CreateCollectionRequest:
      properties:
        clustering_key:
          description: >-
            Deprecated. List of clustering fields. Use CLUSTER BY clause in
            `field_mapping_query` instead.
          items:
            $ref: "#/components/schemas/FieldPartition"
          type: array
        description:
          description: Text describing the collection.
          example: transactions from stores worldwide
          type: string
        event_time_info:
          $ref: "#/components/schemas/EventTimeInfo"
          description: >-
            Deprecated. Configuration for event data. Use an _event_time mapping
            in `field_mapping_query` instead.
        field_mapping_query:
          $ref: "#/components/schemas/FieldMappingQuery"
          description: Mapping of fields for a collection.
        field_mappings:
          description: Deprecated. List of mappings. Use field_mapping_query instead.
          items:
            $ref: "#/components/schemas/FieldMappingV2"
          type: array
        name:
          description: >-
            Unique identifier for collection, can contain alphanumeric or dash
            characters.
          example: global-transactions
          type: string
        retention_secs:
          description: "Number of seconds after which data is purged, based on event time."
          example: 1000000
          format: int64
          minimum: 1
          type: integer
        sources:
          description: List of sources from which to ingest data.
          items:
            $ref: "#/components/schemas/Source"
          type: array
      type: object
    CreateCollectionResponse:
      properties:
        data:
          $ref: "#/components/schemas/Collection"
          description: Collection that was created.
      type: object
    CreateIntegrationRequest:
      properties:
        azure_blob_storage:
          $ref: "#/components/schemas/AzureBlobStorageIntegration"
          description: Azure Blob Storage details.
        azure_event_hubs:
          $ref: "#/components/schemas/AzureEventHubsIntegration"
          description: Azure Event Hubs details.
        azure_service_bus:
          $ref: "#/components/schemas/AzureServiceBusIntegration"
          description: Azure Service Bus details.
        description:
          description: Longer explanation for the integration.
          example: AWS account with event data for the data science team.
          type: string
        dynamodb:
          $ref: "#/components/schemas/DynamodbIntegration"
          description: >-
            Amazon DynamoDB details, must have one of aws_access_key or
            aws_role.
        gcs:
          $ref: "#/components/schemas/GcsIntegration"
          description: GCS details.
        kafka:
          $ref: "#/components/schemas/KafkaIntegration"
        kinesis:
          $ref: "#/components/schemas/KinesisIntegration"
          description: "Amazon Kinesis details, must have one of aws_access_key or aws_role."
        mongodb:
          $ref: "#/components/schemas/MongoDbIntegration"
          description: MongoDb details.
        name:
          description: Descriptive label.
          example: event-logs
          type: string
        s3:
          $ref: "#/components/schemas/S3Integration"
          description: "Amazon S3 details, must have one of aws_access_key or aws_role."
        snowflake:
          $ref: "#/components/schemas/SnowflakeIntegration"
      required:
        - name
      type: object
    CreateIntegrationResponse:
      properties:
        data:
          $ref: "#/components/schemas/Integration"
          description: Integration object that was created.
      type: object
    CreateQueryLambdaRequest:
      properties:
        description:
          description: Optional description.
          example: production version foo
          type: string
        is_public:
          type: boolean
        name:
          description: Query Lambda name.
          example: myQueryLambda
          type: string
        sql:
          $ref: "#/components/schemas/QueryLambdaSql"
          description: Query Lambda SQL query.
      required:
        - name
        - sql
      type: object
    CreateQueryLambdaTagRequest:
      properties:
        tag_name:
          description: Name of Query Lambda tag.
          example: production
          type: string
        version:
          description: Hash identifying a Query Lambda tag.
          example: 123ABC
          type: string
      required:
        - tag_name
        - version
      type: object
    CreateRoleRequest:
      properties:
        description:
          description: Description for the role.
          example: Role with read and write privileges to all collections.
          type: string
        privileges:
          description: List of privileges that will be associated with the role.
          items:
            $ref: "#/components/schemas/Privilege"
          type: array
        role_name:
          description: Unique identifier for the role.
          example: read_write
          type: string
      type: object
    CreateUserRequest:
      properties:
        email:
          description: "User email, must be unique."
          example: hello@rockset.com
          type: string
        first_name:
          description: User first name.
          example: John
          type: string
        last_name:
          description: User last name.
          example: Doe
          type: string
        roles:
          description: List of roles for a given user.
          example: '["admin", "member", "read-only"]'
          items:
            type: string
          type: array
      required:
        - email
        - roles
      type: object
    CreateUserResponse:
      properties:
        data:
          $ref: "#/components/schemas/User"
          description: User that was created.
      type: object
    CreateViewRequest:
      properties:
        description:
          description: Optional description.
          example: view of awesome collection
          type: string
        name:
          description: View name.
          example: myAwesomeView
          type: string
        query:
          description: SQL for this view.
          example: SELECT * FROM foo
          type: string
      required:
        - name
        - query
      type: object
    CreateViewResponse:
      properties:
        data:
          $ref: "#/components/schemas/View"
          description: View that was updated.
      type: object
    CreateVirtualInstanceRequest:
      properties:
        auto_suspend_seconds:
          description: Number of seconds without queries after which the VI is suspended
          example: 3600
          format: int32
          type: integer
        description:
          description: Description of requested virtual instance.
          example: VI serving prod traffic
          type: string
        name:
          description: >-
            Unique identifier for virtual instance, can contain alphanumeric or
            dash characters.
          example: prod_vi
          type: string
        type:
          description: Requested virtual instance type.
          enum:
            - FREE
            - NANO
            - SHARED
            - MILLI
            - SMALL
            - MEDIUM
            - LARGE
            - XLARGE
            - XLARGE2
            - XLARGE4
            - XLARGE8
            - XLARGE16
          example: LARGE
          type: string
      required:
        - name
      type: object
    CreateVirtualInstanceResponse:
      properties:
        data:
          $ref: "#/components/schemas/VirtualInstance"
          description: Virtual instance object.
      type: object
    CreateWorkspaceRequest:
      properties:
        description:
          description: Longer explanation for the workspace.
          example: Datasets of system logs for the ops team.
          type: string
        name:
          description: Descriptive label and unique identifier.
          example: event_logs
          type: string
      required:
        - name
      type: object
    CreateWorkspaceResponse:
      properties:
        data:
          $ref: "#/components/schemas/Workspace"
          description: The workspace that was created.
      type: object
    CsvParams:
      properties:
        columnNames:
          description: Names of columns.
          example: '["c1", "c2", "c3"]'
          items:
            type: string
          type: array
        columnTypes:
          description: Names of columns.
          example: '["BOOLEAN", "INTEGER", "FLOAT", "STRING"]'
          items:
            enum:
              - UNKNOWN
              - BOOLEAN
              - BOOL
              - INTEGER
              - INT
              - FLOAT
              - TIME
              - DATE
              - DATETIME
              - TIMESTAMP
              - STRING
            type: string
          type: array
        encoding:
          description: "One of: UTF-8, ISO_8859_1, UTF-16."
          example: UTF-8
          type: string
        escapeChar:
          description: >-
            escape character removes any special meaning from the following
            character,default is '\'
          example: \
          type: string
        firstLineAsColumnNames:
          description: If the first line in every object specifies the column names.
          example: true
          type: boolean
        quoteChar:
          description: >-
            character within which a cell value is enclosed,null character if no
            such character, default is '"'
          example: '"'
          type: string
        separator:
          description: A single character that is the column separator.
          example: ","
          type: string
      type: object
    DeleteAliasResponse:
      properties:
        data:
          $ref: "#/components/schemas/Alias"
          description: Alias that was deleted.
      type: object
    DeleteApiKeyResponse:
      properties:
        data:
          $ref: "#/components/schemas/ApiKey"
          description: The API key that was deleted.
      type: object
    DeleteCollectionResponse:
      properties:
        data:
          $ref: "#/components/schemas/Collection"
          description: Collection that was deleted.
      type: object
    DeleteDocumentsRequest:
      properties:
        data:
          description: Array of IDs of documents to be deleted.
          items:
            $ref: "#/components/schemas/DeleteDocumentsRequestData"
          type: array
      required:
        - data
      type: object
    DeleteDocumentsRequestData:
      properties:
        _id:
          description: Unique document ID.
          example: 2cd61e3b
          type: string
      required:
        - _id
      type: object
    DeleteDocumentsResponse:
      properties:
        data:
          description: Information about deleted documents.
          items:
            $ref: "#/components/schemas/DocumentStatus"
          type: array
      type: object
    DeleteIntegrationResponse:
      properties:
        data:
          $ref: "#/components/schemas/Integration"
          description: Integration object that was deleted.
      type: object
    DeleteQueryLambdaResponse:
      properties:
        data:
          $ref: "#/components/schemas/QueryLambda"
          description: Query Lambda details.
      type: object
    DeleteUserResponse:
      properties:
        data:
          $ref: "#/components/schemas/User"
          description: User object that was deleted.
      type: object
    DeleteViewResponse:
      properties:
        data:
          $ref: "#/components/schemas/View"
          description: View that was deleted.
      type: object
    DeleteVirtualInstanceResponse:
      properties:
        data:
          $ref: "#/components/schemas/VirtualInstance"
          description: Virtual instance that was deleted.
      type: object
    DeleteWorkspaceResponse:
      properties:
        data:
          $ref: "#/components/schemas/Workspace"
          description: The workspace that was deleted.
      type: object
    DocumentStatus:
      properties:
        _collection:
          description: Collection name.
          example: customers
          type: string
        _id:
          description: Unique document ID.
          example: 2cd61e3b
          type: string
        error:
          $ref: "#/components/schemas/ErrorModel"
          description: "Error message, if any."
        patch_id:
          description: Unique id used to represent each patch request.
          example: 486gsg8
          type: string
        status:
          description: Status of the document.
          enum:
            - ADDED
            - REPLACED
            - DELETED
            - PATCHED
            - ERROR
          example: ADDED
          type: string
      type: object
    DynamodbIntegration:
      properties:
        aws_access_key:
          $ref: "#/components/schemas/AwsAccessKey"
          description: Credentials for an AWS access key integration.
        aws_role:
          $ref: "#/components/schemas/AwsRole"
          description: Role used for external id type authentication.
        s3_export_bucket_name:
          description: S3 bucket used for export during collection initial dump.
          type: string
      type: object
    ErrorModel:
      description: Describes details about an error
      properties:
        column:
          description: Column where the error happened (if applicable).
          format: int32
          type: integer
        error_id:
          description: ID of the error.
          type: string
        line:
          description: Line where the error happened (if applicable).
          format: int32
          type: integer
        message:
          description: Descriptive message about the error.
          example: collection not found
          type: string
        query_id:
          description: ID of the query (if applicable).
          type: string
        trace_id:
          description: Internal trace ID to help with debugging.
          type: string
        type:
          description: Category of the error.
          enum:
            - AUTHEXCEPTION
            - VERSIONEXCEPTION
            - INTERNALERROR
            - INVALIDINPUT
            - NOTIMPLEMENTEDYET
            - RESOURCEEXCEEDED
            - ALREADYEXISTS
            - NOTALLOWED
            - NOTACCEPTABLE
            - NOTSUPPORTED
            - NOTFOUND
            - DEPENDENTRESOURCES
            - QUERY_ERROR
            - NOT_READY
            - FORBIDDEN
            - QUERY_TIMEOUT
            - CONNECTION_ERROR
            - CONTENTTOOLARGE
            - CREATING
            - BADREQUEST
            - SERVICEUNAVAILABLE
            - CONFLICT
            - RATELIMITEXCEEDED
            - QUERY_CANCELLED
            - CLIENT_CONNECTION_ERROR
          example: INVALIDINPUT
          type: string
      type: object
    EventTimeInfo:
      properties:
        field:
          description: Name of the field containing event time.
          example: timestamp
          type: string
        format:
          description: >-
            Format of time field, can be one of: milliseconds_since_epoch,
            seconds_since_epoch.
          example: seconds_since_epoch
          type: string
        time_zone:
          description: "Default time zone, in standard IANA format."
          example: UTC
          type: string
      required:
        - field
      type: object
    ExecutePublicQueryLambdaRequest:
      properties:
        parameters:
          description: List of named parameters.
          items:
            $ref: "#/components/schemas/QueryParameter"
          type: array
        default_row_limit:
          description: Row limit to use if no limit specified in the SQL query text.
          format: int32
          type: integer
        generate_warnings:
          description: Whether to generate warnings.
          type: boolean
      type: object
    ExecuteQueryLambdaRequest:
      properties:
        parameters:
          description: List of named parameters.
          items:
            $ref: "#/components/schemas/QueryParameter"
          type: array
        async_options:
          $ref: "#/components/schemas/AsyncQueryOptions"
          description: Options for configuring Asynchronous Query Mode (beta).
        default_row_limit:
          description: Row limit to use if no limit specified in the SQL query text.
          format: int32
          type: integer
        generate_warnings:
          description: Whether to generate warnings.
          type: boolean
        initial_paginate_response_doc_count:
          description: >-
            Number of documents to return in addition to paginating for this
            query call. Only relevant if `paginate` flag is also set.
          format: int32
          type: integer
        paginate:
          description: >-
            Flag to paginate and store the results of this query for later /
            sequential retrieval.
          type: boolean
        virtual_instance_id:
          description: Virtual instance on which to run the query.
          type: string
      type: object
    FieldMapping:
      properties: {}
      type: object
    FieldMappingQuery:
      properties:
        sql:
          description: "SELECT * EXCEPT (name), SHA256(name) AS name_anon FROM _input."
          example: sql
          type: string
      type: object
    FieldMappingV2:
      properties:
        input_fields:
          description: A List of InputField for this mapping.
          items:
            $ref: "#/components/schemas/InputField"
          type: array
        is_drop_all_fields:
          description: >-
            A boolean that determines whether to drop all fields in this
            document. If set, input and output fields should not be set
          example: true
          type: boolean
        name:
          description: A user specified string that is a name for this mapping.
          example: myTestMapping
          type: string
        output_field:
          $ref: "#/components/schemas/OutputField"
          description: An OutputField for this mapping.
      type: object
    FieldPartition:
      properties:
        field_name:
          description: "The name of a field, parsed as a SQL qualified name."
          example: address.city.zipcode
          type: string
        keys:
          description: >-
            The values for partitioning of a field. Unneeded if the partition
            type is AUTO.
          example: '["value1", "value2"]'
          items:
            type: string
          type: array
        type:
          description: The type of partitions on a field.
          enum:
            - AUTO
          example: AUTO
          type: string
      type: object
    FormatParams:
      properties:
        avro:
          $ref: "#/components/schemas/AvroParams"
        csv:
          $ref: "#/components/schemas/CsvParams"
        json:
          description: Source data is in json format.
          example: true
          type: boolean
        mssql_dms:
          type: boolean
        mysql_dms:
          type: boolean
        oracle_dms:
          type: boolean
        postgres_dms:
          type: boolean
        xml:
          $ref: "#/components/schemas/XmlParams"
      type: object
    GcpServiceAccount:
      properties:
        service_account_key_file_json:
          description: Contents of JSON Service Account key file.
          type: string
      required:
        - service_account_key_file_json
      type: object
    GcsIntegration:
      properties:
        gcp_service_account:
          $ref: "#/components/schemas/GcpServiceAccount"
          description: Credentials for an GCP key integration.
      type: object
    GetAliasResponse:
      properties:
        data:
          $ref: "#/components/schemas/Alias"
          description: Alias that was requested.
      type: object
    GetApiKeyResponse:
      properties:
        data:
          $ref: "#/components/schemas/ApiKey"
          description: The requested API key object.
      type: object
    GetCollectionResponse:
      properties:
        data:
          $ref: "#/components/schemas/Collection"
          description: Collection that was requested.
      type: object
    GetIntegrationResponse:
      properties:
        data:
          $ref: "#/components/schemas/Integration"
          description: Integration object.
      type: object
    GetQueryResponse:
      properties:
        data:
          $ref: "#/components/schemas/QueryInfo"
      type: object
    GetViewResponse:
      properties:
        data:
          $ref: "#/components/schemas/View"
          description: View that was requested.
      type: object
    GetVirtualInstanceResponse:
      properties:
        data:
          $ref: "#/components/schemas/VirtualInstance"
          description: Virtual instance that was requested.
      type: object
    GetWorkspaceResponse:
      properties:
        data:
          $ref: "#/components/schemas/Workspace"
          description: The workspace that was requested.
      type: object
    InputField:
      properties:
        field_name:
          description: "The name of a field, parsed as a SQL qualified name."
          example: address.city.zipcode
          type: string
        if_missing:
          description: Define the behaviour if fieldName is missing or is null.
          enum:
            - SKIP
            - PASS
          example: SKIP
          type: string
        is_drop:
          description: "If true, then drop fieldName from the document."
          example: true
          type: boolean
        param:
          description: Sql parameter name.
          example: zip
          type: string
      type: object
    Integration:
      description: >-
        Integrations that can be associated with data sources to create
        collections. Only one type of integration may be specified.
      properties:
        azure_blob_storage:
          $ref: "#/components/schemas/AzureBlobStorageIntegration"
          description: Azure Blob Storage details.
        azure_event_hubs:
          $ref: "#/components/schemas/AzureEventHubsIntegration"
          description: Azure Event Hubs details.
        azure_service_bus:
          $ref: "#/components/schemas/AzureServiceBusIntegration"
          description: Azure Service Bus details.
        collections:
          description: List of collections that use the integration.
          items:
            $ref: "#/components/schemas/Collection"
          type: array
        created_at:
          description: ISO-8601 date.
          example: "2001-08-28T00:23:41Z"
          type: string
        created_by:
          description: Email of user who created the integration.
          example: hello@rockset.com
          type: string
        description:
          description: Longer explanation for the integration.
          example: AWS account with event data for the data science team.
          type: string
        dynamodb:
          $ref: "#/components/schemas/DynamodbIntegration"
          description: >-
            Amazon DynamoDB details, must have one of aws_access_key or
            aws_role.
        gcs:
          $ref: "#/components/schemas/GcsIntegration"
          description: GCS details.
        kafka:
          $ref: "#/components/schemas/KafkaIntegration"
          description: Kafka details.
        kinesis:
          $ref: "#/components/schemas/KinesisIntegration"
          description: "Amazon Kinesis details, must have one of aws_access_key or aws_role."
        mongodb:
          $ref: "#/components/schemas/MongoDbIntegration"
          description: MongoDb details.
        name:
          description: Descriptive label and unique identifier.
          example: event-logs
          type: string
        owner_email:
          description: User that owns this integration.
          example: abc@rockset.com
          type: string
        s3:
          $ref: "#/components/schemas/S3Integration"
          description: "Amazon S3 details, must have one of aws_access_key or aws_role."
        snowflake:
          $ref: "#/components/schemas/SnowflakeIntegration"
          description: Snowflake details.
      required:
        - created_by
        - name
      type: object
    KafkaIntegration:
      properties:
        aws_role:
          $ref: "#/components/schemas/AwsRole"
          description: Details of an AWS cross-account role integration.
        bootstrap_servers:
          description: The Kafka bootstrap server url(s). Required only for V3 integration.
          example: "localhost:9092"
          type: string
        connection_string:
          description: Kafka connection string.
          type: string
        kafka_data_format:
          description: The format of the Kafka topics being tailed.
          enum:
            - JSON
            - AVRO
          example: JSON
          type: string
        kafka_topic_names:
          description: Kafka topics to tail.
          items:
            type: string
          type: array
          uniqueItems: true
        schema_registry_config:
          $ref: "#/components/schemas/SchemaRegistryConfig"
          description: Kafka configurations for schema registry.
        security_config:
          $ref: "#/components/schemas/KafkaV3SecurityConfig"
          description: Kafka security configurations.
        source_status_by_topic:
          additionalProperties:
            $ref: "#/components/schemas/StatusKafka"
          description: The status of the Kafka source by topic.
          example: '{"topic-a": "DORMANT"}'
          readOnly: true
          type: object
        use_v3:
          type: boolean
      type: object
    KafkaV3SecurityConfig:
      properties:
        api_key:
          type: string
        secret:
          type: string
      type: object
    KinesisIntegration:
      properties:
        aws_access_key:
          $ref: "#/components/schemas/AwsAccessKey"
          description: Credentials for an AWS access key integration.
        aws_role:
          $ref: "#/components/schemas/AwsRole"
          description: Details of an AWS cross-account role integration.
      type: object
    ListAliasesResponse:
      properties:
        data:
          description: List of all aliases.
          items:
            $ref: "#/components/schemas/Alias"
          type: array
      type: object
    ListApiKeysResponse:
      properties:
        data:
          description: List of API key objects.
          items:
            $ref: "#/components/schemas/ApiKey"
          type: array
      type: object
    ListCollectionMountsResponse:
      properties:
        data:
          description: List of all collection mounts.
          items:
            $ref: "#/components/schemas/CollectionMount"
          type: array
      type: object
    ListCollectionsResponse:
      properties:
        data:
          description: List of all collections.
          items:
            $ref: "#/components/schemas/Collection"
          type: array
      type: object
    ListIntegrationsResponse:
      properties:
        data:
          description: List of integration objects.
          items:
            $ref: "#/components/schemas/Integration"
          type: array
      type: object
    ListQueriesResponse:
      properties:
        data:
          items:
            $ref: "#/components/schemas/QueryInfo"
          type: array
      type: object
    ListQueryLambdaTagsResponse:
      properties:
        data:
          description: List of all tags associated with a Query Lambda.
          items:
            $ref: "#/components/schemas/QueryLambdaTag"
          type: array
      type: object
    ListQueryLambdaVersionsResponse:
      properties:
        data:
          description: List of all versions for a particular Query Lambda.
          items:
            $ref: "#/components/schemas/QueryLambdaVersion"
          type: array
      type: object
    ListQueryLambdasResponse:
      properties:
        data:
          description: List of all Query Lambdas.
          items:
            $ref: "#/components/schemas/QueryLambda"
          type: array
      type: object
    ListRolesResponse:
      properties:
        data:
          description: List of all roles.
          items:
            $ref: "#/components/schemas/Role"
          type: array
      type: object
    ListUnsubscribePreferencesResponse:
      properties:
        data:
          description: List of notification preferences.
          items:
            $ref: "#/components/schemas/UnsubscribePreference"
          type: array
      type: object
    ListUsersResponse:
      properties:
        data:
          description: List of users.
          items:
            $ref: "#/components/schemas/User"
          type: array
      type: object
    ListViewsResponse:
      properties:
        data:
          description: List of all views.
          items:
            $ref: "#/components/schemas/View"
          type: array
      type: object
    ListVirtualInstancesResponse:
      properties:
        data:
          description: List of all virtual instances.
          items:
            $ref: "#/components/schemas/VirtualInstance"
          type: array
      type: object
    ListWorkspacesResponse:
      properties:
        data:
          description: List of workspaces.
          items:
            $ref: "#/components/schemas/Workspace"
          type: array
      type: object
    MongoDbIntegration:
      properties:
        connection_uri:
          description: MongoDB connection URI string.
          example: "mongodb+srv://<username>:<password>@server.example.com/"
          type: string
      required:
        - connection_uri
      type: object
    Organization:
      description: An organization in Rockset is a container for users and collections.
      properties:
        clusters:
          description: List of clusters associated with this org.
          example: "[{ ... }]"
          items:
            $ref: "#/components/schemas/Cluster"
          type: array
        created_at:
          description: ISO-8601 date.
          example: "2001-08-28T00:23:41Z"
          type: string
        display_name:
          description: Name of the organization.
          example: "Rockset, Inc"
          type: string
        external_id:
          description: Organization's unique external ID within Rockset.
          example: <hash>
          type: string
        id:
          description: Unique identifier for the organization.
          example: rockset
          type: string
        rockset_user:
          description: Rockset's global AWS user.
          example: <id>
          type: string
      type: object
    OrganizationResponse:
      properties:
        data:
          $ref: "#/components/schemas/Organization"
          description: Organization object.
      type: object
    OutputField:
      properties:
        field_name:
          description: "The name of a field, parsed as a SQL qualified name."
          example: zip_hash
          type: string
        on_error:
          description: "Error in Mapping execution: 'skip' or 'fail'."
          enum:
            - SKIP
            - FAIL
          example: SKIP
          type: string
        value:
          $ref: "#/components/schemas/SqlExpression"
          description: The name of a sql function.
          example: "SHA256(:zip)"
      type: object
    Pagination:
      properties:
        start_cursor:
          description: Use this cursor to fetch the first page of results for this query.
          example: vZNDIBi_E_cIwjo8ZbFl7XcxXxd4VfwjB7Q5CF6tplw0RqNgyG7q4sPuHUTBhYnrg
          type: string
      type: object
    PaginationInfo:
      properties:
        current_page_doc_count:
          description: Number of documents returned in this result set.
          example: 1000
          format: int64
          type: integer
        next_cursor:
          description: Cursor to use to get the list of documents.
          example: testnextcursor
          type: string
        next_cursor_offset:
          description: The doc offset that next_cursor starts at.
          example: 2000
          format: int64
          type: integer
        next_page_link:
          description: Direct link to the next page of results.
          example: "https://api.rs2.usw2.rockset.com/...."
          readOnly: true
          type: string
        start_cursor:
          description: Cursor used to retrieve the first set of documents.
          example: startcursor
          type: string
      type: object
    PatchDocument:
      properties:
        _id:
          description: Unique ID of the document to be patched.
          example: ca2d6832-1bfd-f88f-0620-d2aa27a5d86c
          type: string
        patch:
          description: List of patch operations.
          items:
            $ref: "#/components/schemas/PatchOperation"
          type: array
      required:
        - _id
        - patch
      type: object
    PatchDocumentsRequest:
      properties:
        data:
          description: List of patches to be applied.
          items:
            $ref: "#/components/schemas/PatchDocument"
          type: array
      required:
        - data
      type: object
    PatchDocumentsResponse:
      properties:
        data:
          items:
            $ref: "#/components/schemas/DocumentStatus"
          type: array
      required:
        - data
      type: object
    PatchOperation:
      properties:
        from:
          description: >-
            [JSON Pointer](https://datatracker.ietf.org/doc/html/rfc6901)
            referencing a location in the target document. Required for `COPY`
            and `MOVE` operations.
          type: string
        op:
          description: >-
            [JSON Patch
            operation](https://datatracker.ietf.org/doc/html/rfc6902#page-4) to
            be performed in this patch. Case insensitive.
          enum:
            - ADD
            - REPLACE
            - REMOVE
            - COPY
            - MOVE
            - TEST
            - INCREMENT
          example: ADD
          type: string
        path:
          description: >-
            [JSON Pointer](https://datatracker.ietf.org/doc/html/rfc6901)
            referencing a location in the target document where the operation is
            performed
          example: /foo/bar
          type: string
        value:
          description: >-
            Value used in the patch operation. Required for `ADD`, `REPLACE`,
            `TEST`, and `INCREMENT` operations.
          example: baz
          type: object
      required:
        - op
        - path
      type: object
    Privilege:
      properties:
        action:
          description: The action allowed by this privilege.
          enum:
            - ALL_GLOBAL_ACTIONS
            - GET_ORG_GLOBAL
            - GET_CURRENT_USER_GLOBAL
            - INVITE_USER_GLOBAL
            - DELETE_USER_GLOBAL
            - LIST_USERS_GLOBAL
            - GET_BILLING_GLOBAL
            - UPDATE_BILLING_GLOBAL
            - UPDATE_SETTINGS_GLOBAL
            - GET_METRICS_GLOBAL
            - CREATE_VI_GLOBAL
            - UPDATE_VI_GLOBAL
            - LIST_VI_GLOBAL
            - CREATE_WS_GLOBAL
            - LIST_WS_GLOBAL
            - CREATE_INTEGRATION_GLOBAL
            - DELETE_INTEGRATION_GLOBAL
            - LIST_INTEGRATIONS_GLOBAL
            - UPDATE_RESOURCE_OWNER_GLOBAL
            - CREATE_API_KEY_GLOBAL
            - CREATE_ROLE_GLOBAL
            - UPDATE_ROLE_GLOBAL
            - DELETE_ROLE_GLOBAL
            - LIST_ROLES_GLOBAL
            - GRANT_REVOKE_ROLE_GLOBAL
            - ALL_INTEGRATION_ACTIONS
            - CREATE_COLLECTION_INTEGRATION
            - ALL_WORKSPACE_ACTIONS
            - DELETE_WS
            - QUERY_DATA_WS
            - WRITE_DATA_WS
            - CREATE_COLLECTION_WS
            - DELETE_COLLECTION_WS
            - CREATE_ALIAS_WS
            - DELETE_ALIAS_WS
            - LIST_RESOURCES_WS
            - CREATE_QUERY_LAMBDA_WS
            - DELETE_QUERY_LAMBDA_WS
            - EXECUTE_QUERY_LAMBDA_WS
            - CREATE_SCHEDULED_LAMBDA_WS
            - DELETE_SCHEDULED_LAMBDA_WS
            - CREATE_VIEW_WS
            - DELETE_VIEW_WS
            - ALL_VI_ACTIONS
            - QUERY_VI
            - UPDATE_VI
            - SUSPEND_RESUME_VI
            - DELETE_VI
          example: CREATE_COLLECTION_WS
          type: string
        cluster:
          description: >-
            Cluster ID (`usw2a1` for us-west-2, `use1a1` for us-east-1, `euc1a1`
            for eu-central-1) for which the action is allowed. Defaults to
            '*All*' if not specified.
          example: "*ALL*"
          type: string
        resource_name:
          description: >-
            The resources on which the action is allowed. Defaults to '*All*' if
            not specified.
          example: commons
          type: string
      type: object
    QueryError:
      properties:
        message:
          description: >-
            A message associated with the error, containing more information
            about it.
          example: Too many rows
          type: string
        status_code:
          description: >-
            The HTTP status code associated with this error, had it been sent as
            the response status code
          example: 429
          format: int32
          type: integer
        type:
          description: The type of error.
          example: ResourceExceeded
          type: string
      type: object
    QueryFieldType:
      properties:
        name:
          description: Name of the field.
          example: _id
          type: string
        type:
          description: Data type of the field.
          example: string
          type: string
      required:
        - name
        - type
      type: object
    QueryInfo:
      properties:
        executed_by:
          description: User ID who executed the query.
          example: xyz@rockset.com
          type: string
        expires_at:
          description: >-
            Time (UTC) that query results expire. Only populated if `status` is
            `COMPLETE`.
          example: "2001-08-28T00:23:41Z"
          type: string
        last_offset:
          description: >-
            The log offset that query results were written to in the destination
            collection. Only populated for INSERT INTO queries.
          type: string
        pagination:
          $ref: "#/components/schemas/Pagination"
          description: >-
            Information for fetching query results pages. Only populated if
            `status` is `COMPLETE`.
        query_errors:
          description: Errors encountered while executing the query.
          items:
            $ref: "#/components/schemas/QueryError"
          type: array
        query_id:
          description: Unique Query ID.
          example: 5b596206-c632-4a08-8343-0c560f7ef7f1
          type: string
        stats:
          $ref: "#/components/schemas/Stats"
          description: Various stats about the query's execution.
        status:
          description: Status of the query.
          enum:
            - QUEUED
            - RUNNING
            - COMPLETED
            - ERROR
            - CANCELLED
          example: RUNNING
          type: string
        submitted_at:
          description: >-
            Time (UTC) the query request was first received and queued for
            execution.
          example: "2001-08-28T00:23:41Z"
          type: string
      type: object
    QueryLambda:
      properties:
        collections:
          description: Collections/aliases queried by underlying SQL query.
          items:
            type: string
          type: array
        last_updated:
          description: ISO-8601 date of when Query Lambda was last updated.
          example: "2001-08-28T00:23:41Z"
          type: string
        last_updated_by:
          description: User that created this Query Lambda.
          example: ..@rockset.com
          type: string
        latest_version:
          $ref: "#/components/schemas/QueryLambdaVersion"
          description: Query Lambda version details for most recently created version.
        name:
          description: Query Lambda name.
          example: myQuery
          type: string
        version_count:
          description: Number of Query Lambda versions.
          example: 1
          format: int32
          type: integer
        workspace:
          description: Workspace of this Query Lambda.
          example: commons
          type: string
      type: object
    QueryLambdaSql:
      properties:
        default_parameters:
          description: Default parameters for this Query Lambda.
          items:
            $ref: "#/components/schemas/QueryParameter"
          type: array
        query:
          description: SQL text.
          example: SELECT 'Foo'
          type: string
      required:
        - query
      type: object
    QueryLambdaStats:
      properties:
        last_executed:
          description: ISO-8601 date.
          example: "2001-08-28T00:23:41Z"
          type: string
        last_executed_by:
          description: User who last executed Query Lambda.
          example: ...@rockset.com
          type: string
        last_execution_error:
          description: ISO-8601 date of last execution failure.
          example: "2001-08-28T00:23:41Z"
          type: string
        last_execution_error_message:
          description: Error message associated with last failed execution.
          example: "[error message]"
          type: string
      type: object
    QueryLambdaTag:
      properties:
        tag_name:
          description: Name of Query Lambda tag.
          example: production
          type: string
        version:
          $ref: "#/components/schemas/QueryLambdaVersion"
          description: Query lambda version.
          example: b1d7c9a34b50cd
      type: object
    QueryLambdaTagResponse:
      properties:
        data:
          $ref: "#/components/schemas/QueryLambdaTag"
          description: Updated Query Lambda tag.
      type: object
    QueryLambdaVersion:
      properties:
        collections:
          description: Collections queried by underlying SQL query.
          items:
            type: string
          type: array
        created_at:
          description: ISO-8601 date of when Query Lambda was created.
          example: "2001-08-28T00:23:41Z"
          type: string
        created_by:
          description: User that created this Query Lambda.
          example: ..@rockset.com
          type: string
        description:
          description: Optional description.
          example: production version foo
          type: string
        name:
          description: Query Lambda name.
          example: myQuery
          type: string
        public_access_id:
          description: Public access ID associated with this QL version
          type: string
        sql:
          $ref: "#/components/schemas/QueryLambdaSql"
          description: Query Lambda SQL query.
        state:
          description: Status of this Query Lambda.
          enum:
            - ACTIVE
            - INVALID_SQL
          example: ACTIVE
          type: string
        stats:
          $ref: "#/components/schemas/QueryLambdaStats"
          description: Stats related to this Query Lambda.
        version:
          description: Query Lambda version.
          example: acb99feg92bcaf
          type: string
        workspace:
          description: Workspace of this Query Lambda.
          example: commons
          type: string
      type: object
    QueryLambdaVersionResponse:
      properties:
        data:
          $ref: "#/components/schemas/QueryLambdaVersion"
          description: Query Lambda version details.
      type: object
    QueryPaginationResponse:
      properties:
        pagination:
          $ref: "#/components/schemas/PaginationInfo"
          description: Pagination metadata.
        results:
          description: List of documents returned by the query.
          items:
            type: object
          type: array
        results_total_doc_count:
          description: Total documents returned by the query.
          format: int64
          type: integer
      type: object
    QueryParameter:
      properties:
        name:
          description: Name of the field.
          example: _id
          type: string
        type:
          description: Data type of the field.
          example: string
          type: string
        value:
          description: Literal value of the field.
          example: 85beb391
          type: string
      required:
        - name
        - type
        - value
      type: object
    QueryRequest:
      properties:
        async_options:
          $ref: "#/components/schemas/AsyncQueryOptions"
          description: Options for configuring Asynchronous Query Mode (beta).
        sql:
          $ref: "#/components/schemas/QueryRequestSql"
          description: Main query request body.
      required:
        - sql
      type: object
    QueryRequestSql:
      properties:
        parameters:
          description: List of named parameters.
          items:
            $ref: "#/components/schemas/QueryParameter"
          type: array
        default_row_limit:
          description: >-
            Row limit to use. Limits specified in the query text will override
            this default.
          format: int32
          type: integer
        generate_warnings:
          description: >-
            Flag to enable warnings. Warnings can help debug query issues but
            negatively affect performance.
          example: false
          type: boolean
        initial_paginate_response_doc_count:
          description: >-
            Number of documents to return in addition to paginating for this
            query call. Only relevant if `paginate` flag is also set.
          format: int32
          type: integer
        paginate:
          description: >-
            Flag to paginate and store the results of this query for later
            sequential retrieval.
          type: boolean
        query:
          description: SQL query string.
          example: "SELECT * FROM foo where _id = :_id"
          type: string
      required:
        - query
      type: object
    QueryResponse:
      properties:
        collections:
          description: List of collections referenced in the query.
          items:
            type: string
          type: array
        column_fields:
          description: >-
            Meta information about each column in the result set. Not populated
            in `SELECT *` queries.
          items:
            $ref: "#/components/schemas/QueryFieldType"
          type: array
        last_offset:
          description: >-
            If this was a write query, this is the log offset the query was
            written to.
          type: string
        pagination:
          $ref: "#/components/schemas/PaginationInfo"
          description: >-
            Pagination information. Only populated if `paginate` is specified in
            the query request.
        query_errors:
          description: Errors encountered while executing the query.
          items:
            $ref: "#/components/schemas/QueryError"
          type: array
        query_id:
          description: Unique ID for this query.
          type: string
        query_lambda_path:
          description: >-
            The full path of the executed query lambda. Includes version
            information.
          type: string
        results:
          description: Results from the query.
          items:
            type: object
          type: array
        results_total_doc_count:
          description: Number of results generated by the query.
          format: int64
          type: integer
        stats:
          $ref: "#/components/schemas/QueryResponseStats"
          description: Meta information about the query including execution latencies.
        warnings:
          description: >-
            Warnings generated by the query. Only populated if
            `generate_warnings` is specified in the query request.
          items:
            type: string
          type: array
      type: object
    QueryResponseStats:
      properties:
        elapsed_time_ms:
          description: Query time in milliseconds.
          example: 126
          format: int64
          type: integer
        throttled_time_micros:
          description: Time query was throttled by admission control.
          example: 126
          format: int64
          type: integer
      type: object
    ResumeVirtualInstanceResponse:
      properties:
        data:
          $ref: "#/components/schemas/VirtualInstance"
          description: Virtual instance that was resumed.
      type: object
    Role:
      properties:
        created_at:
          description: ISO-8601 date of when the role was created.
          example: "2001-08-28T00:23:41Z"
          type: string
        created_by:
          description: Email of the user who created the role.
          example: hello@rockset.com
          type: string
        description:
          description: Description for the role.
          example: Role with read and write privileges to all collections.
          type: string
        owner_email:
          description: Email of the user who currently owns the role.
          example: hello@rockset.com
          type: string
        privileges:
          description: List of privileges associated with the role.
          items:
            $ref: "#/components/schemas/Privilege"
          type: array
        role_name:
          description: Unique identifier for the role.
          example: read_write
          type: string
      type: object
    RoleResponse:
      properties:
        data:
          $ref: "#/components/schemas/Role"
      type: object
    S3Integration:
      properties:
        aws_access_key:
          $ref: "#/components/schemas/AwsAccessKey"
          description: Credentials for an AWS access key integration.
        aws_role:
          $ref: "#/components/schemas/AwsRole"
          description: Details of an AWS cross-account role integration.
      type: object
    SchemaRegistryConfig:
      properties:
        key:
          description: The secure API key for schema registry.
          type: string
        secret:
          description: The secure API password registry.
          type: string
        url:
          description: Schema registry URL.
          type: string
      type: object
    SnowflakeIntegration:
      properties:
        aws_access_key:
          $ref: "#/components/schemas/AwsAccessKey"
          description: Credentials for an AWS access key integration.
        aws_role:
          $ref: "#/components/schemas/AwsRole"
          description: Details of an AWS cross-account role integration.
        default_warehouse:
          description: >-
            default snowflake data warehouse name for query execution. Warehouse
            name can be overridden in the collection.
          type: string
        password:
          description: Snowflake database password.
          type: string
        s3_export_path:
          description: S3 path used for running 'COPY INTO' command on snowflake table.
          example: "s3://bucket/prefix"
          type: string
        snowflake_url:
          description: Snowflake browser url.
          example: acme-marketing-test-account.snowflakecomputing.com
          type: string
        user_role:
          description: "Snowflake user role. If unspecified, will use the default user role."
          type: string
        username:
          description: Snowflake database username.
          type: string
      required:
        - default_warehouse
        - password
        - s3_export_path
        - snowflake_url
        - username
      type: object
    Source:
      description: >-
        Details about the data source for the given collection. Only one of the
        following fields are allowed to be defined. Only collections can act as
        data sources for views.
      properties:
        azure_blob_storage:
          $ref: "#/components/schemas/SourceAzureBlobStorage"
          description: Configuration for ingestion from Azure Blob Storage.
        azure_event_hubs:
          $ref: "#/components/schemas/SourceAzureEventHubs"
          description: Configuration for ingestion from Azure Event Hubs.
        azure_service_bus:
          $ref: "#/components/schemas/SourceAzureServiceBus"
          description: Configuration for ingestion from Azure Service Bus.
        dynamodb:
          $ref: "#/components/schemas/SourceDynamoDb"
          description: Configuration for ingestion from  a dynamodb table.
        file_upload:
          $ref: "#/components/schemas/SourceFileUpload"
          description: File upload details.
        format_params:
          $ref: "#/components/schemas/FormatParams"
          description: Format parameters for data from this source.
        gcs:
          $ref: "#/components/schemas/SourceGcs"
          description: Configuration for ingestion from GCS.
        id:
          description: Unique source identifier.
          example: a1df483c-734e-485b-8005-f46386ef42f6
          type: string
        integration_name:
          description: Name of integration to use.
          example: aws-integration
          type: string
        kafka:
          $ref: "#/components/schemas/SourceKafka"
          description: Kafka collection identifier.
        kinesis:
          $ref: "#/components/schemas/SourceKinesis"
          description: Configuration for ingestion from kinesis stream.
        mongodb:
          $ref: "#/components/schemas/SourceMongoDb"
          description: MongoDB collection details.
        s3:
          $ref: "#/components/schemas/SourceS3"
          description: Configuration for ingestion from S3.
        snowflake:
          $ref: "#/components/schemas/SourceSnowflake"
          description: Configuration for ingestion from Snowflake.
        status:
          $ref: "#/components/schemas/Status"
          description: The ingest status of this source.
          readOnly: true
      type: object
    SourceAzureBlobStorage:
      properties:
        blob_bytes_total:
          format: int64
          readOnly: true
          type: integer
        blob_count_downloaded:
          format: int64
          readOnly: true
          type: integer
        blob_count_total:
          format: int64
          readOnly: true
          type: integer
        container:
          description: Name of Azure blob Storage container you want to ingest from.
          example: server-logs
          type: string
        pattern:
          description: >-
            Glob-style pattern that selects keys to ingest. Only either prefix
            or pattern can be specified.
          example: prefix/to/**/keys/*.format
          type: string
        prefix:
          description: Prefix that selects blobs to ingest.
          example: prefix/to/blobs
          type: string
      type: object
    SourceAzureEventHubs:
      properties:
        hub_id:
          description: Name of the hub which rockset should ingest from.
          example: event-hub-1
          type: string
        offset_reset_policy:
          description: The offset reset policy.
          enum:
            - LATEST
            - EARLIEST
          example: EARLIEST
          type: string
        status:
          $ref: "#/components/schemas/StatusAzureEventHubs"
          description: Source status.
          readOnly: true
      type: object
    SourceAzureServiceBus:
      properties:
        status:
          $ref: "#/components/schemas/StatusAzureServiceBus"
          description: Azure Service bus source status.
          readOnly: true
        subscription:
          description: The subscription to read from the topic.
          example: rockset-subscription
          type: string
        topic:
          description: Name of the topic which rockset should ingest from.
          example: rockset-topic
          type: string
      type: object
    SourceDynamoDb:
      properties:
        aws_region:
          description: "AWS region name of DynamoDB table, by default us-west-2 is used."
          example: us-east-2
          type: string
        current_status:
          $ref: "#/components/schemas/StatusDynamoDbV2"
          description: DynamoDB source status v2.
          readOnly: true
        rcu:
          description: Max RCU usage for scan.
          example: 1000
          format: int64
          type: integer
        status:
          $ref: "#/components/schemas/StatusDynamoDb"
          description: DynamoDB source status.
          readOnly: true
        table_name:
          description: Name of DynamoDB table containing data.
          example: dynamodb_table_name
          type: string
        use_scan_api:
          description: Whether to use DynamoDB Scan API for the initial scan.
          type: boolean
      required:
        - table_name
      type: object
    SourceFileUpload:
      properties:
        file_name:
          description: Name of the file.
          example: file1.json
          type: string
        file_size:
          description: Size of the file in bytes.
          example: 12345
          format: int64
          type: integer
        file_upload_time:
          description: Time of file upload.
          example: "2019-01-15T21:48:23Z"
          type: string
      required:
        - file_name
        - file_size
        - file_upload_time
      type: object
    SourceGcs:
      properties:
        bucket:
          description: Name of GCS bucket you want to ingest from.
          example: server-logs
          type: string
        object_bytes_downloaded:
          format: int64
          readOnly: true
          type: integer
        object_bytes_total:
          format: int64
          readOnly: true
          type: integer
        object_count_downloaded:
          format: int64
          readOnly: true
          type: integer
        object_count_total:
          format: int64
          readOnly: true
          type: integer
        pattern:
          description: >-
            Glob-style pattern that selects keys to ingest. Only either prefix
            or pattern can be specified.
          example: prefix/to/**/keys/*.format
          type: string
        prefix:
          description: Prefix that selects keys to ingest.
          example: prefix/to/keys
          type: string
      type: object
    SourceKafka:
      properties:
        consumer_group_id:
          description: The Kafka consumer group Id being used.
          example: org-collection
          type: string
        kafka_topic_name:
          description: The Kafka topic to be tailed.
          example: example-topic
          type: string
        offset_reset_policy:
          description: The offset reset policy.
          enum:
            - LATEST
            - EARLIEST
          example: EARLIEST
          type: string
        status:
          $ref: "#/components/schemas/StatusKafka"
          description: Kafka source status.
          readOnly: true
        use_v3:
          description: Whether to use v3 integration.
          type: boolean
      type: object
    SourceKinesis:
      properties:
        aws_region:
          description: "AWS region name of Kinesis stream, by default us-west-2 is used."
          example: us-east-2
          type: string
        dms_primary_key:
          description: Set of fields that correspond to a DMS primary key.
          items:
            type: string
          type: array
        offset_reset_policy:
          description: >-
            For non-DMS streams, Rockset can tail from the earliest end or
            latest end of kinesis source.
          enum:
            - LATEST
            - EARLIEST
          example: EARLIEST
          type: string
        stream_name:
          description: Name of kinesis stream.
          example: click_stream
          type: string
      required:
        - stream_name
      type: object
    SourceMongoDb:
      properties:
        collection_name:
          description: MongoDB collection name.
          example: my_collection
          type: string
        database_name:
          description: MongoDB database name containing this collection.
          example: my_database
          type: string
        status:
          $ref: "#/components/schemas/StatusMongoDb"
          description: MongoDB source status.
          readOnly: true
      required:
        - collection_name
        - database_name
      type: object
    SourceS3:
      properties:
        bucket:
          description: Address of S3 bucket containing data.
          example: "s3://customer-account-info"
          type: string
        object_bytes_downloaded:
          format: int64
          readOnly: true
          type: integer
        object_bytes_total:
          format: int64
          readOnly: true
          type: integer
        object_count_downloaded:
          format: int64
          readOnly: true
          type: integer
        object_count_total:
          format: int64
          readOnly: true
          type: integer
        pattern:
          description: >-
            Glob-style pattern that selects keys to ingest. Only either prefix
            or pattern can be specified.
          example: prefix/to/**/keys/*.format
          type: string
        prefix:
          description: Prefix that selects keys to ingest.
          example: prefix/to/keys
          type: string
        prefixes:
          description: List of prefixes to paths from which data should be ingested.
          example: '["/transactions", "/stores"]'
          items:
            type: string
          readOnly: true
          type: array
        region:
          description: AWS region containing source bucket.
          example: us-west-2
          type: string
      required:
        - bucket
        - prefixes
      type: object
    SourceSnowflake:
      properties:
        database:
          description: Name of the snowflake database.
          example: NASDAQ
          type: string
        schema:
          description: Name of the snowflake database schema.
          example: PUBLIC
          type: string
        status:
          $ref: "#/components/schemas/StatusSnowflake"
          description: Snowflake source status.
          readOnly: true
        table_name:
          description: Name of the snowflake table.
          example: COMPANIES
          type: string
        warehouse:
          description: Name of the data warehouse to be used.
          example: COMPUTE_XL
          type: string
      required:
        - database
        - schema
        - table_name
      type: object
    SqlExpression:
      properties:
        sql:
          description: The name of a sql function.
          example: SHA256()
          type: string
      type: object
    Stats:
      properties:
        elapsed_time_ms:
          description: >-
            Total execution time (including time queued) of the query, in
            milliseconds.
          example: 128
          format: int64
          type: integer
        result_set_bytes_size:
          description: >-
            Number of bytes in the query result set. Only populated if `status`
            is `COMPLETE`. Not populated for INSERT INTO queries.
          example: 1235
          format: int64
          type: integer
        result_set_document_count:
          description: >-
            Number of documents returned by the query. Only populated if
            `status` is `COMPLETE`.
          example: 1235
          format: int64
          type: integer
        throttled_time_ms:
          description: "Time query spent queued, in milliseconds."
          example: 16
          format: int64
          type: integer
      type: object
    Status:
      properties:
        detected_size_bytes:
          description: >-
            Size in bytes detected for the source at collection initialization.
            This size can be 0 or null for event stream sources.
          format: int64
          type: integer
        last_processed_at:
          description: ISO-8601 date when source was last processed.
          example: "2019-01-15T21:48:23Z"
          type: string
        last_processed_item:
          description: Last source item processed by ingester.
          example: /path/to/some/object
          type: string
        message:
          description: State message.
          example: error 403 forbidden
          type: string
        state:
          description: Status of the Source's ingestion.
          enum:
            - INITIALIZING
            - WATCHING
            - PROCESSING
            - COMPLETED
            - ERROR
          example: INITIALIZING
          type: string
        total_processed_items:
          description: Total items processed of source.
          example: 32849023
          format: int64
          type: integer
      type: object
    StatusAzureEventHubs:
      properties:
        last_consumed_time:
          description: Time at which the last document was consumed.
          example: "2001-08-28T00:23:41Z"
          type: string
        num_documents_processed:
          description: Number of documents consumed.
          example: 1337
          format: int64
          type: integer
        partitions:
          description: Status info per partition.
          items:
            $ref: "#/components/schemas/StatusAzureEventHubsPartition"
          type: array
        state:
          description: State of the source.
          enum:
            - NO_DOCS_YET
            - ACTIVE
            - DORMANT
          example: ACTIVE
          type: string
      type: object
    StatusAzureEventHubsPartition:
      properties:
        offset_lag:
          description: Per partition lag for offset.
          example: 10
          format: int64
          type: integer
        partition_number:
          description: The number of this partition.
          example: 123
          format: int32
          type: integer
        partition_offset:
          description: Latest offset of partition.
          example: 100
          format: int64
          type: integer
      type: object
    StatusAzureServiceBus:
      properties:
        first_processed_at:
          description: Service Bus first message processed time in ISO-8601 format.
          example: "2021-08-28T00:23:41Z"
          type: string
        records_processed:
          description: Number of records processed.
          example: 1000
          format: int64
          type: integer
        sessions:
          additionalProperties:
            $ref: "#/components/schemas/StatusAzureServiceBusSession"
          description: Sessions processed.
          type: object
      type: object
    StatusAzureServiceBusSession:
      properties:
        last_processed:
          description: >-
            Most recent ISO-8601 date when a message from this session was
            processed.
          example: "2022-08-23T00:13:41Z"
          type: string
        sequence_number:
          description: The last processed sequence number within this session.
          example: 323862
          format: int64
          type: integer
      type: object
    StatusDynamoDb:
      properties:
        scan_end_time:
          description: DynamoDb scan end time.
          example: "2001-08-28T00:23:41Z"
          type: string
        scan_records_processed:
          description: Number of records inserted using scan.
          example: 1000
          format: int64
          type: integer
        scan_start_time:
          description: DynamoDB scan start time.
          example: "2001-08-28T00:23:41Z"
          type: string
        scan_total_records:
          description: Number of records in DynamoDB table at time of scan.
          example: 2000
          format: int64
          type: integer
        state:
          description: State of current ingest for this table.
          enum:
            - INITIALIZING
            - SCANNING_TABLE
            - PROCESSING_STREAM
          example: SCANNING_TABLE
          type: string
        stream_last_processed_at:
          description: ISO-8601 date when source was last processed.
          example: "2019-01-15T21:48:23Z"
          type: string
      type: object
    StatusDynamoDbV2:
      properties:
        initial_dump_completion_percentage:
          example: 0.73
          format: double
          type: number
        state:
          description: State of current ingest for this table.
          enum:
            - INITIALIZING
            - SCANNING
            - EXPORTING_TO_S3
            - DOWNLOADING_FROM_S3
            - PROCESSING_STREAM
          example: PROCESSING_STREAM
          type: string
        stream_last_processed_at:
          description: ISO-8601 date when source was last processed.
          example: "2019-01-15T21:48:23Z"
          type: string
      type: object
    StatusKafka:
      properties:
        kafka_partitions:
          description: Status info per partition.
          items:
            $ref: "#/components/schemas/StatusKafkaPartition"
          type: array
        last_consumed_time:
          description: Time at which the last document was consumed from Kafka.
          example: "2001-08-28T00:23:41Z"
          type: string
        num_documents_processed:
          description: Number of documents consumed by this Kafka topic.
          example: 1337
          format: int64
          type: integer
        state:
          description: State of the Kafka source.
          enum:
            - NO_DOCS_YET
            - ACTIVE
            - DORMANT
          example: ACTIVE
          type: string
      type: object
    StatusKafkaPartition:
      properties:
        offset_lag:
          description: Per partition lag for offset.
          example: 10
          format: int64
          type: integer
        partition_number:
          description: The number of this partition.
          example: 123
          format: int32
          type: integer
        partition_offset:
          description: Latest offset of partition.
          example: 100
          format: int64
          type: integer
      type: object
    StatusMongoDb:
      properties:
        scan_end_time:
          description: MongoDB scan end time.
          example: "2001-08-28T00:23:41Z"
          type: string
        scan_records_processed:
          description: Number of records inserted using scan.
          example: 1000
          format: int64
          type: integer
        scan_start_time:
          description: MongoDB scan start time.
          example: "2001-08-28T00:23:41Z"
          type: string
        scan_total_records:
          description: Number of records in MongoDB table at time of scan.
          example: 2000
          format: int64
          type: integer
        state:
          description: State of current ingest for this table.
          enum:
            - INITIALIZING
            - SCANNING_TABLE
            - PROCESSING_STREAM
          example: SCANNING_TABLE
          type: string
        stream_last_delete_processed_at:
          description: ISO-8601 date when delete from source was last processed.
          example: "2019-01-15T21:48:23Z"
          type: string
        stream_last_insert_processed_at:
          description: ISO-8601 date when new insert from source was last processed.
          example: "2019-01-15T21:48:23Z"
          type: string
        stream_last_update_processed_at:
          description: ISO-8601 date when update from source was last processed.
          example: "2019-01-15T21:48:23Z"
          type: string
        stream_records_deleted:
          description: Number of new records deleted using stream.
          example: 100
          format: int64
          type: integer
        stream_records_inserted:
          description: Number of new records inserted using stream.
          example: 10000
          format: int64
          type: integer
        stream_records_updated:
          description: Number of new records updated using stream.
          example: 1000
          format: int64
          type: integer
      type: object
    StatusSnowflake:
      properties:
        state:
          description: State of current ingest for this table.
          enum:
            - INITIALIZING
            - EXPORTING_TO_S3
            - DOWNLOADING_FROM_S3
            - COMPLETED
          example: EXPORTING_TO_S3
          type: string
      type: object
    SuspendVirtualInstanceResponse:
      properties:
        data:
          $ref: "#/components/schemas/VirtualInstance"
          description: Virtual instance that was suspended.
      type: object
    UnsubscribePreference:
      description: Notification preferences for the user.
      properties:
        notificationType:
          description: The type of notification to be unsubscribed from.
          example: create_apikey
          type: string
      required:
        - notificationType
      type: object
    UpdateAliasRequest:
      properties:
        collections:
          description: List of fully qualified collection names referenced by alias.
          example: '["commons.foo", "prod.demo"]'
          items:
            type: string
          type: array
        description:
          description: Optional description.
          example: version alias
          type: string
      required:
        - collections
      type: object
    UpdateApiKeyRequest:
      properties:
        state:
          description: State that the api key should be set to.
          enum:
            - ACTIVE
            - SUSPENDED
          example: ACTIVE
          type: string
      type: object
    UpdateApiKeyResponse:
      properties:
        data:
          $ref: "#/components/schemas/ApiKey"
          description: The API key that was updated.
      type: object
    UpdateQueryLambdaRequest:
      properties:
        description:
          description: Optional description.
          example: production version foo
          type: string
        is_public:
          type: boolean
        sql:
          $ref: "#/components/schemas/QueryLambdaSql"
          description: Query Lambda SQL query.
      type: object
    UpdateRoleRequest:
      properties:
        description:
          description: Description for the role.
          example: Role with read and write privileges to all collections.
          type: string
        privileges:
          description: List of privileges that will be associated with the role.
          items:
            $ref: "#/components/schemas/Privilege"
          type: array
      type: object
    UpdateUnsubscribePreferencesRequest:
      properties:
        data:
          description: List of notification preferences.
          items:
            $ref: "#/components/schemas/UnsubscribePreference"
          type: array
      type: object
    UpdateUnsubscribePreferencesResponse:
      properties:
        data:
          description: List of notification preferences.
          items:
            $ref: "#/components/schemas/UnsubscribePreference"
          type: array
      type: object
    UpdateUserRequest:
      properties:
        first_name:
          description: User first name.
          example: John
          type: string
        last_name:
          description: User last name.
          example: Doe
          type: string
        roles:
          description: New list of roles for a given user.
          example: '["admin", "member", "read-only"]'
          items:
            type: string
          type: array
      type: object
    UpdateViewRequest:
      properties:
        description:
          description: Optional description.
          example: view of awesome collection
          type: string
        query:
          description: SQL for this view.
          example: SELECT * FROM foo
          type: string
      required:
        - query
      type: object
    UpdateViewResponse:
      properties:
        data:
          $ref: "#/components/schemas/View"
          description: View that was updated.
      type: object
    UpdateVirtualInstanceRequest:
      properties:
        auto_suspend_enabled:
          description: Whether auto-suspend should be enabled for this Virtual Instance.
          example: true
          type: boolean
        auto_suspend_seconds:
          description: Number of seconds without queries after which the VI is suspended
          example: 3600
          format: int32
          type: integer
        description:
          description: New virtual instance description.
          example: VI for prod traffic
          type: string
        monitoring_enabled:
          type: boolean
        name:
          description: New virtual instance name.
          example: prod_vi
          type: string
        new_size:
          description: Requested virtual instance size.
          enum:
            - FREE
            - NANO
            - SHARED
            - MILLI
            - SMALL
            - MEDIUM
            - LARGE
            - XLARGE
            - XLARGE2
            - XLARGE4
            - XLARGE8
            - XLARGE16
          example: LARGE
          type: string
      type: object
    UpdateVirtualInstanceResponse:
      properties:
        data:
          $ref: "#/components/schemas/VirtualInstance"
          description: Virtual instance that was switched.
      type: object
    User:
      properties:
        created_at:
          description: ISO-8601 date.
          example: "2001-08-28T00:23:41Z"
          type: string
        email:
          description: User email.
          example: hello@rockset.com
          type: string
        first_name:
          description: User first name.
          example: John
          type: string
        last_name:
          description: User last name.
          example: Doe
          type: string
        roles:
          description: List of roles for a given user.
          example: '["admin", "member", "read-only"]'
          items:
            type: string
          type: array
        state:
          description: State of user - NEW / ACTIVE.
          example: ACTIVE
          type: string
      required:
        - email
      type: object
    ValidateQueryResponse:
      properties:
        parameters:
          description: List of parameters specified in query.
          example: '["foo"]'
          items:
            type: string
          type: array
        collections:
          description: List of collections specified in query.
          example: '["commons.foo"]'
          items:
            type: string
          type: array
      required:
        - collections
        - parameters
      type: object
    View:
      properties:
        created_at:
          description: ISO-8601 date.
          example: "2001-08-28T00:23:41Z"
          type: string
        creator_email:
          description: Email of the creator.
          example: xyz@rockset.com
          type: string
        description:
          description: View description.
          example: view referencing collection in workspace
          type: string
        entities:
          description: >-
            List of entities referenced by view. An entity can be a view, alias
            or collection.
          example: '["common.foo_view", "prod.demo_alias", "dev.user_collection"]'
          items:
            type: string
          type: array
        modified_at:
          description: ISO-8601 date.
          example: "2001-08-28T00:23:42Z"
          type: string
        name:
          description: Name of the view.
          example: demo
          type: string
        owner_email:
          description: "Email of the owner, note: deprecated and will always be null."
          example: abc@rockset.com
          type: string
        path:
          type: string
        query_sql:
          description: SQL query of the view.
          example: SELECT * FROM commons.foo
          type: string
        state:
          description: State of the view.
          enum:
            - CREATED
            - SYNCING
            - DELETED
          example: CREATED
          type: string
        workspace:
          description: Name of the workspace.
          example: commons
          type: string
      type: object
    VirtualInstance:
      properties:
        auto_suspend_seconds:
          description: Number of seconds without queries after which the VI is suspended
          example: 3600
          format: int32
          type: integer
        created_at:
          description: ISO-8601 date of when virtual instance was created.
          example: "2001-08-28T00:23:41Z"
          type: string
        created_by:
          description: Creator of requested virtual instance.
          example: hello@rockset.com
          type: string
        current_size:
          description: Virtual instance current size.
          enum:
            - FREE
            - NANO
            - SHARED
            - MILLI
            - SMALL
            - MEDIUM
            - LARGE
            - XLARGE
            - XLARGE2
            - XLARGE4
            - XLARGE8
            - XLARGE16
          example: MEDIUM
          readOnly: true
          type: string
        default_pod_count:
          format: int32
          type: integer
        default_vi:
          type: boolean
        description:
          description: Virtual instance description.
          example: VI for prod traffic
          type: string
        desired_size:
          description: Virtual instance desired size.
          enum:
            - FREE
            - NANO
            - SHARED
            - MILLI
            - SMALL
            - MEDIUM
            - LARGE
            - XLARGE
            - XLARGE2
            - XLARGE4
            - XLARGE8
            - XLARGE16
          example: MEDIUM
          readOnly: true
          type: string
        id:
          description: Unique identifier for virtual instance.
          example: 123e4567-e89b-12d3-a456-556642440000
          type: string
        monitoring_enabled:
          type: boolean
        name:
          description: Virtual instance name.
          example: prod_vi
          type: string
        resumed_at:
          description: ISO-8601 date of when virtual instance was created.
          example: "2001-08-28T00:23:41Z"
          type: string
        rrn:
          description: Virtual Instance RRN.
          example: "rrn:vi:use1a1:123e4567-e89b-12d3-a456-556642440000"
          type: string
        scaled_pod_count:
          format: int32
          type: integer
        state:
          description: Virtual instance state.
          enum:
            - INITIALIZING
            - PROVISIONING_RESOURCES
            - REBALANCING_COLLECTIONS
            - ACTIVE
            - SUSPENDING
            - SUSPENDED
            - RESUMING
            - DELETED
          example: ACTIVE
          type: string
        stats:
          $ref: "#/components/schemas/VirtualInstanceStats"
          description: Stats about this VirtualInstance
      required:
        - name
      type: object
    VirtualInstanceStats:
      properties:
        last_queried_ms:
          description: "Milliseconds since Unix epoch Jan 1, 1970."
          example: 1535101119334
          format: int64
          type: integer
      type: object
    Workspace:
      description: Workspaces are organizational containers for collections.
      properties:
        collection_count:
          description: Number of collections that are immediate children of workspace.
          example: 3
          format: int64
          type: integer
        created_at:
          description: ISO-8601 date of when workspace was created.
          example: "2001-08-28T00:23:41Z"
          type: string
        created_by:
          description: Email of user who created the workspace.
          example: hello@rockset.com
          type: string
        description:
          description: Longer explanation for the workspace.
          example: Datasets of system logs for the ops team.
          type: string
        name:
          description: Descriptive label and unique identifier.
          example: event_logs
          type: string
      type: object
    XmlParams:
      properties:
        attribute_prefix:
          description: Tag to differentiate between attributes and elements.
          example: _attr
          type: string
        doc_tag:
          description: Tags with which documents are identified.
          example: row
          type: string
        encoding:
          description: Encoding in which data source is encoded.
          example: UTF-8
          type: string
        root_tag:
          description: Tag until which xml is ignored.
          example: root
          type: string
        value_tag:
          description: >-
            tag used for the value when there are attributes in the element
            having no child
          example: value
          type: string
      type: object
tags:
  - name: API Keys
  - name: Aliases
  - name: Collections
  - name: Custom Roles
  - name: Documents
  - name: Integrations
  - name: Organizations
  - name: Queries
  - name: Query Lambdas
  - name: Shared Lambdas
  - name: Users
  - name: Views
  - name: Virtual Instances
  - name: Workspaces
